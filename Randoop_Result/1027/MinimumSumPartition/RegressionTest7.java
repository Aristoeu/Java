package MinimumSumPartition;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test3501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-457));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
    }

    @Test
    public void test3503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3503");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-581));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3504");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-205));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3505");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-356));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-232) + "'", int12 == (-232));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-61) + "'", int14 == (-61));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-460) + "'", int16 == (-460));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3506");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-176));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3507");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-54));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-41));
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-997));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test3509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3509");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-207) + "'", int11 == (-207));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-751) + "'", int14 == (-751));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test3511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3511");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-772));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-232));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-24) + "'", int10 == (-24));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-876) + "'", int13 == (-876));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-336) + "'", int15 == (-336));
    }

    @Test
    public void test3512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3512");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-104));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-128) + "'", int7 == (-128));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-208) + "'", int10 == (-208));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-187) + "'", int12 == (-187));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3513");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-291));
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3515");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3516");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-375));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-7));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-852));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-479) + "'", int9 == (-479));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-111) + "'", int11 == (-111));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-956) + "'", int14 == (-956));
    }

    @Test
    public void test3517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3517");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-624));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-373));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3518");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
    }

    @Test
    public void test3519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3519");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 51);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-251));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-21) + "'", int5 == (-21));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-271) + "'", int11 == (-271));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test3520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-607));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-279) + "'", int13 == (-279));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-751) + "'", int15 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-711) + "'", int18 == (-711));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
    }

    @Test
    public void test3521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3521");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-277));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-239));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-685));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass16 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-297) + "'", int10 == (-297));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-259) + "'", int12 == (-259));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-705) + "'", int14 == (-705));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-751));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-959));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-855) + "'", int14 == (-855));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1063) + "'", int18 == (-1063));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-373) + "'", int20 == (-373));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test3523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-104));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-520) + "'", int10 == (-520));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-103) + "'", int12 == (-103));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-94) + "'", int15 == (-94));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-208) + "'", int18 == (-208));
    }

    @Test
    public void test3524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-41));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-167) + "'", int11 == (-167));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-145) + "'", int14 == (-145));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        java.lang.Class<?> wildcardClass9 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-187) + "'", int8 == (-187));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3527");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-271));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-417) + "'", int12 == (-417));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-375) + "'", int14 == (-375));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-104) + "'", int18 == (-104));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
    }

    @Test
    public void test3528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3528");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1072));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1176) + "'", int16 == (-1176));
    }

    @Test
    public void test3529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3529");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-979));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1083) + "'", int16 == (-1083));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test3530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3530");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-503));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-198));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-607) + "'", int14 == (-607));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-302) + "'", int18 == (-302));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test3531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3531");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test3532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-176));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-11));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-115) + "'", int14 == (-115));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test3533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3533");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test3535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3535");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-207));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test3536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3537");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-503) + "'", int10 == (-503));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-417) + "'", int14 == (-417));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test3538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-520));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-221));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-540) + "'", int12 == (-540));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-241) + "'", int17 == (-241));
    }

    @Test
    public void test3539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3539");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-656));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test3540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3540");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-195));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-157) + "'", int12 == (-157));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-299) + "'", int14 == (-299));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-503) + "'", int16 == (-503));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3541");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-114));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3542");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-439));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-439));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-601));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass17 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-459) + "'", int10 == (-459));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-459) + "'", int12 == (-459));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-621) + "'", int14 == (-621));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-165) + "'", int15 == (-165));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test3544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-837));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-128) + "'", int7 == (-128));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-941) + "'", int10 == (-941));
    }

    @Test
    public void test3545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3545");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3546");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1081));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1185) + "'", int20 == (-1185));
    }

    @Test
    public void test3547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3547");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-7));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-111) + "'", int10 == (-111));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test3548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3548");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        java.lang.Class<?> wildcardClass12 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-20) + "'", int9 == (-20));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-312) + "'", int14 == (-312));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-277));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-297) + "'", int10 == (-297));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test3551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        java.lang.Class<?> wildcardClass23 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-72) + "'", int19 == (-72));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-393) + "'", int22 == (-393));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-123));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-232));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-27) + "'", int12 == (-27));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-143) + "'", int15 == (-143));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-252) + "'", int19 == (-252));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-20) + "'", int21 == (-20));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test3553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-167));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3554");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test3555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-131));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-563));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-749));
        java.lang.Class<?> wildcardClass25 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-103) + "'", int14 == (-103));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-235) + "'", int18 == (-235));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-667) + "'", int20 == (-667));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-853) + "'", int24 == (-853));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test3556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3556");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test3557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3557");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-105));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-209) + "'", int12 == (-209));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-751) + "'", int14 == (-751));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-497));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '#');
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-601) + "'", int13 == (-601));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-69) + "'", int17 == (-69));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test3559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-581));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test3560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3560");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-393) + "'", int12 == (-393));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-165) + "'", int14 == (-165));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test3561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-235));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1041));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-356) + "'", int15 == (-356));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1145) + "'", int19 == (-1145));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
    }

    @Test
    public void test3563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3563");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test3564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3564");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3565");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3566");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-503));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-322));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3567");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-271));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-64));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-375) + "'", int14 == (-375));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-168) + "'", int16 == (-168));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-108));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 84);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3569");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-508));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3570");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-440));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-339));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-157));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-497));
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-261) + "'", int15 == (-261));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-601) + "'", int18 == (-601));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-94) + "'", int19 == (-94));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
    }

    @Test
    public void test3573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3573");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-148));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-440));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3575");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-343));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-83));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-829));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3576");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-649));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-753) + "'", int16 == (-753));
    }

    @Test
    public void test3577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3577");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-957));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1061) + "'", int15 == (-1061));
    }

    @Test
    public void test3578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3578");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-247));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3579");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-27));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-940));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3580");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3581");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-525));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-157) + "'", int14 == (-157));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-629) + "'", int18 == (-629));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test3582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 51);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-403));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-53) + "'", int14 == (-53));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-271) + "'", int17 == (-271));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-507) + "'", int19 == (-507));
    }

    @Test
    public void test3583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3584");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass4 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-406));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3587");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-607));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-751) + "'", int14 == (-751));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-711) + "'", int17 == (-711));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3588");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-581));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-685) + "'", int15 == (-685));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-477) + "'", int19 == (-477));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test3589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
    }

    @Test
    public void test3590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3590");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-420));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-229) + "'", int10 == (-229));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-524) + "'", int15 == (-524));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 10);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass11 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-647));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-227));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test3593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3593");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-173));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-623));
        int int27 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int29 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-363));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-404) + "'", int19 == (-404));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-277) + "'", int21 == (-277));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-727) + "'", int25 == (-727));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-207) + "'", int27 == (-207));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-467) + "'", int29 == (-467));
    }

    @Test
    public void test3594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-508));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-612) + "'", int16 == (-612));
    }

    @Test
    public void test3595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-421));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-27) + "'", int16 == (-27));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-441) + "'", int19 == (-441));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test3596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-193));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-123));
        java.lang.Class<?> wildcardClass23 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-148) + "'", int16 == (-148));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-297) + "'", int20 == (-297));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-227) + "'", int22 == (-227));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-817));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1267));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-921) + "'", int13 == (-921));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1371) + "'", int15 == (-1371));
    }

    @Test
    public void test3598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3598");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-237));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-167) + "'", int11 == (-167));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-341) + "'", int15 == (-341));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test3600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-51));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass27 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-64));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        java.lang.Class<?> wildcardClass16 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-128) + "'", int12 == (-128));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 43 + "'", int14 == 43);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 43 + "'", int15 == 43);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3602");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3603");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-185));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3605");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-336));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-503) + "'", int10 == (-503));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-440) + "'", int13 == (-440));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3606");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-114));
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-4) + "'", int13 == (-4));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-104) + "'", int15 == (-104));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-218) + "'", int17 == (-218));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-251));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-355) + "'", int14 == (-355));
    }

    @Test
    public void test3608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3608");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
    }

    @Test
    public void test3609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3609");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-447));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-187) + "'", int8 == (-187));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-551) + "'", int13 == (-551));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test3610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3610");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-53));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3611");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-420) + "'", int15 == (-420));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test3612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3612");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-420));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-52) + "'", int19 == (-52));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-524) + "'", int21 == (-524));
    }

    @Test
    public void test3613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-420) + "'", int15 == (-420));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3614");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-103));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-893));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass19 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3615");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-420));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-54));
        java.lang.Class<?> wildcardClass21 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3616");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-365));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-105) + "'", int12 == (-105));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-105) + "'", int14 == (-105));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-469) + "'", int16 == (-469));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-4) + "'", int18 == (-4));
    }

    @Test
    public void test3617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3617");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-997));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-27) + "'", int16 == (-27));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1017) + "'", int21 == (-1017));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test3618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-484));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3619");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-277));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass13 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-297) + "'", int10 == (-297));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-416) + "'", int14 == (-416));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test3621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3621");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 10);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3622");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-311));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-232));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-299));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-21) + "'", int5 == (-21));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-331) + "'", int10 == (-331));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-252) + "'", int13 == (-252));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-319) + "'", int16 == (-319));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-10) + "'", int18 == (-10));
    }

    @Test
    public void test3623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-523));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-94) + "'", int15 == (-94));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-627) + "'", int18 == (-627));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3624");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-165));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-94) + "'", int13 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-269) + "'", int16 == (-269));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
    }

    @Test
    public void test3625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass26 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-105) + "'", int17 == (-105));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-229) + "'", int19 == (-229));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-104) + "'", int23 == (-104));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-104) + "'", int25 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test3626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3626");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-108));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-176));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-212) + "'", int20 == (-212));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-280) + "'", int23 == (-280));
    }

    @Test
    public void test3627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3627");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-855));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-52));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-875) + "'", int12 == (-875));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-72) + "'", int15 == (-72));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test3628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3628");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-979));
        java.lang.Class<?> wildcardClass21 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 51);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-27));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-53) + "'", int14 == (-53));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-131) + "'", int16 == (-131));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3631");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 51);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-543));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-53) + "'", int15 == (-53));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-420) + "'", int17 == (-420));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-647) + "'", int20 == (-647));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-61) + "'", int23 == (-61));
    }

    @Test
    public void test3632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-94));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-198) + "'", int14 == (-198));
    }

    @Test
    public void test3633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3633");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-757));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 31);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-543) + "'", int12 == (-543));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-73) + "'", int16 == (-73));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3635");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3636");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-561));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-665) + "'", int13 == (-665));
    }

    @Test
    public void test3637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3637");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-335));
        java.lang.Class<?> wildcardClass20 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-94));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-198) + "'", int15 == (-198));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test3639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3639");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-51));
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3640");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        java.lang.Class<?> wildcardClass12 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3641");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-395));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-195));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-417));
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-499) + "'", int19 == (-499));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-299) + "'", int21 == (-299));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-521) + "'", int23 == (-521));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 51 + "'", int25 == 51);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
    }

    @Test
    public void test3642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3642");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-89));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-196));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-835));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-193) + "'", int14 == (-193));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-300) + "'", int16 == (-300));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-939) + "'", int20 == (-939));
    }

    @Test
    public void test3644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3644");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass9 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3645");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-5));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-523));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3647");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-373) + "'", int12 == (-373));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-104) + "'", int16 == (-104));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test3648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3648");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-551));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1252));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-655) + "'", int15 == (-655));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1356) + "'", int18 == (-1356));
    }

    @Test
    public void test3649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-324));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3650");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-193));
        java.lang.Class<?> wildcardClass6 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3651");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-165));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-520) + "'", int10 == (-520));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-103) + "'", int12 == (-103));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-52) + "'", int14 == (-52));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-104) + "'", int16 == (-104));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-269) + "'", int19 == (-269));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test3652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-167));
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 43 + "'", int8 == 43);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-231) + "'", int13 == (-231));
    }

    @Test
    public void test3653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-187));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-291) + "'", int11 == (-291));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
    }

    @Test
    public void test3654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-439) + "'", int14 == (-439));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-4) + "'", int16 == (-4));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3655");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-300));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-44));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3656");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-271));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        java.lang.Class<?> wildcardClass12 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-335) + "'", int8 == (-335));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3657");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-543) + "'", int16 == (-543));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test3658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 10);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-94) + "'", int16 == (-94));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3660");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-41));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-187));
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-167) + "'", int11 == (-167));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-145) + "'", int14 == (-145));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-291) + "'", int18 == (-291));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3661");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3662");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-131));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-760));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-511));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-235) + "'", int17 == (-235));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-864) + "'", int19 == (-864));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-615) + "'", int21 == (-615));
    }

    @Test
    public void test3663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3663");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-353));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-655));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3664");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 15);
        java.lang.Class<?> wildcardClass20 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3665");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-148));
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-252) + "'", int17 == (-252));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3666");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test3667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3667");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-229) + "'", int15 == (-229));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3668");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3669");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-415));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-95));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-519) + "'", int17 == (-519));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-199) + "'", int20 == (-199));
    }

    @Test
    public void test3670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3670");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-108) + "'", int17 == (-108));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3671");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-497));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-601) + "'", int13 == (-601));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3672");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-420));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-92));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-229) + "'", int10 == (-229));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-524) + "'", int15 == (-524));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-196) + "'", int18 == (-196));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test3673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3673");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3674");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-353));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-457) + "'", int14 == (-457));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-52) + "'", int16 == (-52));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3675");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
    }

    @Test
    public void test3676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3676");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-312));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3677");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-956));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3678");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-335));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3679");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-105) + "'", int17 == (-105));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-229) + "'", int19 == (-229));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3680");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-607));
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-279) + "'", int13 == (-279));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-751) + "'", int15 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-711) + "'", int18 == (-711));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3681");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3682");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-280));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-384) + "'", int8 == (-384));
    }

    @Test
    public void test3683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3683");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-539));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-643) + "'", int18 == (-643));
    }

    @Test
    public void test3684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3684");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-227));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass11 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-247) + "'", int9 == (-247));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3685");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-457));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-624));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3686");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3687");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-104) + "'", int15 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3688");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-148));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-252) + "'", int16 == (-252));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-71) + "'", int20 == (-71));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
    }

    @Test
    public void test3689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3689");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        java.lang.Class<?> wildcardClass11 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3690");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-108));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-543));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-108));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3691");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-297));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-603));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-401) + "'", int10 == (-401));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-707) + "'", int13 == (-707));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3692");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-317));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3693");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-173));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-404) + "'", int19 == (-404));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-277) + "'", int21 == (-277));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
    }

    @Test
    public void test3694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3694");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 43);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        java.lang.Class<?> wildcardClass20 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3695");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3696");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-581));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-645));
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-108) + "'", int17 == (-108));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-685) + "'", int21 == (-685));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-749) + "'", int23 == (-749));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
    }

    @Test
    public void test3697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3697");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 80);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-63) + "'", int12 == (-63));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 43 + "'", int14 == 43);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    }

    @Test
    public void test3698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3698");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-165) + "'", int15 == (-165));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-393) + "'", int17 == (-393));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3699");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1041));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3700");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-212));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-279));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-155));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test3701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3701");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 936);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 832 + "'", int12 == 832);
    }

    @Test
    public void test3702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3702");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-1207));
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1271) + "'", int14 == (-1271));
    }

    @Test
    public void test3703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3703");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-415));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-933));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3704");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-108));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-543));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3705");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-167) + "'", int11 == (-167));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3706");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-588));
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3707");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-277));
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-381) + "'", int10 == (-381));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3708");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-207) + "'", int11 == (-207));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test3709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3709");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-393) + "'", int13 == (-393));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test3710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3710");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3711");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-399));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-168));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3712");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3713");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 15);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-488));
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3714");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-207));
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3715");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-104) + "'", int10 == (-104));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-173) + "'", int14 == (-173));
    }

    @Test
    public void test3716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3716");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3717");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-277));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-381) + "'", int16 == (-381));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test3718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3718");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-27));
        java.lang.Class<?> wildcardClass6 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3719");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test3720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3720");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-540));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-543) + "'", int12 == (-543));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-644) + "'", int15 == (-644));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test3721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3721");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-64));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-128) + "'", int12 == (-128));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
    }

    @Test
    public void test3722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3722");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-124));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-44));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-92));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3723");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-123));
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3724");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-419));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3725");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-252));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-175));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-316) + "'", int13 == (-316));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-239) + "'", int15 == (-239));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 43 + "'", int16 == 43);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 43 + "'", int17 == 43);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21 + "'", int18 == 21);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 43 + "'", int19 == 43);
    }

    @Test
    public void test3726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3726");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-383));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-403) + "'", int18 == (-403));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test3727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3727");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-212));
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int28 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        java.lang.Class<?> wildcardClass29 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-123) + "'", int17 == (-123));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-173) + "'", int20 == (-173));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-316) + "'", int23 == (-316));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 51 + "'", int26 == 51);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-279) + "'", int28 == (-279));
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3728");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-105));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-979));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-209) + "'", int20 == (-209));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-51) + "'", int22 == (-51));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1083) + "'", int25 == (-1083));
    }

    @Test
    public void test3729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3729");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-269));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 43 + "'", int14 == 43);
    }

    @Test
    public void test3730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3730");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-316));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3731");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test3732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3732");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1083));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1187) + "'", int17 == (-1187));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
    }

    @Test
    public void test3733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3733");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-64));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1039));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-168) + "'", int11 == (-168));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1143) + "'", int15 == (-1143));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3734");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-104));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-128) + "'", int7 == (-128));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-208) + "'", int10 == (-208));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3735");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3736");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-457));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3737");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-592));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-696) + "'", int13 == (-696));
    }

    @Test
    public void test3738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3738");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass10 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3739");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-4));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-21) + "'", int5 == (-21));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-24) + "'", int12 == (-24));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test3740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3740");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test3741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3741");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-521));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-209));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-524));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-540));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test3742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3742");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 84);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1147));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-105) + "'", int8 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-20) + "'", int10 == (-20));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1251) + "'", int13 == (-1251));
    }

    @Test
    public void test3743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3743");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-551));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1025));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-293));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3744");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-795));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-543) + "'", int11 == (-543));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-187) + "'", int13 == (-187));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-899) + "'", int15 == (-899));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3745");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test3746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3746");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass8 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3747");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3748");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-156));
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3749");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-716));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-820) + "'", int14 == (-820));
    }

    @Test
    public void test3750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3750");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-933));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-303));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-957));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-953) + "'", int12 == (-953));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-323) + "'", int14 == (-323));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-977) + "'", int16 == (-977));
    }

    @Test
    public void test3751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3751");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1252));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1356) + "'", int20 == (-1356));
    }

    @Test
    public void test3752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3752");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-624));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-988));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3753");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-627));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-731) + "'", int15 == (-731));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3754");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-175) + "'", int11 == (-175));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3755");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-365));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-105) + "'", int12 == (-105));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-105) + "'", int14 == (-105));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-469) + "'", int16 == (-469));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test3756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3756");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-317));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-421) + "'", int16 == (-421));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3757");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-104) + "'", int16 == (-104));
    }

    @Test
    public void test3758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3758");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-769));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-393) + "'", int12 == (-393));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-165) + "'", int14 == (-165));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-873) + "'", int17 == (-873));
    }

    @Test
    public void test3759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3759");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3760");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-7));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-111) + "'", int10 == (-111));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test3761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3761");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-7));
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-915));
        java.lang.Class<?> wildcardClass27 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-111) + "'", int24 == (-111));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1019) + "'", int26 == (-1019));
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3762");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-167));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-215));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3763");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-353));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-503));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-40));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-457) + "'", int14 == (-457));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-607) + "'", int17 == (-607));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-144) + "'", int19 == (-144));
    }

    @Test
    public void test3764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3764");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-20));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3765");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-353));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-732));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-457) + "'", int14 == (-457));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-836) + "'", int17 == (-836));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test3766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3766");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-855));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-748));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-875) + "'", int12 == (-875));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-768) + "'", int14 == (-768));
    }

    @Test
    public void test3767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3767");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-195));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test3768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3768");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-404));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-108) + "'", int16 == (-108));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-508) + "'", int18 == (-508));
    }

    @Test
    public void test3769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3769");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-156));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-260) + "'", int10 == (-260));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3770");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-291));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-260));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-395) + "'", int17 == (-395));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-364) + "'", int19 == (-364));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
    }

    @Test
    public void test3771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3771");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-207) + "'", int11 == (-207));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3772");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-439) + "'", int19 == (-439));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test3773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3773");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-751));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-855) + "'", int14 == (-855));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-105) + "'", int18 == (-105));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test3774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3774");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-437));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3775");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-884));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-988) + "'", int14 == (-988));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3776");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-229) + "'", int12 == (-229));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-175) + "'", int16 == (-175));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3777");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-543));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3778");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-835));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3779");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-94));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-104) + "'", int10 == (-104));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-198) + "'", int16 == (-198));
    }

    @Test
    public void test3780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3780");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test3781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3781");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-420));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-104) + "'", int8 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-524) + "'", int10 == (-524));
    }

    @Test
    public void test3782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3782");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-92));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1059));
        java.lang.Class<?> wildcardClass7 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3783");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3784");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-252));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-601));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3785");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-232) + "'", int12 == (-232));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-61) + "'", int14 == (-61));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-404) + "'", int16 == (-404));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
    }

    @Test
    public void test3786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3786");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-497));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-601) + "'", int18 == (-601));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3787");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-581));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-448));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3788");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-353));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-123) + "'", int17 == (-123));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-457) + "'", int19 == (-457));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
    }

    @Test
    public void test3789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3789");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-592));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test3790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3790");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-54));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-41));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test3791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3791");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-64));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-168) + "'", int11 == (-168));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test3792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3792");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-271));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (int) (byte) 0);
        java.lang.Class<?> wildcardClass13 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-335) + "'", int8 == (-335));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-64) + "'", int12 == (-64));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3793");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-820));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3794");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test3795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3795");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-543) + "'", int16 == (-543));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3796");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-108));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3797");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-588));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3798");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-364));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-468) + "'", int21 == (-468));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
    }

    @Test
    public void test3799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3799");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-89));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-196));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-193) + "'", int14 == (-193));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-300) + "'", int16 == (-300));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3800");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-103));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-280));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-21) + "'", int5 == (-21));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-123) + "'", int8 == (-123));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-300) + "'", int10 == (-300));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test3801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3801");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-811));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-915) + "'", int12 == (-915));
    }

    @Test
    public void test3802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3802");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-73));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-27) + "'", int16 == (-27));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-20) + "'", int19 == (-20));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-93) + "'", int25 == (-93));
    }

    @Test
    public void test3803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3803");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-134));
        java.lang.Class<?> wildcardClass11 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-198) + "'", int10 == (-198));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3804");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-313) + "'", int8 == (-313));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3805");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-280));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-337));
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3806");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-401));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-505) + "'", int16 == (-505));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test3807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3807");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-439));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test3808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3808");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-123));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3809");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test3810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3810");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-373));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-83));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3811");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-335));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-239));
        java.lang.Class<?> wildcardClass13 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-399) + "'", int10 == (-399));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-303) + "'", int12 == (-303));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3812");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-331));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-103) + "'", int13 == (-103));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-435) + "'", int15 == (-435));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3813");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
    }

    @Test
    public void test3814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3814");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-384));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-420) + "'", int13 == (-420));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-488) + "'", int15 == (-488));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test3815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3815");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-157) + "'", int14 == (-157));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test3816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3816");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-115));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-94) + "'", int13 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-219) + "'", int16 == (-219));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3817");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-240));
        java.lang.Class<?> wildcardClass19 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3818");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-729));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3819");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-707));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-393));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-811) + "'", int11 == (-811));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-497) + "'", int13 == (-497));
    }

    @Test
    public void test3820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3820");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-497));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-601));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-601) + "'", int13 == (-601));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-72) + "'", int17 == (-72));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-24) + "'", int19 == (-24));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-705) + "'", int21 == (-705));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
    }

    @Test
    public void test3821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3821");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-503));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-198));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass20 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-607) + "'", int14 == (-607));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-302) + "'", int18 == (-302));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3822");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) '#');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1061));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-125) + "'", int5 == (-125));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1081) + "'", int12 == (-1081));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test3823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3823");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-829));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-933) + "'", int15 == (-933));
    }

    @Test
    public void test3824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3824");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-167) + "'", int11 == (-167));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-104) + "'", int17 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3825");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1039));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1143) + "'", int18 == (-1143));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test3826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3826");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-175));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-155));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-399));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3827");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
    }

    @Test
    public void test3828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3828");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-705));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3829");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-71));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3830");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1083));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1187) + "'", int17 == (-1187));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test3831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3831");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-757));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test3832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3832");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-11));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-21) + "'", int5 == (-21));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-31) + "'", int7 == (-31));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test3833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3833");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (short) 1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 53);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-628));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-19) + "'", int10 == (-19));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33 + "'", int12 == 33);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-648) + "'", int15 == (-648));
    }

    @Test
    public void test3834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3834");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-5));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-291));
        java.lang.Class<?> wildcardClass24 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-109) + "'", int21 == (-109));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-395) + "'", int23 == (-395));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test3835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3835");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3836");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-123));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-27) + "'", int12 == (-27));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-143) + "'", int15 == (-143));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test3837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3837");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-336));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-503) + "'", int10 == (-503));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-440) + "'", int13 == (-440));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3838");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-457));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-10));
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-561) + "'", int15 == (-561));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-114) + "'", int20 == (-114));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3839");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-108));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-545));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-212) + "'", int20 == (-212));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-649) + "'", int26 == (-649));
    }

    @Test
    public void test3840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3840");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 10);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-725));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-94) + "'", int8 == (-94));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-279) + "'", int10 == (-279));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-829) + "'", int13 == (-829));
    }

    @Test
    public void test3841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3841");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
    }

    @Test
    public void test3842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3842");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-125) + "'", int11 == (-125));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3843");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-864));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-420) + "'", int14 == (-420));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-968) + "'", int16 == (-968));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3844");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-125) + "'", int11 == (-125));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3845");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-124));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 36);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3846");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-131));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-760));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-505));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-235) + "'", int17 == (-235));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-864) + "'", int19 == (-864));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-609) + "'", int21 == (-609));
    }

    @Test
    public void test3847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3847");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-279) + "'", int13 == (-279));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-751) + "'", int15 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test3848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3848");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-977));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3849");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-624));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3850");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-341));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-104) + "'", int19 == (-104));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-445) + "'", int22 == (-445));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
    }

    @Test
    public void test3851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3851");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3852");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-156));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-635));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-260) + "'", int11 == (-260));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-739) + "'", int15 == (-739));
    }

    @Test
    public void test3853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3853");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-260));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-364) + "'", int14 == (-364));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test3854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3854");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test3855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3855");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-165));
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-269) + "'", int11 == (-269));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3856");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-629));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-733) + "'", int15 == (-733));
    }

    @Test
    public void test3857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3857");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test3858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3858");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-248));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-477) + "'", int16 == (-477));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-352) + "'", int19 == (-352));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test3859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3859");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-503));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-187));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass20 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3860");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-94) + "'", int17 == (-94));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3861");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-64));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-168) + "'", int11 == (-168));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-417) + "'", int16 == (-417));
    }

    @Test
    public void test3862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3862");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-123));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test3863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3863");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-7));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-232));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-239));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-111) + "'", int10 == (-111));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-336) + "'", int13 == (-336));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-343) + "'", int16 == (-343));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-125) + "'", int18 == (-125));
    }

    @Test
    public void test3864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3864");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-592));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-549));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3865");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-519));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-20));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-323));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-623) + "'", int14 == (-623));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-124) + "'", int20 == (-124));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-427) + "'", int22 == (-427));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
    }

    @Test
    public void test3866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3866");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-105));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-413));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-711));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-24) + "'", int11 == (-24));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-209) + "'", int13 == (-209));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-517) + "'", int18 == (-517));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-815) + "'", int20 == (-815));
    }

    @Test
    public void test3867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3867");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3868");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-157) + "'", int14 == (-157));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-420) + "'", int17 == (-420));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test3869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3869");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
    }

    @Test
    public void test3870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3870");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-384));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-729));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3871");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-353));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-457) + "'", int14 == (-457));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-104) + "'", int17 == (-104));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3872");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3873");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-400));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3874");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-751) + "'", int14 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-503) + "'", int16 == (-503));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3875");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-893));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3876");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-235));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass11 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3877");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-195));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-11));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1167));
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3878");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-715));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-416) + "'", int14 == (-416));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-356) + "'", int17 == (-356));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-819) + "'", int20 == (-819));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
    }

    @Test
    public void test3879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3879");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-511));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-615) + "'", int12 == (-615));
    }

    @Test
    public void test3880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3880");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-439));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-424));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3881");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-165));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1103));
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3882");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-291));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-647));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3883");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-51));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-819));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-155) + "'", int13 == (-155));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-923) + "'", int16 == (-923));
    }

    @Test
    public void test3884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3884");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-627));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-731) + "'", int11 == (-731));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3885");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test3886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3886");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-215));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3887");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-520) + "'", int10 == (-520));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test3888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3888");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (short) 1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 53);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-19) + "'", int10 == (-19));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33 + "'", int12 == 33);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test3889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3889");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-280));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3890");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-279));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3891");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-621));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-115));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3892");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-117));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-420) + "'", int13 == (-420));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-221) + "'", int15 == (-221));
    }

    @Test
    public void test3893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3893");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-311));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3894");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-343));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-83));
        java.lang.Class<?> wildcardClass19 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3895");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-279) + "'", int13 == (-279));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-751) + "'", int15 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3896");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-51) + "'", int15 == (-51));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3897");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-54));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-393) + "'", int12 == (-393));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-158) + "'", int14 == (-158));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test3898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3898");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-195));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-11));
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3899");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-317));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3900");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3901");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-503) + "'", int15 == (-503));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-148) + "'", int17 == (-148));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3902");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-104) + "'", int17 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3903");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-404));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-94));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-979));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-148) + "'", int15 == (-148));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-508) + "'", int18 == (-508));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-198) + "'", int20 == (-198));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1083) + "'", int22 == (-1083));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
    }

    @Test
    public void test3904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3904");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-271));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-335) + "'", int8 == (-335));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
    }

    @Test
    public void test3905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3905");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 43);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) 'a');
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3906");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-322));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3907");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
    }

    @Test
    public void test3908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3908");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-364));
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-187) + "'", int21 == (-187));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-468) + "'", int23 == (-468));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
    }

    @Test
    public void test3909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3909");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-313));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass19 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3910");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-89));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-196));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-193) + "'", int14 == (-193));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-300) + "'", int16 == (-300));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-104) + "'", int19 == (-104));
    }

    @Test
    public void test3911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3911");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 43);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3912");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-603));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3913");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-627));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-731) + "'", int15 == (-731));
    }

    @Test
    public void test3914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3914");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 10);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3915");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-52) + "'", int12 == (-52));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-104) + "'", int15 == (-104));
    }

    @Test
    public void test3916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3916");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass25 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-72) + "'", int19 == (-72));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-393) + "'", int22 == (-393));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-104) + "'", int24 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test3917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3917");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-185));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3918");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-523));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3919");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-299));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-108) + "'", int14 == (-108));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-61) + "'", int16 == (-61));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-403) + "'", int21 == (-403));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
    }

    @Test
    public void test3920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3920");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-271));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-760));
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-335) + "'", int8 == (-335));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-824) + "'", int11 == (-824));
    }

    @Test
    public void test3921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3921");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-20));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-4) + "'", int11 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-124) + "'", int13 == (-124));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test3922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3922");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-173));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-623));
        int int27 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int29 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-355));
        int int31 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-40));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-404) + "'", int19 == (-404));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-277) + "'", int21 == (-277));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-727) + "'", int25 == (-727));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-207) + "'", int27 == (-207));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-459) + "'", int29 == (-459));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-144) + "'", int31 == (-144));
    }

    @Test
    public void test3923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3923");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-603));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-549));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-800));
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-707) + "'", int13 == (-707));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-653) + "'", int16 == (-653));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-904) + "'", int20 == (-904));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3924");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-399));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1123));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3925");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1143));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3926");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-601));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-277));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-647));
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3927");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3928");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3929");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-123) + "'", int12 == (-123));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3930");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-915));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-21) + "'", int5 == (-21));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-935) + "'", int8 == (-935));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test3931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3931");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3932");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-395));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-499) + "'", int21 == (-499));
    }

    @Test
    public void test3933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3933");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-207));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-728));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3934");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-317));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-164));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-421) + "'", int16 == (-421));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-268) + "'", int19 == (-268));
    }

    @Test
    public void test3935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3935");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test3936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3936");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-64));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-653));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-168) + "'", int11 == (-168));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-757) + "'", int16 == (-757));
    }

    @Test
    public void test3937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3937");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass10 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-20) + "'", int7 == (-20));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3938");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3939");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test3940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3940");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-543));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-539));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-647) + "'", int14 == (-647));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-643) + "'", int19 == (-643));
    }

    @Test
    public void test3941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3941");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-375));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-696));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-817));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-395) + "'", int16 == (-395));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-716) + "'", int18 == (-716));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-837) + "'", int20 == (-837));
    }

    @Test
    public void test3942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3942");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-209));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3943");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-271));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-488));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-417) + "'", int12 == (-417));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-375) + "'", int14 == (-375));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-104) + "'", int18 == (-104));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-592) + "'", int20 == (-592));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-312) + "'", int24 == (-312));
    }

    @Test
    public void test3944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3944");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-875));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-27));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-979) + "'", int11 == (-979));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-131) + "'", int13 == (-131));
    }

    @Test
    public void test3945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3945");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-52));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-477) + "'", int13 == (-477));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-156) + "'", int19 == (-156));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test3946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3946");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        java.lang.Class<?> wildcardClass11 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3947");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3948");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-103));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-175));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-21) + "'", int5 == (-21));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-123) + "'", int8 == (-123));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-195) + "'", int11 == (-195));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-20) + "'", int13 == (-20));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test3949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3949");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 15);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-439));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3950");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-959));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3951");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-195));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-609));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-299) + "'", int15 == (-299));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-713) + "'", int17 == (-713));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test3952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3952");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-148));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-440));
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3953");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-24) + "'", int11 == (-24));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3954");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 43 + "'", int14 == 43);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
    }

    @Test
    public void test3955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3955");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-195));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-383));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1271));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3956");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-457));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass20 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-561) + "'", int15 == (-561));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3957");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-232));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-319));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3958");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-417));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-521) + "'", int11 == (-521));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-313) + "'", int13 == (-313));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
    }

    @Test
    public void test3959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3959");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-247));
        java.lang.Class<?> wildcardClass9 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-351) + "'", int8 == (-351));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3960");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-581));
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3961");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-421));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-525) + "'", int8 == (-525));
    }

    @Test
    public void test3962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3962");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-187));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-520) + "'", int10 == (-520));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-103) + "'", int12 == (-103));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-52) + "'", int14 == (-52));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-291) + "'", int19 == (-291));
    }

    @Test
    public void test3963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3963");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3964");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-581));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1559));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3965");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-252));
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3966");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-232));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-800));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3967");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3968");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-105));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-20));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-24) + "'", int11 == (-24));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-209) + "'", int13 == (-209));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-124) + "'", int16 == (-124));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test3969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3969");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3970");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3971");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3972");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-621));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-115));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-364));
        java.lang.Class<?> wildcardClass11 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3973");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3974");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-317));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-421) + "'", int13 == (-421));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test3975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3975");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-355));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-279) + "'", int13 == (-279));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-751) + "'", int15 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-459) + "'", int19 == (-459));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test3976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3976");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-316));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3977");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-356) + "'", int26 == (-356));
    }

    @Test
    public void test3978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3978");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-457));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test3979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3979");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-479));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-105) + "'", int17 == (-105));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-583) + "'", int19 == (-583));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
    }

    @Test
    public void test3980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3980");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-229));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
    }

    @Test
    public void test3981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3981");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
    }

    @Test
    public void test3982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3982");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3983");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 36);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-68) + "'", int16 == (-68));
    }

    @Test
    public void test3984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3984");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3985");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-114));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-417));
        java.lang.Class<?> wildcardClass9 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3986");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-173));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-404) + "'", int19 == (-404));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-277) + "'", int21 == (-277));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
    }

    @Test
    public void test3987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3987");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-31));
        java.lang.Class<?> wildcardClass16 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-63) + "'", int12 == (-63));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-95) + "'", int15 == (-95));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3988");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-395));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-195));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-417));
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        java.lang.Class<?> wildcardClass26 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-499) + "'", int19 == (-499));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-299) + "'", int21 == (-299));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-521) + "'", int23 == (-521));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-581) + "'", int25 == (-581));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test3989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3989");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-212));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-477) + "'", int11 == (-477));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-316) + "'", int14 == (-316));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-751) + "'", int17 == (-751));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3990");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-676));
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-780) + "'", int20 == (-780));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3991");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-819));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-456));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3992");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-131));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3993");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-333) + "'", int13 == (-333));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test3994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3994");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 21);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-893));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test3995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3995");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-167));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-415));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-205));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3996");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-212));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-279));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-924));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3997");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-198));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-364));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3998");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-771));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-875) + "'", int13 == (-875));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test3999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3999");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test4000");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-811));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-108) + "'", int14 == (-108));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-61) + "'", int16 == (-61));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-915) + "'", int19 == (-915));
    }
}


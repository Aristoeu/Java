package MinimumSumPartition;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test4501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4501");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-68));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4502");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-311));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass20 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-415) + "'", int16 == (-415));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-373) + "'", int18 == (-373));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test4503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4503");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-313));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4504");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test4505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4505");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-51));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4506");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test4507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4507");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-155));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-175) + "'", int8 == (-175));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test4508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4508");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-393));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-497) + "'", int17 == (-497));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test4509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4509");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-893));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4510");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-667));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-771) + "'", int10 == (-771));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
    }

    @Test
    public void test4511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4511");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test4512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4512");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass20 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-148) + "'", int16 == (-148));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test4513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4513");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-157) + "'", int14 == (-157));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-420) + "'", int17 == (-420));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
    }

    @Test
    public void test4514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4514");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-61));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4515");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-63) + "'", int12 == (-63));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
    }

    @Test
    public void test4516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4516");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-227));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-247) + "'", int9 == (-247));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test4517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4517");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-156));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-94) + "'", int11 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-176) + "'", int13 == (-176));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-260) + "'", int15 == (-260));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4518");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4519");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-165));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-94) + "'", int13 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-269) + "'", int16 == (-269));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-313) + "'", int18 == (-313));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test4520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4520");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-61));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-165));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4521");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-123));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-123) + "'", int17 == (-123));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-227) + "'", int19 == (-227));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
    }

    @Test
    public void test4522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4522");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-95));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-199) + "'", int10 == (-199));
    }

    @Test
    public void test4523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4523");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4524");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test4525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4525");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-711));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1271));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4526");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-581));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-685) + "'", int15 == (-685));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4527");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 84);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test4528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4528");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4529");
        int[] intArray5 = new int[] { (-1061), (-820), (-1267), (-915), (-468) };
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1061, -820, -1267, -915, -468]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 936 + "'", int7 == 936);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-4531) + "'", int8 == (-4531));
    }

    @Test
    public void test4530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4530");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4531");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-705));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4532");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-155));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-581));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4533");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test4534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4534");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test4535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4535");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-531));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-94) + "'", int19 == (-94));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-635) + "'", int22 == (-635));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
    }

    @Test
    public void test4536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4536");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-612));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-221));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-187) + "'", int8 == (-187));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-716) + "'", int12 == (-716));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-325) + "'", int15 == (-325));
    }

    @Test
    public void test4537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4537");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 21);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 31);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test4538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4538");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-335));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test4539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4539");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-260));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-144));
        java.lang.Class<?> wildcardClass16 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-164) + "'", int15 == (-164));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4540");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-521));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-625) + "'", int13 == (-625));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4541");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-417));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-521) + "'", int16 == (-521));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test4542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4542");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-977));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1081) + "'", int16 == (-1081));
    }

    @Test
    public void test4543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4543");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test4544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4544");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-108) + "'", int17 == (-108));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-229) + "'", int20 == (-229));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
    }

    @Test
    public void test4545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4545");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-435));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4546");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-420));
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4547");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-7) + "'", int14 == (-7));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4548");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4549");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1395));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1499) + "'", int15 == (-1499));
    }

    @Test
    public void test4550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4550");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-176));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-11));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-457));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-115) + "'", int14 == (-115));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-311) + "'", int17 == (-311));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-561) + "'", int19 == (-561));
    }

    @Test
    public void test4551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4551");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1167));
        java.lang.Class<?> wildcardClass7 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1271) + "'", int6 == (-1271));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test4552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4552");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4553");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-193));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-123));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-959));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-148) + "'", int16 == (-148));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-297) + "'", int20 == (-297));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-227) + "'", int22 == (-227));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1063) + "'", int26 == (-1063));
    }

    @Test
    public void test4554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4554");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-393));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-497) + "'", int15 == (-497));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4555");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test4556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4556");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-336));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4557");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-185));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-401));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-341));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-435));
        java.lang.Class<?> wildcardClass20 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test4558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4558");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-109));
        java.lang.Class<?> wildcardClass20 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-213) + "'", int19 == (-213));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test4559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4559");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-218));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4560");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-277));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-731));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-381) + "'", int16 == (-381));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-835) + "'", int19 == (-835));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test4561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4561");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test4562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4562");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 51);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-105) + "'", int17 == (-105));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-229) + "'", int19 == (-229));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-104) + "'", int23 == (-104));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-53) + "'", int25 == (-53));
    }

    @Test
    public void test4563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4563");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
    }

    @Test
    public void test4564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4564");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1019));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1123) + "'", int14 == (-1123));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test4565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4565");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-105));
        java.lang.Class<?> wildcardClass14 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-169) + "'", int13 == (-169));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4566");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4567");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
    }

    @Test
    public void test4568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4568");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-353));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-621));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass23 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-123) + "'", int17 == (-123));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-457) + "'", int19 == (-457));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-725) + "'", int21 == (-725));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test4569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4569");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-20));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4570");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-837));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass16 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4571");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-277));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-297) + "'", int15 == (-297));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test4572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4572");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-164));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4573");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-249));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4574");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-404));
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-508) + "'", int10 == (-508));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test4575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4575");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
    }

    @Test
    public void test4576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4576");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-111));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-89));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        java.lang.Class<?> wildcardClass15 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-131) + "'", int10 == (-131));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-109) + "'", int13 == (-109));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4577");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-108));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4578");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test4579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4579");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-335));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-540));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4580");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '#');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-69) + "'", int9 == (-69));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
    }

    @Test
    public void test4581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4581");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-311));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-415) + "'", int16 == (-415));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test4582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4582");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-733));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4583");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-835));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass24 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-89) + "'", int15 == (-89));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-104) + "'", int20 == (-104));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-939) + "'", int22 == (-939));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test4584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4584");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4585");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-521));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-583));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-625) + "'", int14 == (-625));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-687) + "'", int16 == (-687));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test4586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4586");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass10 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test4587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4587");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (short) 1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 53);
        java.lang.Class<?> wildcardClass13 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-19) + "'", int10 == (-19));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33 + "'", int12 == 33);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4588");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-260));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-312) + "'", int14 == (-312));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-364) + "'", int16 == (-364));
    }

    @Test
    public void test4589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4589");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-215));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-125) + "'", int11 == (-125));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-319) + "'", int16 == (-319));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
    }

    @Test
    public void test4590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4590");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-543));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-175) + "'", int14 == (-175));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-647) + "'", int16 == (-647));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test4591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4591");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-165) + "'", int15 == (-165));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-393) + "'", int17 == (-393));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test4592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4592");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-497));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4593");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-337));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4594");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-196));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass24 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-123) + "'", int17 == (-123));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-173) + "'", int20 == (-173));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-300) + "'", int22 == (-300));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test4595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4595");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-252));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-175));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-417));
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-316) + "'", int13 == (-316));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-239) + "'", int15 == (-239));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-481) + "'", int17 == (-481));
    }

    @Test
    public void test4596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4596");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-439) + "'", int8 == (-439));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
    }

    @Test
    public void test4597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4597");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-333));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-611));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-148) + "'", int15 == (-148));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-437) + "'", int18 == (-437));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-715) + "'", int21 == (-715));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-94) + "'", int24 == (-94));
    }

    @Test
    public void test4598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4598");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-399));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-404));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test4599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4599");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-27));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-300));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4600");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-89) + "'", int15 == (-89));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-104) + "'", int20 == (-104));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
    }

    @Test
    public void test4601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4601");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-420));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4602");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1045));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1037));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4603");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1072));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1176) + "'", int14 == (-1176));
    }

    @Test
    public void test4604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4604");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-94) + "'", int11 == (-94));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test4605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4605");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1225));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4606");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1165));
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4607");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-4) + "'", int11 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-520) + "'", int14 == (-520));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test4608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4608");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-497));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-124));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-158));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-601) + "'", int13 == (-601));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-232) + "'", int18 == (-232));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-228) + "'", int20 == (-228));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-262) + "'", int22 == (-262));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
    }

    @Test
    public void test4609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4609");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-820));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-520) + "'", int10 == (-520));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-103) + "'", int12 == (-103));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-420) + "'", int14 == (-420));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-924) + "'", int18 == (-924));
    }

    @Test
    public void test4610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4610");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test4611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4611");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-252));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4612");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-123));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-227) + "'", int16 == (-227));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test4613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4613");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-229));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-437));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-175) + "'", int9 == (-175));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-541) + "'", int13 == (-541));
    }

    @Test
    public void test4614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4614");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4615");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-467));
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4616");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-168));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-311) + "'", int13 == (-311));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-272) + "'", int16 == (-272));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test4617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4617");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-521));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-625) + "'", int13 == (-625));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
    }

    @Test
    public void test4618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4618");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-477) + "'", int16 == (-477));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-104) + "'", int18 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4619");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-420));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4620");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-232) + "'", int12 == (-232));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-61) + "'", int14 == (-61));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-404) + "'", int16 == (-404));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4621");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test4622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4622");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-311) + "'", int15 == (-311));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test4623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4623");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-311) + "'", int11 == (-311));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-417) + "'", int14 == (-417));
    }

    @Test
    public void test4624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4624");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-603));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-899));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4625");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-685));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test4626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4626");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-271));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (int) (short) 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-335) + "'", int8 == (-335));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-64) + "'", int11 == (-64));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-54) + "'", int13 == (-54));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 43 + "'", int16 == 43);
    }

    @Test
    public void test4627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4627");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-52));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-725));
        java.lang.Class<?> wildcardClass22 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-477) + "'", int13 == (-477));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-156) + "'", int19 == (-156));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-829) + "'", int21 == (-829));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test4628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4628");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-155));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4629");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-105));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-209) + "'", int15 == (-209));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test4630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4630");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-27));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-380));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-939));
        java.lang.Class<?> wildcardClass24 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-131) + "'", int19 == (-131));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-484) + "'", int21 == (-484));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1043) + "'", int23 == (-1043));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test4631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4631");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4632");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4633");
        int[] intArray5 = new int[] { (-312), (-54), (-157), (-621), (-175) };
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-24));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-1356));
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-312, -54, -157, -621, -175]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 84 + "'", int7 == 84);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1248) + "'", int9 == (-1248));
    }

    @Test
    public void test4634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4634");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-311));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-415) + "'", int16 == (-415));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test4635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4635");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4636");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-293));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-54));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test4637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4637");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-647));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-375));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test4638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4638");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-581) + "'", int17 == (-581));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-313) + "'", int19 == (-313));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test4639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4639");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (short) 1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) ' ');
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-561));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-19) + "'", int10 == (-19));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-581) + "'", int18 == (-581));
    }

    @Test
    public void test4640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4640");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-109));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 10);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-213) + "'", int19 == (-213));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-94) + "'", int21 == (-94));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
    }

    @Test
    public void test4641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4641");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-291));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-968));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-395) + "'", int17 == (-395));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1072) + "'", int21 == (-1072));
    }

    @Test
    public void test4642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4642");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-24) + "'", int10 == (-24));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
    }

    @Test
    public void test4643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4643");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-165));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4644");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        java.lang.Class<?> wildcardClass10 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test4645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4645");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-64));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-51) + "'", int14 == (-51));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-168) + "'", int17 == (-168));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-104) + "'", int20 == (-104));
    }

    @Test
    public void test4646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4646");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-417));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1225));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-521) + "'", int11 == (-521));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1329) + "'", int15 == (-1329));
    }

    @Test
    public void test4647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4647");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4648");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test4649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4649");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-51) + "'", int15 == (-51));
    }

    @Test
    public void test4650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4650");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-373) + "'", int12 == (-373));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4651");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-653));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-757) + "'", int17 == (-757));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test4652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4652");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-105));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        java.lang.Class<?> wildcardClass16 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-169) + "'", int13 == (-169));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4653");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-167));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-175));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1351));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-988));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4654");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1455));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4655");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-148));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1248));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4656");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) '#');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-20));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-336));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-40) + "'", int9 == (-40));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-356) + "'", int12 == (-356));
    }

    @Test
    public void test4657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4657");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-415));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-167) + "'", int9 == (-167));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-519) + "'", int13 == (-519));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test4658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4658");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-968));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1072) + "'", int17 == (-1072));
    }

    @Test
    public void test4659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4659");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-156));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 12);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-117));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test4660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4660");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 10);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4661");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-551));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-655) + "'", int16 == (-655));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test4662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4662");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-148));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4663");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-176));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test4664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4664");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-131));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1103));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-103) + "'", int13 == (-103));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-235) + "'", int15 == (-235));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-4) + "'", int17 == (-4));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1207) + "'", int19 == (-1207));
    }

    @Test
    public void test4665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4665");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-685));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-94) + "'", int19 == (-94));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-789) + "'", int22 == (-789));
    }

    @Test
    public void test4666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4666");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-4) + "'", int18 == (-4));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4667");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-61));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4668");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (short) 1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-957));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-282));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-19) + "'", int10 == (-19));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-977) + "'", int13 == (-977));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-302) + "'", int16 == (-302));
    }

    @Test
    public void test4669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4669");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4670");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-218));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4671");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-523));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-627) + "'", int11 == (-627));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test4672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4672");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-279));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-420) + "'", int13 == (-420));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-383) + "'", int15 == (-383));
    }

    @Test
    public void test4673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4673");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-271));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-541));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4674");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-157));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-311));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-137));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4675");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-309));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-416) + "'", int17 == (-416));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-413) + "'", int20 == (-413));
    }

    @Test
    public void test4676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4676");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-193));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4677");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-312));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4678");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-519));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-623) + "'", int14 == (-623));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4679");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-279));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-933));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-383) + "'", int11 == (-383));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1037) + "'", int13 == (-1037));
    }

    @Test
    public void test4680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4680");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 12);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-175) + "'", int8 == (-175));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-92) + "'", int10 == (-92));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4681");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-603));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-707) + "'", int12 == (-707));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test4682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4682");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4683");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-635));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-739) + "'", int18 == (-739));
    }

    @Test
    public void test4684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4684");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-94) + "'", int13 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4685");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-232) + "'", int15 == (-232));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-356) + "'", int17 == (-356));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test4686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4686");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-299));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-403) + "'", int16 == (-403));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test4687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4687");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-727));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4688");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-155));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-601));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-612));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-259) + "'", int15 == (-259));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-705) + "'", int19 == (-705));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-716) + "'", int22 == (-716));
    }

    @Test
    public void test4689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4689");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-5));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-291));
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int27 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int29 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-109) + "'", int21 == (-109));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-395) + "'", int23 == (-395));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-104) + "'", int25 == (-104));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 51 + "'", int26 == 51);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 51 + "'", int27 == 51);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-581) + "'", int29 == (-581));
    }

    @Test
    public void test4690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4690");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-335));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4691");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-11));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4692");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-603));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-40));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-707) + "'", int13 == (-707));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-144) + "'", int16 == (-144));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test4693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4693");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 43);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4694");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-27) + "'", int12 == (-27));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test4695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4695");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-24) + "'", int10 == (-24));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4696");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-685));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-195));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-385));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4697");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4698");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int27 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int28 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-105) + "'", int17 == (-105));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-229) + "'", int19 == (-229));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-104) + "'", int23 == (-104));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-104) + "'", int25 == (-104));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-104) + "'", int27 == (-104));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
    }

    @Test
    public void test4699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4699");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-313) + "'", int13 == (-313));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4700");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-213));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-299));
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4701");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-195));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-299) + "'", int15 == (-299));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test4702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4702");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-543) + "'", int11 == (-543));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test4703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4703");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1499));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-167) + "'", int9 == (-167));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-52) + "'", int11 == (-52));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1603) + "'", int14 == (-1603));
    }

    @Test
    public void test4704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4704");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-299));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-403) + "'", int10 == (-403));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
    }

    @Test
    public void test4705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4705");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass10 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test4706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4706");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-356));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-417));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-158));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-232) + "'", int12 == (-232));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-61) + "'", int14 == (-61));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-460) + "'", int16 == (-460));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-521) + "'", int19 == (-521));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-262) + "'", int21 == (-262));
    }

    @Test
    public void test4707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4707");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4708");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-68));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-172) + "'", int15 == (-172));
    }

    @Test
    public void test4709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4709");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-157) + "'", int12 == (-157));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-104) + "'", int16 == (-104));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test4710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4710");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test4711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4711");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-893));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-997) + "'", int13 == (-997));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test4712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4712");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-167));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-233));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4713");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-729));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-833) + "'", int15 == (-833));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4714");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-124));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-695));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test4715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4715");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-364));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test4716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4716");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test4717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4717");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4718");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-157));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-261) + "'", int15 == (-261));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test4719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4719");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-212));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1291));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4720");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-919));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test4721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4721");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-52));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-156) + "'", int9 == (-156));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-128) + "'", int11 == (-128));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4722");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-109));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 10);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-213) + "'", int19 == (-213));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-94) + "'", int21 == (-94));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-187) + "'", int24 == (-187));
    }

    @Test
    public void test4723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4723");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-364));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-644));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1331));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4724");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-423));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-148) + "'", int16 == (-148));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-527) + "'", int20 == (-527));
    }

    @Test
    public void test4725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4725");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-114));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test4726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4726");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-543));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-439));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-299));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test4727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4727");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-41));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-167) + "'", int11 == (-167));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-145) + "'", int14 == (-145));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-356) + "'", int16 == (-356));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-125) + "'", int18 == (-125));
    }

    @Test
    public void test4728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4728");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-167));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-233));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4729");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-499));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-27) + "'", int16 == (-27));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-519) + "'", int20 == (-519));
    }

    @Test
    public void test4730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4730");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-229) + "'", int12 == (-229));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4731");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-645));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-175) + "'", int15 == (-175));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-749) + "'", int18 == (-749));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-373) + "'", int21 == (-373));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
    }

    @Test
    public void test4732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4732");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-416) + "'", int14 == (-416));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4733");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4734");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-109));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass22 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-213) + "'", int19 == (-213));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test4735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4735");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-507));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 12);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-157) + "'", int12 == (-157));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-611) + "'", int16 == (-611));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-92) + "'", int18 == (-92));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4736");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-64));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-401));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-51) + "'", int14 == (-51));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-168) + "'", int17 == (-168));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-505) + "'", int20 == (-505));
    }

    @Test
    public void test4737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4737");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-260));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-601));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-364) + "'", int14 == (-364));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-705) + "'", int16 == (-705));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-125) + "'", int18 == (-125));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
    }

    @Test
    public void test4738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4738");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-727));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-815));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4739");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-309));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-355));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4740");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-193));
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-503));
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-297) + "'", int22 == (-297));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-607) + "'", int24 == (-607));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
    }

    @Test
    public void test4741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4741");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1479));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-751) + "'", int14 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-503) + "'", int16 == (-503));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1583) + "'", int18 == (-1583));
    }

    @Test
    public void test4742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4742");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-919));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-687));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1245));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1023) + "'", int12 == (-1023));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-791) + "'", int14 == (-791));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1349) + "'", int16 == (-1349));
    }

    @Test
    public void test4743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4743");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-260));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-173));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass17 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-193) + "'", int14 == (-193));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4744");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-53));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4745");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-404) + "'", int14 == (-404));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4746");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-817));
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1101));
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-52));
        java.lang.Class<?> wildcardClass27 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-104) + "'", int19 == (-104));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-921) + "'", int22 == (-921));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1205) + "'", int24 == (-1205));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-156) + "'", int26 == (-156));
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test4747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4747");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-592));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-696) + "'", int18 == (-696));
    }

    @Test
    public void test4748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4748");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-131));
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test4749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4749");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-416) + "'", int14 == (-416));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-520) + "'", int17 == (-520));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4750");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-997));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1101) + "'", int10 == (-1101));
    }

    @Test
    public void test4751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4751");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-158));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-262) + "'", int21 == (-262));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
    }

    @Test
    public void test4752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4752");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-248));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-125) + "'", int5 == (-125));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-268) + "'", int9 == (-268));
    }

    @Test
    public void test4753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4753");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1252));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1356) + "'", int20 == (-1356));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test4754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4754");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-260));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-164));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-184) + "'", int15 == (-184));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test4755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4755");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-92));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-196) + "'", int14 == (-196));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4756");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-94) + "'", int13 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4757");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-665));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-157) + "'", int14 == (-157));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-420) + "'", int17 == (-420));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-769) + "'", int21 == (-769));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
    }

    @Test
    public void test4758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4758");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1371));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-262));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4759");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-393));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-20));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-497) + "'", int11 == (-497));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-124) + "'", int19 == (-124));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
    }

    @Test
    public void test4760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4760");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 43);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-479));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4761");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-832));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-94) + "'", int11 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-936) + "'", int13 == (-936));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4762");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4763");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-165));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-94) + "'", int13 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-269) + "'", int16 == (-269));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4764");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-104));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-341));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-208) + "'", int10 == (-208));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-416) + "'", int13 == (-416));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-445) + "'", int17 == (-445));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test4765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4765");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-417));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-521) + "'", int11 == (-521));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4766");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-172));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-105) + "'", int17 == (-105));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-229) + "'", int19 == (-229));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-276) + "'", int21 == (-276));
    }

    @Test
    public void test4767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4767");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-601));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-460));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4768");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-968));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1072) + "'", int15 == (-1072));
    }

    @Test
    public void test4769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4769");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-176));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-581) + "'", int10 == (-581));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-280) + "'", int14 == (-280));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4770");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-207) + "'", int13 == (-207));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test4771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4771");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-811));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-439) + "'", int8 == (-439));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-915) + "'", int10 == (-915));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
    }

    @Test
    public void test4772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4772");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4531));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4773");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-507));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4774");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-832));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-769));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-94) + "'", int11 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-936) + "'", int13 == (-936));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-873) + "'", int15 == (-873));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test4775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4775");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-393));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test4776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4776");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-977));
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1081) + "'", int10 == (-1081));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test4777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4777");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4778");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 43);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4779");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-168));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-711));
        java.lang.Class<?> wildcardClass21 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test4780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4780");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-260));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 36);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    }

    @Test
    public void test4781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4781");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-195));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-299) + "'", int15 == (-299));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4782");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-279) + "'", int14 == (-279));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4783");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-269));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-1148));
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-64) + "'", int14 == (-64));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1212) + "'", int17 == (-1212));
    }

    @Test
    public void test4784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4784");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-300));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4785");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1044));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4786");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-89));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-104) + "'", int17 == (-104));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-193) + "'", int19 == (-193));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test4787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4787");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-645));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-552));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-54));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-749) + "'", int14 == (-749));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-656) + "'", int16 == (-656));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-158) + "'", int20 == (-158));
    }

    @Test
    public void test4788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4788");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-551));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4789");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4790");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1148));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4791");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-603));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-732));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4792");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-521));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-93));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-625) + "'", int14 == (-625));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-197) + "'", int16 == (-197));
    }

    @Test
    public void test4793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4793");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-520) + "'", int10 == (-520));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-61) + "'", int14 == (-61));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-581) + "'", int16 == (-581));
    }

    @Test
    public void test4794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4794");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-771));
        java.lang.Class<?> wildcardClass19 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4795");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-353));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-521));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4796");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-271));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (int) (short) 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        java.lang.Class<?> wildcardClass15 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-335) + "'", int8 == (-335));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-64) + "'", int11 == (-64));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-54) + "'", int13 == (-54));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 43 + "'", int14 == 43);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4797");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-603));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-40));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-725));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-707) + "'", int13 == (-707));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-144) + "'", int16 == (-144));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-829) + "'", int18 == (-829));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
    }

    @Test
    public void test4798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4798");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-89) + "'", int15 == (-89));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-104) + "'", int20 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test4799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4799");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-936));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-131));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1040) + "'", int19 == (-1040));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-235) + "'", int22 == (-235));
    }

    @Test
    public void test4800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4800");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-115));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4801");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-603));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-549));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-800));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-707) + "'", int13 == (-707));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-653) + "'", int16 == (-653));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-904) + "'", int20 == (-904));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
    }

    @Test
    public void test4802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4802");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4803");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-815));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-423));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-919) + "'", int16 == (-919));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-527) + "'", int18 == (-527));
    }

    @Test
    public void test4804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4804");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4805");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-232) + "'", int15 == (-232));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-356) + "'", int17 == (-356));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test4806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4806");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-20));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-420));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4807");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-645));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-552));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-132));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-749) + "'", int14 == (-749));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-656) + "'", int16 == (-656));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-236) + "'", int20 == (-236));
    }

    @Test
    public void test4808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4808");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 43 + "'", int8 == 43);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
    }

    @Test
    public void test4809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4809");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test4810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4810");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-875));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4811");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-51));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-155) + "'", int16 == (-155));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test4812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4812");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-311));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-21) + "'", int5 == (-21));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-331) + "'", int10 == (-331));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test4813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4813");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-7));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-123));
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4814");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-291));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-939));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-395) + "'", int17 == (-395));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1043) + "'", int22 == (-1043));
    }

    @Test
    public void test4815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4815");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 10);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-27));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-104) + "'", int15 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-94) + "'", int20 == (-94));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-131) + "'", int23 == (-131));
    }

    @Test
    public void test4816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4816");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-52) + "'", int7 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-311) + "'", int9 == (-311));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
    }

    @Test
    public void test4817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4817");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-364));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-317));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4818");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-157));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-71));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4819");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-336));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-128) + "'", int7 == (-128));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-440) + "'", int11 == (-440));
    }

    @Test
    public void test4820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4820");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4821");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-175) + "'", int11 == (-175));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test4822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4822");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-104));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 936);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-208) + "'", int15 == (-208));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 832 + "'", int17 == 832);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test4823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4823");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1212));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1316) + "'", int12 == (-1316));
    }

    @Test
    public void test4824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4824");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1165));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4825");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-572));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-795));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4826");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        java.lang.Class<?> wildcardClass11 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test4827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4827");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-52));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1163));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-477) + "'", int13 == (-477));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-156) + "'", int19 == (-156));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1267) + "'", int21 == (-1267));
    }

    @Test
    public void test4828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4828");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-343));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4829");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-51));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-248));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-155) + "'", int16 == (-155));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-173) + "'", int19 == (-173));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-352) + "'", int21 == (-352));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
    }

    @Test
    public void test4830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4830");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1083));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-953));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1187) + "'", int17 == (-1187));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1057) + "'", int20 == (-1057));
    }

    @Test
    public void test4831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4831");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-837));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-105) + "'", int17 == (-105));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-941) + "'", int19 == (-941));
    }

    @Test
    public void test4832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4832");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-156));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-260) + "'", int15 == (-260));
    }

    @Test
    public void test4833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4833");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-187) + "'", int8 == (-187));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4834");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-520) + "'", int10 == (-520));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-103) + "'", int12 == (-103));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-52) + "'", int14 == (-52));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-104) + "'", int16 == (-104));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
    }

    @Test
    public void test4835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4835");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-209));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-259));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4836");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4837");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass25 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-27) + "'", int16 == (-27));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-20) + "'", int19 == (-20));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test4838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4838");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-156));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-136));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test4839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4839");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4840");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-61));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1165));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4841");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4531));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-4635) + "'", int17 == (-4635));
    }

    @Test
    public void test4842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4842");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-135));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-157) + "'", int12 == (-157));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-239) + "'", int15 == (-239));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4843");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-519));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-240));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-623) + "'", int14 == (-623));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-344) + "'", int17 == (-344));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test4844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4844");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4845");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-353));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4846");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test4847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4847");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-137));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4848");
        int[] intArray1 = new int[] { (-979) };
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[-979]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-979) + "'", int2 == (-979));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-979) + "'", int3 == (-979));
    }

    @Test
    public void test4849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4849");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-395));
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-499) + "'", int12 == (-499));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4850");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-487));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-311) + "'", int13 == (-311));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-591) + "'", int16 == (-591));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test4851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4851");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1072));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1176) + "'", int18 == (-1176));
    }

    @Test
    public void test4852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4852");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-291));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1163));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4853");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-341));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-855));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-445) + "'", int12 == (-445));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-959) + "'", int14 == (-959));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4854");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4855");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-487));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-311) + "'", int13 == (-311));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-591) + "'", int16 == (-591));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test4856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4856");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-167) + "'", int12 == (-167));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test4857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4857");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test4858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4858");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-524));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-279) + "'", int13 == (-279));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-751) + "'", int15 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-628) + "'", int20 == (-628));
    }

    @Test
    public void test4859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4859");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-393));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-339));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-497) + "'", int17 == (-497));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-443) + "'", int19 == (-443));
    }

    @Test
    public void test4860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4860");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-104));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-291));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-208) + "'", int13 == (-208));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-395) + "'", int16 == (-395));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4861");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-356));
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-460) + "'", int12 == (-460));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4862");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test4863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4863");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        java.lang.Class<?> wildcardClass16 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4864");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-123) + "'", int14 == (-123));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4865");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-123));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-875));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-27) + "'", int12 == (-27));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-143) + "'", int15 == (-143));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-895) + "'", int18 == (-895));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test4866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4866");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
    }

    @Test
    public void test4867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4867");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 10);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-772));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-94) + "'", int8 == (-94));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-876) + "'", int11 == (-876));
    }

    @Test
    public void test4868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4868");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-143));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-247) + "'", int15 == (-247));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4869");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-291));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-341));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test4870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4870");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-760));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-489));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-864) + "'", int15 == (-864));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-593) + "'", int17 == (-593));
    }

    @Test
    public void test4871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4871");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1349));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1453) + "'", int16 == (-1453));
    }

    @Test
    public void test4872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4872");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-957));
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-175) + "'", int11 == (-175));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1061) + "'", int13 == (-1061));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4873");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1251));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1355) + "'", int21 == (-1355));
    }

    @Test
    public void test4874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4874");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-125) + "'", int11 == (-125));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test4875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4875");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1147));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-527));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test4876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4876");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-63) + "'", int12 == (-63));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 43 + "'", int14 == 43);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 43 + "'", int15 == 43);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
    }

    @Test
    public void test4877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4877");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4878");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-919));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-341));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1023) + "'", int14 == (-1023));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-445) + "'", int17 == (-445));
    }

    @Test
    public void test4879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4879");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-302));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-439) + "'", int14 == (-439));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-4) + "'", int16 == (-4));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-406) + "'", int20 == (-406));
    }

    @Test
    public void test4880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4880");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-7));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-691));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-277));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-111) + "'", int10 == (-111));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-795) + "'", int12 == (-795));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-381) + "'", int14 == (-381));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4881");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-167) + "'", int11 == (-167));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test4882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4882");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-252));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-623));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-316) + "'", int13 == (-316));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 43 + "'", int14 == 43);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 43 + "'", int15 == 43);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-687) + "'", int17 == (-687));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 43 + "'", int18 == 43);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 43 + "'", int19 == 43);
    }

    @Test
    public void test4883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4883");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 10);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4884");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-437));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 36);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4885");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 31);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-543) + "'", int12 == (-543));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-73) + "'", int16 == (-73));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-416) + "'", int18 == (-416));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test4886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4886");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-603));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-655));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4887");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass7 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test4888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4888");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test4889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4889");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1251));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-167) + "'", int9 == (-167));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1355) + "'", int13 == (-1355));
    }

    @Test
    public void test4890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4890");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-423));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-581) + "'", int10 == (-581));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-527) + "'", int16 == (-527));
    }

    @Test
    public void test4891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4891");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-919));
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4892");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-603));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-919));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-707) + "'", int13 == (-707));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1023) + "'", int16 == (-1023));
    }

    @Test
    public void test4893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4893");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-164));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1559));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4894");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-439));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-439));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-601));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-459) + "'", int10 == (-459));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-459) + "'", int12 == (-459));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-621) + "'", int14 == (-621));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test4895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4895");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1316));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1420) + "'", int19 == (-1420));
    }

    @Test
    public void test4896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4896");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-581) + "'", int10 == (-581));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test4897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4897");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-229));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-236));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-333) + "'", int13 == (-333));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-340) + "'", int15 == (-340));
    }

    @Test
    public void test4898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4898");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
    }

    @Test
    public void test4899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4899");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-54));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-520));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-323));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-158) + "'", int11 == (-158));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-624) + "'", int14 == (-624));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-4) + "'", int16 == (-4));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-427) + "'", int18 == (-427));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test4900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4900");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-199));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4901");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-836));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-836));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-940) + "'", int13 == (-940));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-940) + "'", int15 == (-940));
    }

    @Test
    public void test4902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4902");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-551));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-655) + "'", int15 == (-655));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test4903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4903");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-716));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-820) + "'", int11 == (-820));
    }

    @Test
    public void test4904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4904");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-381));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-7));
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test4905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4905");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4906");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-364));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-417) + "'", int12 == (-417));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-468) + "'", int15 == (-468));
    }

    @Test
    public void test4907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4907");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-260));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-108) + "'", int17 == (-108));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-364) + "'", int22 == (-364));
    }

    @Test
    public void test4908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4908");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 51);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        java.lang.Class<?> wildcardClass13 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-21) + "'", int5 == (-21));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4909");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-209));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4910");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-4) + "'", int11 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
    }

    @Test
    public void test4911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4911");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-593));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4912");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-393));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-497) + "'", int11 == (-497));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4913");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-134));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-27) + "'", int16 == (-27));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-154) + "'", int22 == (-154));
    }

    @Test
    public void test4914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4914");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-93));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-167) + "'", int11 == (-167));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-103) + "'", int17 == (-103));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-197) + "'", int19 == (-197));
    }

    @Test
    public void test4915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4915");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-212));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-279));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4916");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-269));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
    }

    @Test
    public void test4917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4917");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-751) + "'", int14 == (-751));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-312) + "'", int18 == (-312));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
    }

    @Test
    public void test4918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4918");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-520));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-624));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-540) + "'", int12 == (-540));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-644) + "'", int15 == (-644));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-20) + "'", int18 == (-20));
    }

    @Test
    public void test4919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4919");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-399));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-168));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-591));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-531));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test4920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4920");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-7));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-11));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-167));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4921");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test4922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4922");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-291));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4923");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
    }

    @Test
    public void test4924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4924");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
    }

    @Test
    public void test4925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4925");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-364));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-384) + "'", int15 == (-384));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test4926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4926");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-103));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-893));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-941));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test4927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4927");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass10 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test4928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4928");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-676));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass22 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-780) + "'", int20 == (-780));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test4929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4929");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-344));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-148));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-448) + "'", int17 == (-448));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-252) + "'", int19 == (-252));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
    }

    @Test
    public void test4930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4930");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test4931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4931");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4932");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-27) + "'", int16 == (-27));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-20) + "'", int19 == (-20));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test4933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4933");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-260));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-543));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-611));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-563) + "'", int14 == (-563));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-631) + "'", int16 == (-631));
    }

    @Test
    public void test4934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4934");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-873));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4935");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-173));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-193) + "'", int11 == (-193));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test4936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4936");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test4937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4937");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) -1);
        java.lang.Class<?> wildcardClass11 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test4938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4938");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 80 + "'", int12 == 80);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test4939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4939");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-507));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4940");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-239));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-343) + "'", int15 == (-343));
    }

    @Test
    public void test4941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4941");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-291));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-401));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-791));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-395) + "'", int17 == (-395));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-505) + "'", int21 == (-505));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-895) + "'", int23 == (-895));
    }

    @Test
    public void test4942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4942");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-645));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-281));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-749) + "'", int14 == (-749));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-385) + "'", int18 == (-385));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test4943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4943");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-209));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-44));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4944");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-144));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1355));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-248) + "'", int14 == (-248));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1459) + "'", int16 == (-1459));
    }

    @Test
    public void test4945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4945");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
    }

    @Test
    public void test4946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4946");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4947");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-499));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-603) + "'", int13 == (-603));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4948");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
    }

    @Test
    public void test4949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4949");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-331));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-103) + "'", int13 == (-103));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-435) + "'", int15 == (-435));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-105) + "'", int18 == (-105));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test4950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4950");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-89) + "'", int15 == (-89));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4951");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1039));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4952");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test4953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4953");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-176));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-303));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-280) + "'", int13 == (-280));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-311) + "'", int15 == (-311));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-407) + "'", int19 == (-407));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test4954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4954");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-645));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-448));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-175) + "'", int15 == (-175));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-749) + "'", int18 == (-749));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-552) + "'", int20 == (-552));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test4955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4955");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-175) + "'", int13 == (-175));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test4956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4956");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-815));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-281));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-919) + "'", int17 == (-919));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-385) + "'", int19 == (-385));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test4957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4957");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-157) + "'", int14 == (-157));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4958");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-124));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-44));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-92));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4959");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-460));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-134));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4960");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 51);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-53) + "'", int14 == (-53));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-104) + "'", int19 == (-104));
    }

    @Test
    public void test4961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4961");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-27));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-380));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-939));
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-420));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-131) + "'", int19 == (-131));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-484) + "'", int21 == (-484));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1043) + "'", int23 == (-1043));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-524) + "'", int25 == (-524));
    }

    @Test
    public void test4962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4962");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4963");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
    }

    @Test
    public void test4964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4964");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 84);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1081));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4965");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test4966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4966");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4967");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test4968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4968");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        java.lang.Class<?> wildcardClass16 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4969");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test4970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4970");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-479));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-103));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-176));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-695));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4971");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1103));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1207) + "'", int16 == (-1207));
    }

    @Test
    public void test4972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4972");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-148) + "'", int15 == (-148));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-543) + "'", int17 == (-543));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test4973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4973");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-935));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1039) + "'", int19 == (-1039));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test4974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4974");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-7));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-543));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4975");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-401));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-505) + "'", int16 == (-505));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4976");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-479));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-124));
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-583) + "'", int10 == (-583));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-228) + "'", int12 == (-228));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4977");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1212));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1316) + "'", int13 == (-1316));
    }

    @Test
    public void test4978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4978");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4979");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-134));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-198) + "'", int10 == (-198));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
    }

    @Test
    public void test4980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4980");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-213));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-232) + "'", int15 == (-232));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-317) + "'", int17 == (-317));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4981");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-81));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4982");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-356) + "'", int15 == (-356));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4983");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-20));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test4984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4984");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-624));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1044));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-103) + "'", int14 == (-103));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-728) + "'", int16 == (-728));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1148) + "'", int18 == (-1148));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test4985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4985");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-323));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-427) + "'", int18 == (-427));
    }

    @Test
    public void test4986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4986");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-795));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-543) + "'", int11 == (-543));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-187) + "'", int13 == (-187));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-899) + "'", int15 == (-899));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test4987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4987");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4988");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test4989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4989");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-467));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4990");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-123) + "'", int17 == (-123));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test4991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4991");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-156));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass19 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4992");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-373));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1017));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test4993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4993");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-156));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4994");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-628));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-543) + "'", int11 == (-543));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-187) + "'", int13 == (-187));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-732) + "'", int15 == (-732));
    }

    @Test
    public void test4995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4995");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-63));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-789));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test4996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4996");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-185));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass16 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4997");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (short) 1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-19) + "'", int10 == (-19));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test4998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4998");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-104) + "'", int23 == (-104));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-105) + "'", int25 == (-105));
    }

    @Test
    public void test4999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4999");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-520) + "'", int13 == (-520));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test5000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test5000");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-104));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-439) + "'", int10 == (-439));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-208) + "'", int12 == (-208));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }
}


package heaps;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest11 {

    public static boolean debug = false;

    @Test
    public void test5501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5501");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        fibonacciHeap21.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(0);
        fibonacciHeap9.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        fibonacciHeap21.meld(fibonacciHeap28);
        int int31 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap28.new HeapNode(2);
        fibonacciHeap4.meld(fibonacciHeap28);
        int int35 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap40.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap47.insert(0);
        fibonacciHeap44.delete(heapNode50);
        fibonacciHeap40.delete(heapNode50);
        fibonacciHeap37.delete(heapNode50);
        int[] intArray54 = fibonacciHeap37.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap56.new HeapNode((int) (short) 1);
        fibonacciHeap37.meld(fibonacciHeap56);
        boolean boolean60 = fibonacciHeap37.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap62.findMin();
        int int65 = fibonacciHeap62.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap66.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap66.new HeapNode((int) (short) 100);
        boolean boolean71 = fibonacciHeap66.empty();
        fibonacciHeap62.meld(fibonacciHeap66);
        boolean boolean73 = fibonacciHeap66.empty();
        int int74 = fibonacciHeap66.size();
        fibonacciHeap37.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap37.findMin();
        fibonacciHeap28.delete(heapNode76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap28.insert(5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(heapNode76);
        org.junit.Assert.assertNotNull(heapNode79);
    }

    @Test
    public void test5502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5502");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        heapNode27.key = (short) 1;
        int int31 = heapNode27.key;
        fibonacciHeap1.delete(heapNode27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap1.insert((int) (short) 1);
        boolean boolean35 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap1.new HeapNode(97);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test5503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5503");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(1);
        boolean boolean11 = fibonacciHeap4.empty();
        int int12 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap19.new HeapNode((int) (short) 10);
        int int30 = fibonacciHeap19.size();
        boolean boolean31 = fibonacciHeap19.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        fibonacciHeap36.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap36.new HeapNode((int) (short) 10);
        fibonacciHeap19.delete(heapNode46);
        fibonacciHeap4.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap19.findMin();
        int int50 = heapNode49.getKey();
        int int51 = heapNode49.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test5504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5504");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        boolean boolean34 = fibonacciHeap31.empty();
        fibonacciHeap31.deleteMin();
        int int36 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap38.findMin();
        fibonacciHeap31.meld(fibonacciHeap38);
        fibonacciHeap1.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap31.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(heapNode42);
    }

    @Test
    public void test5505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5505");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap0.new HeapNode((int) 'a');
        int int26 = heapNode25.key;
        int int27 = heapNode25.getKey();
        int int28 = heapNode25.key;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
    }

    @Test
    public void test5506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5506");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        boolean boolean7 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap4.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap4.new HeapNode((int) '#');
        int[] intArray12 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.insert((int) '4');
        fibonacciHeap1.meld(fibonacciHeap4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode14);
    }

    @Test
    public void test5507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5507");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray21 = fibonacciHeap20.countersRep();
        fibonacciHeap20.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode((int) 'a');
        int[] intArray26 = fibonacciHeap20.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
    }

    @Test
    public void test5508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5508");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.insert(4);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        int int42 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap47.insert(0);
        fibonacciHeap44.delete(heapNode50);
        heapNode50.key = (short) 1;
        int int54 = heapNode50.key;
        fibonacciHeap24.delete(heapNode50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap24.insert((int) (short) 1);
        boolean boolean58 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap61.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap61.new HeapNode(10);
        fibonacciHeap61.deleteMin();
        int int67 = fibonacciHeap61.size();
        fibonacciHeap61.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap24.new HeapNode((int) (short) 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test5509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5509");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        int int20 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap34.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap34.findMin();
        fibonacciHeap15.meld(fibonacciHeap34);
        fibonacciHeap1.meld(fibonacciHeap34);
        int[] intArray44 = fibonacciHeap34.countersRep();
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap34.insert(0);
        int int48 = fibonacciHeap34.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(heapNode41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test5510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5510");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        fibonacciHeap28.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap28.new HeapNode(0);
        fibonacciHeap16.meld(fibonacciHeap28);
        int[] intArray34 = fibonacciHeap16.countersRep();
        fibonacciHeap12.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap16.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap39.meld(fibonacciHeap51);
        int[] intArray57 = fibonacciHeap51.countersRep();
        int int58 = fibonacciHeap51.size();
        int int59 = fibonacciHeap51.size();
        fibonacciHeap16.meld(fibonacciHeap51);
        int int61 = fibonacciHeap51.potential();
        boolean boolean62 = fibonacciHeap51.empty();
        fibonacciHeap51.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap1.insert((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap1.insert((int) ' ');
        int int69 = heapNode68.key;
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 32 + "'", int69 == 32);
    }

    @Test
    public void test5511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5511");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.insert((-1));
        int int24 = fibonacciHeap1.size();
        int int25 = fibonacciHeap1.size();
        boolean boolean26 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap28.new HeapNode((int) (short) 0);
        int int35 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap40.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap47.insert(0);
        fibonacciHeap44.delete(heapNode50);
        fibonacciHeap40.delete(heapNode50);
        fibonacciHeap37.delete(heapNode50);
        fibonacciHeap28.delete(heapNode50);
        int[] intArray55 = fibonacciHeap28.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap28.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap28.new HeapNode((int) (short) -1);
        fibonacciHeap1.delete(heapNode59);
        int[] intArray61 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap1.insert(9);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1]");
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 1]");
        org.junit.Assert.assertNotNull(heapNode63);
    }

    @Test
    public void test5512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5512");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        int[] intArray27 = fibonacciHeap4.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 1, 1]");
    }

    @Test
    public void test5513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5513");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        boolean boolean23 = fibonacciHeap17.empty();
        fibonacciHeap1.meld(fibonacciHeap17);
        int[] intArray25 = fibonacciHeap1.countersRep();
        int int26 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test5514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5514");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int[] intArray6 = fibonacciHeap1.countersRep();
        int int7 = fibonacciHeap1.potential();
        int int8 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test5515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5515");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        int int7 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode((int) (short) 0);
        int int11 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test5516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5516");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap4.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.insert(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.insert(7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(heapNode16);
    }

    @Test
    public void test5517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5517");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int[] intArray9 = fibonacciHeap1.countersRep();
        int int10 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode(10);
        int int13 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap15.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap15.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        int[] intArray21 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap15.delete(heapNode23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap26.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap33.insert(0);
        fibonacciHeap30.delete(heapNode36);
        fibonacciHeap26.delete(heapNode36);
        boolean boolean39 = fibonacciHeap26.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap26.insert(3);
        boolean boolean42 = fibonacciHeap26.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap26.insert((int) (short) 1);
        int[] intArray45 = fibonacciHeap26.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap26.findMin();
        fibonacciHeap15.meld(fibonacciHeap26);
        fibonacciHeap1.meld(fibonacciHeap26);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1]");
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode46);
    }

    @Test
    public void test5518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5518");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        int int11 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap6.new HeapNode(7);
        fibonacciHeap1.meld(fibonacciHeap6);
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap6.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test5519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5519");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap15.insert(0);
        fibonacciHeap12.delete(heapNode18);
        fibonacciHeap8.delete(heapNode18);
        boolean boolean21 = fibonacciHeap8.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        fibonacciHeap8.meld(fibonacciHeap23);
        int int26 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap8.insert((int) (byte) 100);
        int int29 = heapNode28.key;
        int int30 = heapNode28.getKey();
        int int31 = heapNode28.getKey();
        heapNode28.key = (short) 10;
        fibonacciHeap1.delete(heapNode28);
        int int35 = fibonacciHeap1.size();
        boolean boolean36 = fibonacciHeap1.empty();
        int[] intArray37 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 1]");
    }

    @Test
    public void test5520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5520");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap10.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode(10);
        fibonacciHeap10.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap17.new HeapNode((int) (short) 0);
        heapNode23.key = (byte) 100;
        heapNode23.key = (-1);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap10.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        int[] intArray34 = fibonacciHeap32.countersRep();
        int int35 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap32.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap32.new HeapNode(10);
        fibonacciHeap10.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap10.new HeapNode(0);
        int int43 = heapNode42.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test5521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5521");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        int[] intArray7 = fibonacciHeap1.countersRep();
        int int8 = fibonacciHeap1.size();
        int[] intArray9 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        fibonacciHeap1.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap14.new HeapNode((int) (short) 0);
        int int21 = fibonacciHeap14.size();
        fibonacciHeap14.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap14.insert((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap1.new HeapNode((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(heapNode24);
    }

    @Test
    public void test5522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5522");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        int[] intArray22 = fibonacciHeap1.countersRep();
        int int23 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap1.new HeapNode(3);
        heapNode25.key = 7;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test5523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5523");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNull(heapNode24);
    }

    @Test
    public void test5524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5524");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        fibonacciHeap23.deleteMin();
        int[] intArray26 = fibonacciHeap23.countersRep();
        int int27 = fibonacciHeap23.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap23.new HeapNode(0);
        int int30 = fibonacciHeap23.potential();
        int int31 = fibonacciHeap23.potential();
        int int32 = fibonacciHeap23.size();
        fibonacciHeap16.meld(fibonacciHeap23);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test5525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5525");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray9 = fibonacciHeap8.countersRep();
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        fibonacciHeap24.meld(fibonacciHeap31);
        int int34 = fibonacciHeap31.size();
        fibonacciHeap1.meld(fibonacciHeap31);
        int int36 = fibonacciHeap31.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap31.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
    }

    @Test
    public void test5526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5526");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.new HeapNode((int) '#');
        int int12 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap26.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.delete(heapNode38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap14.findMin();
        fibonacciHeap7.delete(heapNode40);
        boolean boolean42 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap7.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap7.findMin();
        fibonacciHeap7.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(heapNode45);
    }

    @Test
    public void test5527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5527");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        boolean boolean31 = fibonacciHeap22.empty();
        fibonacciHeap22.deleteMin();
        boolean boolean33 = fibonacciHeap22.empty();
        int[] intArray34 = fibonacciHeap22.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
    }

    @Test
    public void test5528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5528");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        int int26 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        boolean boolean29 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap24.insert(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap24.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertNotNull(heapNode32);
    }

    @Test
    public void test5529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5529");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap3.insert(0);
        fibonacciHeap3.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap12.new HeapNode((int) (short) 10);
        fibonacciHeap3.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap12.new HeapNode(35);
        fibonacciHeap1.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap12.new HeapNode((int) ' ');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test5530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5530");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.new HeapNode((int) '#');
        int int12 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap26.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.delete(heapNode38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap14.findMin();
        fibonacciHeap7.delete(heapNode40);
        boolean boolean42 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap7.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap7.findMin();
        int[] intArray46 = fibonacciHeap7.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(heapNode45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
    }

    @Test
    public void test5531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5531");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        fibonacciHeap14.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap14.new HeapNode(0);
        int int19 = fibonacciHeap14.size();
        int int20 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap14.new HeapNode((int) '4');
        heapNode22.key = 0;
        fibonacciHeap7.delete(heapNode22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap7.insert((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test5532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5532");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int33 = fibonacciHeap32.potential();
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap36.insert(1);
        boolean boolean39 = fibonacciHeap36.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap41.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap48.insert(0);
        fibonacciHeap45.delete(heapNode51);
        fibonacciHeap41.delete(heapNode51);
        fibonacciHeap36.delete(heapNode51);
        int int55 = fibonacciHeap36.size();
        boolean boolean56 = fibonacciHeap36.empty();
        int int57 = fibonacciHeap36.potential();
        fibonacciHeap32.meld(fibonacciHeap36);
        fibonacciHeap22.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap22.new HeapNode(8);
        heapNode61.key = (byte) 1;
        int int64 = heapNode61.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test5533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5533");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        int int3 = fibonacciHeap1.size();
        int int4 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test5534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5534");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.insert(32);
        int[] intArray26 = fibonacciHeap20.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[2, 0]");
    }

    @Test
    public void test5535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5535");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap0.new HeapNode((int) (short) 100);
        int int5 = fibonacciHeap0.size();
        int[] intArray6 = fibonacciHeap0.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap0.new HeapNode((int) (short) -1);
        heapNode8.key = (byte) 10;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
    }

    @Test
    public void test5536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5536");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap4.new HeapNode(5);
        int int52 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(heapNode53);
    }

    @Test
    public void test5537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5537");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap33.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap33.new HeapNode(0);
        fibonacciHeap24.delete(heapNode45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap24.insert((int) ' ');
        heapNode48.key = 4;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode48);
    }

    @Test
    public void test5538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5538");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap6.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap6.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        boolean boolean46 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap39.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap50.findMin();
        int int52 = heapNode51.key;
        fibonacciHeap39.delete(heapNode51);
        fibonacciHeap6.delete(heapNode51);
        fibonacciHeap1.meld(fibonacciHeap6);
        int int56 = fibonacciHeap1.size();
        int int57 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap1.findMin();
        int[] intArray59 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 0]");
    }

    @Test
    public void test5539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5539");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.potential();
        int[] intArray12 = fibonacciHeap4.countersRep();
        boolean boolean13 = fibonacciHeap4.empty();
        int int14 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(heapNode16);
    }

    @Test
    public void test5540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5540");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(3);
        int[] intArray2 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap4.deleteMin();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        int int13 = fibonacciHeap8.size();
        fibonacciHeap4.meld(fibonacciHeap8);
        int[] intArray15 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap16.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode((int) (short) 100);
        fibonacciHeap4.delete(heapNode20);
        heapNode20.key = 5;
        fibonacciHeap1.delete(heapNode20);
        int int25 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test5541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5541");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap13.insert(0);
        fibonacciHeap10.delete(heapNode16);
        heapNode16.key = (short) 1;
        int int20 = heapNode16.getKey();
        heapNode16.key = 0;
        fibonacciHeap1.delete(heapNode16);
        boolean boolean24 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test5542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5542");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.size();
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap27.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap27.insert(9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap27.findMin();
        fibonacciHeap20.meld(fibonacciHeap27);
        int int36 = fibonacciHeap27.potential();
        int int37 = fibonacciHeap27.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test5543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5543");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        fibonacciHeap1.deleteMin();
        int[] intArray22 = fibonacciHeap1.countersRep();
        int int23 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.findMin();
        int int25 = heapNode24.getKey();
        int int26 = heapNode24.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test5544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5544");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        boolean boolean12 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        int[] intArray20 = fibonacciHeap17.countersRep();
        int int21 = fibonacciHeap17.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap17.new HeapNode(0);
        int int24 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap17.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap17.findMin();
        int int28 = heapNode27.getKey();
        heapNode27.key = 9;
        heapNode27.key = (short) -1;
        fibonacciHeap1.delete(heapNode27);
        heapNode27.key = 35;
        int int36 = heapNode27.key;
        int int37 = heapNode27.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
    }

    @Test
    public void test5545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5545");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        int[] intArray34 = fibonacciHeap24.countersRep();
        fibonacciHeap4.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.findMin();
        fibonacciHeap37.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap37);
        int[] intArray42 = fibonacciHeap37.countersRep();
        int int43 = fibonacciHeap37.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap48.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap55.insert(0);
        fibonacciHeap52.delete(heapNode58);
        fibonacciHeap48.delete(heapNode58);
        fibonacciHeap45.delete(heapNode58);
        int[] intArray62 = fibonacciHeap45.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap64.new HeapNode((int) (short) 1);
        fibonacciHeap45.meld(fibonacciHeap64);
        fibonacciHeap37.meld(fibonacciHeap64);
        boolean boolean69 = fibonacciHeap64.empty();
        int[] intArray70 = fibonacciHeap64.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1]");
    }

    @Test
    public void test5546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5546");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap11.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap11.findMin();
        int[] intArray14 = fibonacciHeap11.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap11.insert((int) '4');
        fibonacciHeap11.deleteMin();
        int int18 = fibonacciHeap11.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap24.delete(heapNode30);
        fibonacciHeap20.delete(heapNode30);
        boolean boolean33 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        fibonacciHeap20.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap39.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        fibonacciHeap51.meld(fibonacciHeap58);
        fibonacciHeap20.meld(fibonacciHeap58);
        boolean boolean62 = fibonacciHeap20.empty();
        fibonacciHeap11.meld(fibonacciHeap20);
        fibonacciHeap1.meld(fibonacciHeap11);
        java.lang.Class<?> wildcardClass65 = fibonacciHeap1.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test5547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5547");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.new HeapNode(32);
        fibonacciHeap7.delete(heapNode33);
        boolean boolean35 = fibonacciHeap7.empty();
        fibonacciHeap7.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap7.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap7.insert(9);
        boolean boolean41 = fibonacciHeap7.empty();
        boolean boolean42 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap7.new HeapNode((-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(heapNode31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test5548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5548");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) ' ');
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.new HeapNode(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(32);
        int int7 = fibonacciHeap6.size();
        fibonacciHeap1.meld(fibonacciHeap6);
        int int9 = fibonacciHeap6.potential();
        int int10 = fibonacciHeap6.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test5549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5549");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode((int) (short) 100);
        fibonacciHeap24.delete(heapNode41);
        fibonacciHeap1.meld(fibonacciHeap24);
        boolean boolean44 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test5550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5550");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode((int) (short) 100);
        fibonacciHeap4.delete(heapNode21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap25.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap25.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap25.new HeapNode(32);
        fibonacciHeap4.meld(fibonacciHeap25);
        int int39 = fibonacciHeap25.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap25.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(heapNode40);
    }

    @Test
    public void test5551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5551");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap7.findMin();
        boolean boolean11 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap7.findMin();
        boolean boolean13 = fibonacciHeap7.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test5552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5552");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(7);
        fibonacciHeap1.deleteMin();
        int int3 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test5553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5553");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap16.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        int[] intArray50 = fibonacciHeap44.countersRep();
        boolean boolean51 = fibonacciHeap44.empty();
        fibonacciHeap27.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap27.findMin();
        fibonacciHeap16.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap27.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap57.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap57.insert((int) (short) -1);
        heapNode62.key = (short) 0;
        int int65 = heapNode62.key;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap27.delete(heapNode62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test5554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5554");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int[] intArray4 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.findMin();
        int[] intArray11 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1]");
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[3, 0, 0]");
    }

    @Test
    public void test5555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5555");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        java.lang.Class<?> wildcardClass21 = fibonacciHeap13.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test5556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5556");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int int3 = fibonacciHeap1.potential();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        fibonacciHeap9.meld(fibonacciHeap21);
        fibonacciHeap1.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.new HeapNode(100);
        fibonacciHeap1.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode(0);
        fibonacciHeap38.meld(fibonacciHeap50);
        int[] intArray56 = fibonacciHeap50.countersRep();
        boolean boolean57 = fibonacciHeap50.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap50.insert((int) (byte) 100);
        int[] intArray60 = fibonacciHeap50.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap50.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap50.findMin();
        boolean boolean63 = fibonacciHeap50.empty();
        fibonacciHeap32.meld(fibonacciHeap50);
        int int65 = fibonacciHeap50.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1]");
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test5557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5557");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.size();
        fibonacciHeap20.deleteMin();
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap20.insert(5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(heapNode26);
        org.junit.Assert.assertNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode29);
    }

    @Test
    public void test5558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5558");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray9 = fibonacciHeap8.countersRep();
        fibonacciHeap1.meld(fibonacciHeap8);
        fibonacciHeap8.deleteMin();
        fibonacciHeap8.deleteMin();
        int int13 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap8.new HeapNode(9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap8.insert((int) (byte) 1);
        boolean boolean18 = fibonacciHeap8.empty();
        fibonacciHeap8.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test5559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5559");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((int) (short) 10);
        int int10 = heapNode9.getKey();
        heapNode9.key = 52;
        heapNode9.key = 7;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test5560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5560");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.new HeapNode((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.findMin();
        int int26 = fibonacciHeap13.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test5561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5561");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap24.findMin();
        int[] intArray36 = fibonacciHeap24.countersRep();
        int[] intArray37 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.findMin();
        int int42 = fibonacciHeap39.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap43.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap43.new HeapNode((int) (short) 100);
        boolean boolean48 = fibonacciHeap43.empty();
        fibonacciHeap39.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap39.findMin();
        int int51 = fibonacciHeap39.size();
        fibonacciHeap24.meld(fibonacciHeap39);
        int int53 = fibonacciHeap24.potential();
        boolean boolean54 = fibonacciHeap24.empty();
        int int55 = fibonacciHeap24.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[6, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[6, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test5562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5562");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
    }

    @Test
    public void test5563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5563");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.insert(1);
        boolean boolean11 = fibonacciHeap8.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap16.insert(0);
        fibonacciHeap13.delete(heapNode19);
        heapNode19.key = (short) 1;
        fibonacciHeap8.delete(heapNode19);
        int int24 = fibonacciHeap8.potential();
        boolean boolean25 = fibonacciHeap8.empty();
        fibonacciHeap8.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap8.insert(4);
        fibonacciHeap8.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap31.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        fibonacciHeap43.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap43.new HeapNode(0);
        fibonacciHeap31.meld(fibonacciHeap43);
        int int49 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap54.insert(0);
        fibonacciHeap51.delete(heapNode57);
        heapNode57.key = (short) 1;
        int int61 = heapNode57.key;
        fibonacciHeap31.delete(heapNode57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap31.insert((int) (short) 1);
        boolean boolean65 = fibonacciHeap31.empty();
        fibonacciHeap8.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap8.findMin();
        fibonacciHeap1.meld(fibonacciHeap8);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(heapNode67);
    }

    @Test
    public void test5564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5564");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap11.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap23.new HeapNode(0);
        fibonacciHeap11.meld(fibonacciHeap23);
        int[] intArray29 = fibonacciHeap23.countersRep();
        int int30 = fibonacciHeap23.size();
        int int31 = fibonacciHeap23.size();
        fibonacciHeap23.deleteMin();
        int[] intArray33 = fibonacciHeap23.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap23.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap23.new HeapNode(1);
        int int37 = heapNode36.key;
        fibonacciHeap1.delete(heapNode36);
        int[] intArray39 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 1]");
        org.junit.Assert.assertNotNull(heapNode40);
    }

    @Test
    public void test5565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5565");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.findMin();
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap16.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(heapNode20);
        org.junit.Assert.assertNull(heapNode22);
    }

    @Test
    public void test5566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5566");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode((int) (byte) 100);
        int[] intArray43 = fibonacciHeap38.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap38.new HeapNode(35);
        fibonacciHeap1.delete(heapNode45);
        java.lang.Class<?> wildcardClass47 = heapNode45.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test5567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5567");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap6.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap6.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        boolean boolean46 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap39.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap50.findMin();
        int int52 = heapNode51.key;
        fibonacciHeap39.delete(heapNode51);
        fibonacciHeap6.delete(heapNode51);
        fibonacciHeap1.meld(fibonacciHeap6);
        int int56 = fibonacciHeap6.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap6.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
    }

    @Test
    public void test5568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5568");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        fibonacciHeap1.deleteMin();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        int[] intArray7 = fibonacciHeap5.countersRep();
        int int8 = fibonacciHeap5.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap5.insert(0);
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap5.new HeapNode((int) (short) 10);
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        fibonacciHeap21.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap21.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap33.meld(fibonacciHeap39);
        fibonacciHeap21.meld(fibonacciHeap33);
        int int42 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap21.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap21.findMin();
        fibonacciHeap1.meld(fibonacciHeap21);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(heapNode45);
    }

    @Test
    public void test5569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5569");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        int[] intArray33 = fibonacciHeap30.countersRep();
        int int34 = fibonacciHeap30.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap24.delete(heapNode36);
        fibonacciHeap24.deleteMin();
        int int39 = fibonacciHeap24.potential();
        int[] intArray40 = fibonacciHeap24.countersRep();
        fibonacciHeap24.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
    }

    @Test
    public void test5570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5570");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        int int18 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap21.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap21.new HeapNode((int) (short) 100);
        int int30 = heapNode29.key;
        fibonacciHeap9.delete(heapNode29);
        fibonacciHeap1.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        int int34 = fibonacciHeap9.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test5571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5571");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        int int35 = fibonacciHeap24.size();
        int int36 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(10);
        int int43 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray46 = fibonacciHeap45.countersRep();
        fibonacciHeap38.meld(fibonacciHeap45);
        int int48 = fibonacciHeap45.potential();
        fibonacciHeap24.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap45.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap45.insert(100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertNotNull(heapNode52);
    }

    @Test
    public void test5572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5572");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        boolean boolean9 = fibonacciHeap1.empty();
        int[] intArray10 = fibonacciHeap1.countersRep();
        int int11 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        int int31 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        fibonacciHeap33.delete(heapNode39);
        heapNode39.key = (short) 1;
        int int43 = heapNode39.key;
        fibonacciHeap13.delete(heapNode39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap13.insert((int) (short) 1);
        boolean boolean47 = fibonacciHeap13.empty();
        fibonacciHeap1.meld(fibonacciHeap13);
        int int49 = fibonacciHeap1.size();
        boolean boolean50 = fibonacciHeap1.empty();
        boolean boolean51 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test5573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5573");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.new HeapNode((int) (short) 100);
        int int24 = heapNode23.key;
        int int25 = heapNode23.getKey();
        heapNode23.key = (byte) 10;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test5574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5574");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
    }

    @Test
    public void test5575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5575");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        java.lang.Class<?> wildcardClass13 = heapNode9.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test5576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5576");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int5 = fibonacciHeap1.potential();
        int[] intArray6 = fibonacciHeap1.countersRep();
        int int7 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        fibonacciHeap21.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(0);
        fibonacciHeap9.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int29 = fibonacciHeap28.size();
        fibonacciHeap9.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap9.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap35.insert(0);
        fibonacciHeap35.deleteMin();
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap1.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.findMin();
        int int43 = fibonacciHeap32.size();
        int[] intArray44 = fibonacciHeap32.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap32.insert(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[6, 0]");
        org.junit.Assert.assertNotNull(heapNode46);
    }

    @Test
    public void test5577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5577");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap51.insert(0);
        fibonacciHeap48.delete(heapNode54);
        fibonacciHeap44.delete(heapNode54);
        boolean boolean57 = fibonacciHeap44.empty();
        fibonacciHeap20.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap20.insert(52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap62.meld(fibonacciHeap68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int72 = fibonacciHeap71.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap74 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap71.meld(fibonacciHeap74);
        fibonacciHeap74.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap74.new HeapNode(0);
        fibonacciHeap62.meld(fibonacciHeap74);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap81 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int82 = fibonacciHeap81.size();
        fibonacciHeap74.meld(fibonacciHeap81);
        int int84 = fibonacciHeap81.size();
        boolean boolean85 = fibonacciHeap81.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap81.insert((int) (byte) 10);
        fibonacciHeap20.delete(heapNode87);
        int int89 = heapNode87.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test5578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5578");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap7.insert((-1));
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        fibonacciHeap41.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode(0);
        fibonacciHeap29.meld(fibonacciHeap41);
        int[] intArray47 = fibonacciHeap41.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap41.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap41.new HeapNode(32);
        fibonacciHeap1.delete(heapNode50);
        int[] intArray52 = fibonacciHeap1.countersRep();
        int[] intArray53 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap1.insert((int) (short) 0);
        int[] intArray56 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap1.insert((int) ' ');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNull(heapNode48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 0, 1, 0]");
        org.junit.Assert.assertNotNull(heapNode58);
    }

    @Test
    public void test5579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5579");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.size();
        boolean boolean16 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        fibonacciHeap21.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap21.new HeapNode((int) (short) 10);
        fibonacciHeap4.delete(heapNode31);
        int int33 = heapNode31.getKey();
        heapNode31.key = 4;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test5580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5580");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        int[] intArray44 = fibonacciHeap26.countersRep();
        int int45 = fibonacciHeap26.potential();
        fibonacciHeap13.meld(fibonacciHeap26);
        int[] intArray47 = fibonacciHeap26.countersRep();
        int[] intArray48 = fibonacciHeap26.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[5, 0, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[5, 0, 0]");
    }

    @Test
    public void test5581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5581");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap16.insert(0);
        fibonacciHeap13.delete(heapNode19);
        fibonacciHeap9.delete(heapNode19);
        heapNode19.key = ' ';
        fibonacciHeap1.delete(heapNode19);
        int int25 = heapNode19.key;
        int int26 = heapNode19.getKey();
        int int27 = heapNode19.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test5582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5582");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        boolean boolean7 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap4.insert(97);
        int int10 = heapNode9.getKey();
        int int11 = heapNode9.key;
        int int12 = heapNode9.getKey();
        int int13 = heapNode9.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
    }

    @Test
    public void test5583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5583");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.findMin();
        boolean boolean23 = fibonacciHeap1.empty();
        int int24 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap1.new HeapNode(6);
        int int29 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
    }

    @Test
    public void test5584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5584");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int2 = fibonacciHeap1.size();
        boolean boolean3 = fibonacciHeap1.empty();
        int int4 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap6.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap6.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap6.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap6.new HeapNode(6);
        fibonacciHeap1.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap6.insert(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        fibonacciHeap36.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap36.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap36.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap50.meld(fibonacciHeap56);
        int int58 = fibonacciHeap56.potential();
        int int59 = fibonacciHeap56.size();
        boolean boolean60 = fibonacciHeap56.empty();
        int int61 = fibonacciHeap56.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap56.new HeapNode(0);
        int int64 = heapNode63.getKey();
        fibonacciHeap36.delete(heapNode63);
        int int66 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int69 = fibonacciHeap68.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap71.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int76 = fibonacciHeap75.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap78 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int79 = fibonacciHeap78.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap78.insert(0);
        fibonacciHeap75.delete(heapNode81);
        fibonacciHeap71.delete(heapNode81);
        heapNode81.key = ' ';
        int int86 = heapNode81.getKey();
        fibonacciHeap68.delete(heapNode81);
        int int88 = fibonacciHeap68.potential();
        boolean boolean89 = fibonacciHeap68.empty();
        fibonacciHeap68.deleteMin();
        fibonacciHeap36.meld(fibonacciHeap68);
        fibonacciHeap68.deleteMin();
        fibonacciHeap6.meld(fibonacciHeap68);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(heapNode81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 32 + "'", int86 == 32);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test5585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5585");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap13.potential();
        int int20 = fibonacciHeap13.size();
        fibonacciHeap13.deleteMin();
        int[] intArray22 = fibonacciHeap13.countersRep();
        int[] intArray23 = fibonacciHeap13.countersRep();
        int[] intArray24 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
    }

    @Test
    public void test5586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5586");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap16.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test5587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5587");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.size();
        int int24 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(3);
        int[] intArray27 = fibonacciHeap26.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap29.deleteMin();
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        int int38 = fibonacciHeap33.size();
        fibonacciHeap29.meld(fibonacciHeap33);
        int[] intArray40 = fibonacciHeap29.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap41.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode((int) (short) 100);
        fibonacciHeap29.delete(heapNode45);
        heapNode45.key = 5;
        fibonacciHeap26.delete(heapNode45);
        int int50 = heapNode45.key;
        fibonacciHeap20.delete(heapNode45);
        fibonacciHeap20.deleteMin();
        int int53 = fibonacciHeap20.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test5588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5588");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap1.deleteMin();
        int int32 = fibonacciHeap1.potential();
        int[] intArray33 = fibonacciHeap1.countersRep();
        int[] intArray34 = fibonacciHeap1.countersRep();
        int[] intArray35 = fibonacciHeap1.countersRep();
        int int36 = fibonacciHeap1.size();
        int int37 = fibonacciHeap1.size();
        int int38 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
    }

    @Test
    public void test5589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5589");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        boolean boolean23 = fibonacciHeap20.empty();
        int int24 = fibonacciHeap20.potential();
        int int25 = fibonacciHeap20.size();
        int int26 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap31.meld(fibonacciHeap37);
        int int40 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap31.findMin();
        int int42 = heapNode41.getKey();
        int int43 = heapNode41.getKey();
        heapNode41.key = 6;
        heapNode41.key = 0;
        heapNode41.key = 6;
        fibonacciHeap20.delete(heapNode41);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
    }

    @Test
    public void test5590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5590");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.insert((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.new HeapNode(32);
        boolean boolean14 = fibonacciHeap7.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test5591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5591");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        int int7 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode((int) (short) 0);
        int int11 = heapNode10.key;
        int int12 = heapNode10.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test5592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5592");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        int[] intArray31 = fibonacciHeap22.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap22.new HeapNode(97);
        int[] intArray34 = fibonacciHeap22.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
    }

    @Test
    public void test5593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5593");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.insert(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        fibonacciHeap41.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode(0);
        fibonacciHeap29.meld(fibonacciHeap41);
        int[] intArray47 = fibonacciHeap41.countersRep();
        boolean boolean48 = fibonacciHeap41.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap41.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap52.findMin();
        int int54 = heapNode53.key;
        fibonacciHeap41.delete(heapNode53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap57.new HeapNode((int) (short) 0);
        fibonacciHeap41.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int67 = fibonacciHeap66.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap66.findMin();
        int int69 = fibonacciHeap66.potential();
        fibonacciHeap41.meld(fibonacciHeap66);
        boolean boolean71 = fibonacciHeap66.empty();
        fibonacciHeap20.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap20.insert((int) (byte) 10);
        int[] intArray75 = fibonacciHeap20.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(heapNode74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[6, 0, 0]");
    }

    @Test
    public void test5594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5594");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap34.insert(0);
        fibonacciHeap31.delete(heapNode37);
        fibonacciHeap27.delete(heapNode37);
        boolean boolean40 = fibonacciHeap27.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        fibonacciHeap27.meld(fibonacciHeap42);
        int int45 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap27.insert((int) (byte) 100);
        fibonacciHeap20.delete(heapNode47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap20.insert((int) (short) 10);
        int int51 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray54 = fibonacciHeap53.countersRep();
        int[] intArray55 = fibonacciHeap53.countersRep();
        int int56 = fibonacciHeap53.potential();
        fibonacciHeap20.meld(fibonacciHeap53);
        fibonacciHeap20.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test5595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5595");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.new HeapNode(32);
        fibonacciHeap7.delete(heapNode33);
        int int35 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap7.findMin();
        boolean boolean37 = fibonacciHeap7.empty();
        int int38 = fibonacciHeap7.size();
        int[] intArray39 = fibonacciHeap7.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap7.insert((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(heapNode36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNull(heapNode40);
        org.junit.Assert.assertNotNull(heapNode42);
    }

    @Test
    public void test5596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5596");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.new HeapNode((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.new HeapNode((int) (byte) 1);
        int int27 = heapNode26.getKey();
        int int28 = heapNode26.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test5597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5597");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap10.new HeapNode(35);
        int int18 = fibonacciHeap10.potential();
        int int19 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        int int23 = fibonacciHeap21.potential();
        int int24 = fibonacciHeap21.potential();
        fibonacciHeap10.meld(fibonacciHeap21);
        int[] intArray26 = fibonacciHeap10.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[5, 0]");
    }

    @Test
    public void test5598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5598");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.new HeapNode((-1));
        int int22 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test5599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5599");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap29.new HeapNode(0);
        fibonacciHeap17.meld(fibonacciHeap29);
        int[] intArray35 = fibonacciHeap29.countersRep();
        boolean boolean36 = fibonacciHeap29.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap29.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap29.insert(100);
        fibonacciHeap10.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap29.new HeapNode(0);
        heapNode43.key = 0;
        int int46 = heapNode43.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test5600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5600");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        int[] intArray9 = fibonacciHeap1.countersRep();
        java.lang.Class<?> wildcardClass10 = intArray9.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test5601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5601");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        int int21 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.new HeapNode((int) (short) 10);
        java.lang.Class<?> wildcardClass24 = heapNode23.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test5602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5602");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        int[] intArray44 = fibonacciHeap26.countersRep();
        int int45 = fibonacciHeap26.potential();
        fibonacciHeap13.meld(fibonacciHeap26);
        int int47 = fibonacciHeap13.size();
        int int48 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap50.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        fibonacciHeap62.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap62.new HeapNode(0);
        fibonacciHeap50.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int70 = fibonacciHeap69.size();
        fibonacciHeap50.meld(fibonacciHeap69);
        int int72 = fibonacciHeap69.size();
        fibonacciHeap13.meld(fibonacciHeap69);
        boolean boolean74 = fibonacciHeap13.empty();
        boolean boolean75 = fibonacciHeap13.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test5603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5603");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap6.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        fibonacciHeap6.meld(fibonacciHeap18);
        int int27 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap6.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap6.findMin();
        fibonacciHeap1.meld(fibonacciHeap6);
        boolean boolean32 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap1.findMin();
        int int34 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
    }

    @Test
    public void test5604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5604");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        int int4 = heapNode3.getKey();
        int int5 = heapNode3.key;
        heapNode3.key = (byte) 10;
        heapNode3.key = 3;
        int int10 = heapNode3.key;
        heapNode3.key = 7;
        int int13 = heapNode3.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
    }

    @Test
    public void test5605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5605");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        boolean boolean8 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode((int) ' ');
        boolean boolean11 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(32);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test5606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5606");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        int[] intArray34 = fibonacciHeap24.countersRep();
        fibonacciHeap4.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap53.insert(0);
        fibonacciHeap50.delete(heapNode56);
        fibonacciHeap40.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap50.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap63.insert(1);
        int int66 = heapNode65.key;
        int int67 = heapNode65.key;
        fibonacciHeap50.delete(heapNode65);
        fibonacciHeap24.meld(fibonacciHeap50);
        int int70 = fibonacciHeap50.potential();
        int int71 = fibonacciHeap50.size();
        int[] intArray72 = fibonacciHeap50.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap50.new HeapNode((int) (short) 10);
        int int75 = fibonacciHeap50.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test5607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5607");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.findMin();
        boolean boolean23 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode(0);
        fibonacciHeap25.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap25.insert((-1));
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        boolean boolean50 = fibonacciHeap47.empty();
        int int51 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap52.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap56.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap65.meld(fibonacciHeap68);
        fibonacciHeap68.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap68.new HeapNode(0);
        fibonacciHeap56.meld(fibonacciHeap68);
        int[] intArray74 = fibonacciHeap56.countersRep();
        fibonacciHeap52.meld(fibonacciHeap56);
        fibonacciHeap47.meld(fibonacciHeap56);
        fibonacciHeap47.deleteMin();
        fibonacciHeap25.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap47.findMin();
        fibonacciHeap1.meld(fibonacciHeap47);
        int int81 = fibonacciHeap1.size();
        int int82 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap1.findMin();
        int int84 = fibonacciHeap1.potential();
        boolean boolean85 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 7 + "'", int81 == 7);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(heapNode83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test5608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5608");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(35);
        int int9 = fibonacciHeap1.size();
        int[] intArray10 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        boolean boolean15 = fibonacciHeap12.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap12.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap12.insert(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap12.new HeapNode(6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap12.findMin();
        fibonacciHeap1.delete(heapNode22);
        int int24 = fibonacciHeap1.potential();
        java.lang.Class<?> wildcardClass25 = fibonacciHeap1.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test5609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5609");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        fibonacciHeap4.deleteMin();
        int int50 = fibonacciHeap4.potential();
        boolean boolean51 = fibonacciHeap4.empty();
        boolean boolean52 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap4.new HeapNode((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertNotNull(heapNode55);
    }

    @Test
    public void test5610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5610");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        boolean boolean12 = fibonacciHeap1.empty();
        int int13 = fibonacciHeap1.potential();
        boolean boolean14 = fibonacciHeap1.empty();
        int int15 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test5611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5611");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert(4);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode9);
    }

    @Test
    public void test5612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5612");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int[] intArray43 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.findMin();
        int int45 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap50.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap50.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap62.meld(fibonacciHeap68);
        fibonacciHeap50.meld(fibonacciHeap62);
        int int71 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap50.insert(10);
        fibonacciHeap24.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap24.insert(35);
        int int77 = fibonacciHeap24.size();
        fibonacciHeap24.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertNotNull(heapNode76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
    }

    @Test
    public void test5613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5613");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode(3);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap11.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap23.new HeapNode(0);
        fibonacciHeap11.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        fibonacciHeap23.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap23.insert((int) '4');
        int int35 = heapNode34.key;
        fibonacciHeap1.delete(heapNode34);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
    }

    @Test
    public void test5614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5614");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        int[] intArray5 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        fibonacciHeap25.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap36.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        fibonacciHeap48.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode(0);
        fibonacciHeap36.meld(fibonacciHeap48);
        fibonacciHeap32.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap36.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap36.new HeapNode(7);
        fibonacciHeap9.meld(fibonacciHeap36);
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap1.insert(3);
        int int63 = fibonacciHeap1.size();
        int int64 = fibonacciHeap1.size();
        int[] intArray65 = fibonacciHeap1.countersRep();
        boolean boolean66 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 7 + "'", int64 == 7);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[8, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test5615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5615");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        fibonacciHeap4.deleteMin();
        int int29 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap4.new HeapNode((int) (short) 1);
        int[] intArray32 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap4.findMin();
        int int34 = heapNode33.getKey();
        java.lang.Class<?> wildcardClass35 = heapNode33.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 1, 1, 0]");
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test5616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5616");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert(4);
        int int10 = heapNode9.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test5617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5617");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(52);
        fibonacciHeap20.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test5618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5618");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(7);
        int int7 = heapNode6.key;
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
    }

    @Test
    public void test5619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5619");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.insert(1);
        int int26 = heapNode25.key;
        int int27 = heapNode25.key;
        fibonacciHeap17.delete(heapNode25);
        int int29 = heapNode25.key;
        int int30 = heapNode25.key;
        fibonacciHeap4.delete(heapNode25);
        heapNode25.key = 52;
        int int34 = heapNode25.key;
        java.lang.Class<?> wildcardClass35 = heapNode25.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test5620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5620");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int5 = fibonacciHeap1.potential();
        int[] intArray6 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNull(heapNode7);
    }

    @Test
    public void test5621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5621");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.new HeapNode(32);
        fibonacciHeap7.delete(heapNode33);
        int int35 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap7.findMin();
        boolean boolean37 = fibonacciHeap7.empty();
        int int38 = fibonacciHeap7.size();
        boolean boolean39 = fibonacciHeap7.empty();
        int[] intArray40 = fibonacciHeap7.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(heapNode36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
    }

    @Test
    public void test5622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5622");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int43 = fibonacciHeap42.size();
        fibonacciHeap23.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap23.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.new HeapNode(0);
        heapNode49.key = 100;
        fibonacciHeap10.delete(heapNode49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap54.new HeapNode((int) (short) 0);
        int int61 = fibonacciHeap54.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap66.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int71 = fibonacciHeap70.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int74 = fibonacciHeap73.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap73.insert(0);
        fibonacciHeap70.delete(heapNode76);
        fibonacciHeap66.delete(heapNode76);
        fibonacciHeap63.delete(heapNode76);
        fibonacciHeap54.delete(heapNode76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap54.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap54.new HeapNode(0);
        int int85 = heapNode84.key;
        fibonacciHeap10.delete(heapNode84);
        boolean boolean87 = fibonacciHeap10.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode88 = fibonacciHeap10.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(heapNode76);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(heapNode88);
    }

    @Test
    public void test5623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5623");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        int int6 = fibonacciHeap1.size();
        boolean boolean7 = fibonacciHeap1.empty();
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap12.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap12.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap22.insert(1);
        boolean boolean25 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap22.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap22.new HeapNode((int) '#');
        fibonacciHeap12.delete(heapNode29);
        fibonacciHeap1.delete(heapNode29);
        heapNode29.key = '4';
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test5624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5624");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        boolean boolean5 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test5625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5625");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        fibonacciHeap4.deleteMin();
        int int29 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.findMin();
        int int31 = heapNode30.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test5626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5626");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.new HeapNode((int) (short) 10);
        int[] intArray16 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap1.insert((int) (short) -1);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.new HeapNode((int) (short) 1);
        int[] intArray22 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
    }

    @Test
    public void test5627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5627");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        fibonacciHeap10.deleteMin();
        int[] intArray14 = fibonacciHeap10.countersRep();
        int int15 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap10.new HeapNode(2);
        boolean boolean18 = fibonacciHeap10.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap45.insert(1);
        int int48 = heapNode47.key;
        int int49 = heapNode47.key;
        fibonacciHeap39.delete(heapNode47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap52.meld(fibonacciHeap55);
        int int57 = fibonacciHeap52.size();
        fibonacciHeap39.meld(fibonacciHeap52);
        int[] intArray59 = fibonacciHeap39.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap39.insert((-1));
        int int62 = fibonacciHeap39.size();
        int int63 = fibonacciHeap39.size();
        boolean boolean64 = fibonacciHeap39.empty();
        fibonacciHeap39.deleteMin();
        int int66 = fibonacciHeap39.size();
        fibonacciHeap32.meld(fibonacciHeap39);
        fibonacciHeap10.meld(fibonacciHeap32);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test5628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5628");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(3);
        org.junit.Assert.assertNotNull(heapNode4);
    }

    @Test
    public void test5629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5629");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.insert(5);
        boolean boolean8 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        int int15 = heapNode14.key;
        int int16 = heapNode14.key;
        heapNode14.key = (-1);
        int int19 = heapNode14.getKey();
        fibonacciHeap10.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode((int) (byte) 100);
        int[] intArray36 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode(0);
        fibonacciHeap38.meld(fibonacciHeap50);
        int[] intArray56 = fibonacciHeap50.countersRep();
        boolean boolean57 = fibonacciHeap50.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap50.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap50.insert(100);
        fibonacciHeap31.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap64.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap64.new HeapNode(10);
        heapNode68.key = 100;
        int int71 = heapNode68.getKey();
        fibonacciHeap31.delete(heapNode68);
        fibonacciHeap10.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap10.new HeapNode((int) (short) -1);
        int[] intArray76 = fibonacciHeap10.countersRep();
        int[] intArray77 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap10.insert((int) (short) 0);
        fibonacciHeap10.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap10.meld(fibonacciHeap82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap.empty()\" because \"heap2\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 0]");
        org.junit.Assert.assertNotNull(heapNode79);
    }

    @Test
    public void test5630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5630");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert((int) (short) -1);
        fibonacciHeap4.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode6);
    }

    @Test
    public void test5631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5631");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(52);
        boolean boolean2 = fibonacciHeap1.empty();
        int int3 = fibonacciHeap1.potential();
        int int4 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode(52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        int int11 = heapNode10.getKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test5632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5632");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        int[] intArray7 = fibonacciHeap1.countersRep();
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode(8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test5633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5633");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap29.insert(0);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap35.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(0);
        fibonacciHeap35.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap35.insert((-1));
        fibonacciHeap29.meld(fibonacciHeap35);
        int int56 = fibonacciHeap29.potential();
        int int57 = fibonacciHeap29.size();
        int[] intArray58 = fibonacciHeap29.countersRep();
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap29.insert(1);
        fibonacciHeap13.meld(fibonacciHeap29);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[5, 0, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode61);
    }

    @Test
    public void test5634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5634");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        boolean boolean13 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap31.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        fibonacciHeap43.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap43.new HeapNode(0);
        fibonacciHeap31.meld(fibonacciHeap43);
        int[] intArray49 = fibonacciHeap31.countersRep();
        int int50 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap31.findMin();
        fibonacciHeap1.meld(fibonacciHeap31);
        int[] intArray53 = fibonacciHeap1.countersRep();
        int[] intArray54 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[7, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[7, 0, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode55);
    }

    @Test
    public void test5635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5635");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.insert(1);
        boolean boolean26 = fibonacciHeap23.empty();
        int int27 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap28.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        int[] intArray50 = fibonacciHeap32.countersRep();
        fibonacciHeap28.meld(fibonacciHeap32);
        fibonacciHeap23.meld(fibonacciHeap32);
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap1.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap1.insert((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertNotNull(heapNode59);
    }

    @Test
    public void test5636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5636");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) '#');
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap1.delete(heapNode6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode.getKey()\" because \"x\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode4);
    }

    @Test
    public void test5637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5637");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap7.insert((-1));
        fibonacciHeap1.meld(fibonacciHeap7);
        int int28 = fibonacciHeap1.potential();
        int int29 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        int[] intArray50 = fibonacciHeap32.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap32.findMin();
        heapNode51.key = 35;
        fibonacciHeap1.delete(heapNode51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap1.insert(97);
        fibonacciHeap1.deleteMin();
        boolean boolean58 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap60.findMin();
        int int62 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap60.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap60.insert(2);
        int int66 = fibonacciHeap60.potential();
        fibonacciHeap1.meld(fibonacciHeap60);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test5638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5638");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.findMin();
        int int15 = heapNode14.getKey();
        heapNode14.key = 9;
        int int18 = heapNode14.key;
        int int19 = heapNode14.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
    }

    @Test
    public void test5639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5639");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        int int34 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap36.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap52.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap52.new HeapNode(0);
        fibonacciHeap40.meld(fibonacciHeap52);
        int[] intArray58 = fibonacciHeap40.countersRep();
        fibonacciHeap36.meld(fibonacciHeap40);
        fibonacciHeap29.meld(fibonacciHeap36);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap65.insert(0);
        int int69 = heapNode68.key;
        fibonacciHeap63.delete(heapNode68);
        heapNode68.key = (short) -1;
        fibonacciHeap29.delete(heapNode68);
        int[] intArray74 = fibonacciHeap29.countersRep();
        fibonacciHeap4.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap29.insert(0);
        int int78 = fibonacciHeap29.size();
        boolean boolean79 = fibonacciHeap29.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap29.insert(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 0]");
        org.junit.Assert.assertNotNull(heapNode77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(heapNode81);
    }

    @Test
    public void test5640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5640");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        int int89 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap24.new HeapNode(97);
        fibonacciHeap24.deleteMin();
        boolean boolean94 = fibonacciHeap24.empty();
        boolean boolean95 = fibonacciHeap24.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test5641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5641");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        boolean boolean6 = fibonacciHeap1.empty();
        int int7 = fibonacciHeap1.potential();
        int int8 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test5642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5642");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        heapNode11.key = ' ';
        int int16 = heapNode11.getKey();
        heapNode11.key = 52;
        int int19 = heapNode11.getKey();
        int int20 = heapNode11.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test5643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5643");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (short) 10);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) '4');
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode6);
    }

    @Test
    public void test5644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5644");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap34.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap34.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        boolean boolean47 = fibonacciHeap44.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap44.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap44.new HeapNode((int) '#');
        fibonacciHeap34.delete(heapNode51);
        fibonacciHeap1.meld(fibonacciHeap34);
        boolean boolean54 = fibonacciHeap1.empty();
        int[] intArray55 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap1.new HeapNode(8);
        boolean boolean58 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2, 0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test5645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5645");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        boolean boolean2 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(10);
        fibonacciHeap4.deleteMin();
        int int10 = fibonacciHeap4.size();
        boolean boolean11 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        int[] intArray21 = fibonacciHeap18.countersRep();
        boolean boolean22 = fibonacciHeap18.empty();
        fibonacciHeap4.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap18.new HeapNode(10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test5646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5646");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap4.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap31.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        fibonacciHeap43.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap43.new HeapNode(0);
        fibonacciHeap31.meld(fibonacciHeap43);
        int[] intArray49 = fibonacciHeap31.countersRep();
        int int50 = fibonacciHeap31.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap55.insert(0);
        fibonacciHeap52.delete(heapNode58);
        fibonacciHeap31.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap52.new HeapNode(2);
        heapNode62.key = (byte) 10;
        int int65 = heapNode62.getKey();
        fibonacciHeap4.delete(heapNode62);
        int int67 = heapNode62.getKey();
        heapNode62.key = 1;
        heapNode62.key = 2;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test5647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5647");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        int int49 = fibonacciHeap39.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap39.insert(52);
        boolean boolean52 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap39.findMin();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(heapNode53);
    }

    @Test
    public void test5648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5648");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.insert((int) (byte) 0);
        int int27 = heapNode26.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test5649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5649");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        boolean boolean37 = fibonacciHeap13.empty();
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap13.new HeapNode((int) (byte) -1);
        int int41 = fibonacciHeap13.size();
        int[] intArray42 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1]");
    }

    @Test
    public void test5650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5650");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        int[] intArray21 = fibonacciHeap1.countersRep();
        int[] intArray22 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.new HeapNode(97);
        int int25 = heapNode24.getKey();
        heapNode24.key = (byte) 10;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
    }

    @Test
    public void test5651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5651");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) '#');
        fibonacciHeap0.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap0.findMin();
        boolean boolean5 = fibonacciHeap0.empty();
        org.junit.Assert.assertNull(heapNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test5652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5652");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        boolean boolean9 = fibonacciHeap1.empty();
        int int10 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.insert(0);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(heapNode12);
    }

    @Test
    public void test5653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5653");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.findMin();
        int[] intArray10 = fibonacciHeap7.countersRep();
        int int11 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.new HeapNode(9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap7.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap7.insert(52);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[3]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode17);
    }

    @Test
    public void test5654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5654");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap16.insert(35);
        fibonacciHeap16.deleteMin();
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap16.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test5655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5655");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.size();
        int[] intArray16 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap4.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap4.insert(0);
        heapNode20.key = 0;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertNotNull(heapNode20);
    }

    @Test
    public void test5656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5656");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap23.insert((-1));
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap23.findMin();
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(5);
        fibonacciHeap23.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        int int56 = fibonacciHeap54.potential();
        int[] intArray57 = fibonacciHeap54.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap54.insert(9);
        fibonacciHeap23.delete(heapNode59);
        int int61 = heapNode59.key;
        int int62 = heapNode59.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[2]");
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test5657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5657");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int27 = fibonacciHeap26.size();
        fibonacciHeap7.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap7.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap33.insert(0);
        fibonacciHeap33.deleteMin();
        fibonacciHeap30.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap30.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap30.findMin();
        fibonacciHeap1.delete(heapNode41);
        int[] intArray43 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap47.insert(35);
        fibonacciHeap1.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap47.new HeapNode(5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(heapNode53);
    }

    @Test
    public void test5658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5658");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        int int13 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap15.findMin();
        int int17 = fibonacciHeap15.size();
        fibonacciHeap4.meld(fibonacciHeap15);
        int[] intArray19 = fibonacciHeap4.countersRep();
        int int20 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap4.insert(7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[5, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(heapNode22);
    }

    @Test
    public void test5659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5659");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap1.deleteMin();
        int int32 = fibonacciHeap1.potential();
        int[] intArray33 = fibonacciHeap1.countersRep();
        int[] intArray34 = fibonacciHeap1.countersRep();
        int int35 = fibonacciHeap1.size();
        int[] intArray36 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap1.new HeapNode(1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 1]");
    }

    @Test
    public void test5660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5660");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        int[] intArray9 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int33 = fibonacciHeap32.size();
        fibonacciHeap13.meld(fibonacciHeap32);
        int int35 = fibonacciHeap32.size();
        fibonacciHeap32.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap32);
        int int38 = fibonacciHeap1.potential();
        int int39 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test5661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5661");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(32);
        int int11 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap15.deleteMin();
        fibonacciHeap15.deleteMin();
        fibonacciHeap15.deleteMin();
        int int19 = fibonacciHeap15.potential();
        int[] intArray20 = fibonacciHeap15.countersRep();
        int int21 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int43 = fibonacciHeap42.size();
        fibonacciHeap23.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap23.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap49.insert(0);
        fibonacciHeap49.deleteMin();
        fibonacciHeap46.meld(fibonacciHeap49);
        fibonacciHeap15.meld(fibonacciHeap46);
        fibonacciHeap4.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap4.insert((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertNotNull(heapNode58);
    }

    @Test
    public void test5662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5662");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(0);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int[] intArray15 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap17.new HeapNode((int) (short) 0);
        int int24 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap17.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap17.insert((int) (byte) 1);
        fibonacciHeap1.meld(fibonacciHeap17);
        boolean boolean30 = fibonacciHeap17.empty();
        int int31 = fibonacciHeap17.potential();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[2, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
    }

    @Test
    public void test5663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5663");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        int[] intArray12 = fibonacciHeap1.countersRep();
        int int13 = fibonacciHeap1.potential();
        int int14 = fibonacciHeap1.potential();
        int int15 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap29.new HeapNode(0);
        fibonacciHeap17.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int37 = fibonacciHeap36.size();
        fibonacciHeap17.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap17.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap43.insert(0);
        fibonacciHeap43.deleteMin();
        fibonacciHeap40.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap40.new HeapNode((int) (short) 10);
        int int51 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap40.new HeapNode((int) '#');
        fibonacciHeap1.delete(heapNode53);
        heapNode53.key = 0;
        java.lang.Class<?> wildcardClass57 = heapNode53.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test5664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5664");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        int int89 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode91 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode93 = fibonacciHeap24.insert(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode91);
        org.junit.Assert.assertNotNull(heapNode93);
    }

    @Test
    public void test5665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5665");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        int[] intArray31 = fibonacciHeap13.countersRep();
        fibonacciHeap9.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap9.insert(2);
        int int35 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap37.delete(heapNode41);
        fibonacciHeap9.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        fibonacciHeap48.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap48.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap48.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap48.new HeapNode((-1));
        fibonacciHeap9.delete(heapNode62);
        heapNode62.key = 'a';
        fibonacciHeap1.delete(heapNode62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode67);
    }

    @Test
    public void test5666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5666");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        int int7 = heapNode6.getKey();
        int int8 = heapNode6.key;
        heapNode6.key = 5;
        int int11 = heapNode6.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test5667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5667");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        int int22 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.new HeapNode((int) (short) 1);
        int[] intArray27 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap24.insert((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.insert(1);
        boolean boolean35 = fibonacciHeap32.empty();
        boolean boolean36 = fibonacciHeap32.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap32.new HeapNode(2);
        fibonacciHeap24.delete(heapNode38);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1]");
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test5668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5668");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(32);
        int int11 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.findMin();
        int int16 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap18.meld(fibonacciHeap30);
        int[] intArray36 = fibonacciHeap18.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap18.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap39.meld(fibonacciHeap51);
        int[] intArray57 = fibonacciHeap51.countersRep();
        boolean boolean58 = fibonacciHeap51.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap51.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap62.findMin();
        int int64 = heapNode63.key;
        fibonacciHeap51.delete(heapNode63);
        fibonacciHeap18.delete(heapNode63);
        fibonacciHeap13.meld(fibonacciHeap18);
        fibonacciHeap4.meld(fibonacciHeap18);
        boolean boolean69 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap4.insert((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(heapNode71);
    }

    @Test
    public void test5669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5669");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        boolean boolean6 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap22.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap22.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap22.new HeapNode(32);
        fibonacciHeap1.delete(heapNode31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int54 = fibonacciHeap53.size();
        fibonacciHeap34.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap60.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int65 = fibonacciHeap64.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap67.insert(0);
        fibonacciHeap64.delete(heapNode70);
        fibonacciHeap60.delete(heapNode70);
        fibonacciHeap57.delete(heapNode70);
        fibonacciHeap34.delete(heapNode70);
        heapNode70.key = 35;
        fibonacciHeap1.delete(heapNode70);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(heapNode70);
    }

    @Test
    public void test5670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5670");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        int int25 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap13.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap13.new HeapNode(2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode29);
    }

    @Test
    public void test5671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5671");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        heapNode27.key = (short) 1;
        int int31 = heapNode27.key;
        fibonacciHeap1.delete(heapNode27);
        int int33 = heapNode27.getKey();
        heapNode27.key = 9;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test5672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5672");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        int int49 = fibonacciHeap39.potential();
        boolean boolean50 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap39.insert(6);
        int int53 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap39.new HeapNode(35);
        int int56 = fibonacciHeap39.size();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test5673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5673");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = heapNode3.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test5674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5674");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((int) '4');
        int int10 = heapNode9.getKey();
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test5675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5675");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        boolean boolean15 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.findMin();
        int int17 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap19.insert(1);
        boolean boolean22 = fibonacciHeap19.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap24.delete(heapNode30);
        heapNode30.key = (short) 1;
        fibonacciHeap19.delete(heapNode30);
        fibonacciHeap19.deleteMin();
        int int36 = fibonacciHeap19.potential();
        fibonacciHeap1.meld(fibonacciHeap19);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test5676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5676");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        boolean boolean11 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap7.insert(100);
        int int16 = heapNode15.getKey();
        heapNode15.key = 2;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test5677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5677");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        int int33 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap35.insert(1);
        boolean boolean38 = fibonacciHeap35.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap43.insert(0);
        fibonacciHeap40.delete(heapNode46);
        heapNode46.key = (short) 1;
        fibonacciHeap35.delete(heapNode46);
        int int51 = fibonacciHeap35.potential();
        fibonacciHeap24.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        fibonacciHeap57.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap57.new HeapNode(0);
        int[] intArray62 = fibonacciHeap57.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap57.findMin();
        fibonacciHeap24.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap57.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap57.meld(fibonacciHeap66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap.empty()\" because \"heap2\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNull(heapNode63);
        org.junit.Assert.assertNull(heapNode65);
    }

    @Test
    public void test5678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5678");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        int int36 = fibonacciHeap34.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode((int) '#');
        int[] intArray39 = fibonacciHeap34.countersRep();
        fibonacciHeap1.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap42.insert(0);
        fibonacciHeap1.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap42.findMin();
        int int48 = heapNode47.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[3]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test5679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5679");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        heapNode6.key = 'a';
        int int9 = heapNode6.key;
        int int10 = heapNode6.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
    }

    @Test
    public void test5680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5680");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        int[] intArray52 = fibonacciHeap46.countersRep();
        boolean boolean53 = fibonacciHeap46.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap46.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap57.findMin();
        int int59 = heapNode58.key;
        fibonacciHeap46.delete(heapNode58);
        fibonacciHeap1.delete(heapNode58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap63.insert((int) (short) -1);
        fibonacciHeap1.delete(heapNode65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap1.insert(100);
        int int69 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap1.insert(35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertNotNull(heapNode71);
    }

    @Test
    public void test5681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5681");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap51.insert(0);
        fibonacciHeap48.delete(heapNode54);
        fibonacciHeap44.delete(heapNode54);
        boolean boolean57 = fibonacciHeap44.empty();
        fibonacciHeap20.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap20.insert(52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap62.meld(fibonacciHeap68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int72 = fibonacciHeap71.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap74 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap71.meld(fibonacciHeap74);
        fibonacciHeap74.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap74.new HeapNode(0);
        fibonacciHeap62.meld(fibonacciHeap74);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap81 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int82 = fibonacciHeap81.size();
        fibonacciHeap74.meld(fibonacciHeap81);
        int int84 = fibonacciHeap81.size();
        boolean boolean85 = fibonacciHeap81.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap81.insert((int) (byte) 10);
        fibonacciHeap20.delete(heapNode87);
        java.lang.Class<?> wildcardClass89 = heapNode87.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test5682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5682");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap25.new HeapNode((int) (short) 0);
        int int32 = fibonacciHeap25.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        fibonacciHeap37.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap43.insert((int) (short) 100);
        int int48 = fibonacciHeap43.size();
        int int49 = fibonacciHeap43.potential();
        fibonacciHeap25.meld(fibonacciHeap43);
        fibonacciHeap20.meld(fibonacciHeap43);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
    }

    @Test
    public void test5683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5683");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap33.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap33.new HeapNode(0);
        fibonacciHeap24.delete(heapNode45);
        boolean boolean47 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap24.insert(35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(heapNode49);
    }

    @Test
    public void test5684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5684");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap10);
        int int22 = fibonacciHeap10.potential();
        int[] intArray23 = fibonacciHeap10.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[5, 0]");
    }

    @Test
    public void test5685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5685");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode((int) '#');
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.new HeapNode((int) '4');
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[4, 0]");
    }

    @Test
    public void test5686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5686");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        boolean boolean7 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap4.insert(10);
        int int12 = fibonacciHeap4.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(heapNode9);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test5687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5687");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap25.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(10);
        fibonacciHeap23.delete(heapNode29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap23.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap23);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap1.new HeapNode(32);
        int int37 = heapNode36.key;
        heapNode36.key = (short) 0;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
    }

    @Test
    public void test5688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5688");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap13.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap13.findMin();
        boolean boolean33 = fibonacciHeap13.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test5689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5689");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap14.delete(heapNode20);
        fibonacciHeap4.meld(fibonacciHeap14);
        fibonacciHeap14.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap14.insert(100);
        fibonacciHeap14.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode25);
    }

    @Test
    public void test5690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5690");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        fibonacciHeap32.meld(fibonacciHeap39);
        fibonacciHeap1.meld(fibonacciHeap39);
        int int43 = fibonacciHeap39.size();
        int[] intArray44 = fibonacciHeap39.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3]");
    }

    @Test
    public void test5691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5691");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        heapNode27.key = (short) 1;
        int int31 = heapNode27.key;
        fibonacciHeap1.delete(heapNode27);
        heapNode27.key = (short) -1;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test5692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5692");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test5693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5693");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int33 = fibonacciHeap32.potential();
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap36.insert(1);
        boolean boolean39 = fibonacciHeap36.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap41.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap48.insert(0);
        fibonacciHeap45.delete(heapNode51);
        fibonacciHeap41.delete(heapNode51);
        fibonacciHeap36.delete(heapNode51);
        int int55 = fibonacciHeap36.size();
        boolean boolean56 = fibonacciHeap36.empty();
        int int57 = fibonacciHeap36.potential();
        fibonacciHeap32.meld(fibonacciHeap36);
        fibonacciHeap22.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap22.new HeapNode(8);
        boolean boolean62 = fibonacciHeap22.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test5694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5694");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        boolean boolean12 = fibonacciHeap5.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap5.new HeapNode(0);
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.insert(1);
        boolean boolean20 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        heapNode28.key = (short) 1;
        fibonacciHeap17.delete(heapNode28);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int36 = fibonacciHeap35.size();
        int int37 = fibonacciHeap35.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.insert(52);
        fibonacciHeap17.meld(fibonacciHeap35);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap43.deleteMin();
        fibonacciHeap43.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap47.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        fibonacciHeap59.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap59.new HeapNode(0);
        fibonacciHeap47.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int67 = fibonacciHeap66.size();
        fibonacciHeap47.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap47.findMin();
        fibonacciHeap43.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap47.new HeapNode((int) (byte) 0);
        int[] intArray73 = fibonacciHeap47.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap47.findMin();
        fibonacciHeap17.meld(fibonacciHeap47);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(heapNode69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode74);
    }

    @Test
    public void test5695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5695");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.potential();
        int[] intArray12 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.insert(97);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(heapNode14);
    }

    @Test
    public void test5696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5696");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(100);
        int int9 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.insert((int) (byte) 0);
        int[] intArray12 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap14.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap14);
        int int21 = fibonacciHeap14.size();
        int int22 = fibonacciHeap14.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test5697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5697");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode(0);
        fibonacciHeap1.deleteMin();
        boolean boolean5 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.insert((int) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(heapNode7);
    }

    @Test
    public void test5698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5698");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        int int15 = fibonacciHeap10.size();
        int[] intArray16 = fibonacciHeap10.countersRep();
        fibonacciHeap1.meld(fibonacciHeap10);
        boolean boolean18 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.new HeapNode(52);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test5699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5699");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int int21 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.findMin();
        heapNode23.key = 0;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(heapNode23);
    }

    @Test
    public void test5700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5700");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        int int33 = fibonacciHeap24.potential();
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap35.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode((int) (short) 100);
        int int40 = fibonacciHeap35.size();
        int[] intArray41 = fibonacciHeap35.countersRep();
        fibonacciHeap24.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.new HeapNode((int) (short) -1);
        int int45 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap24.new HeapNode((int) ' ');
        int int48 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap24.new HeapNode(8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test5701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5701");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode(0);
        fibonacciHeap25.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        fibonacciHeap37.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap48.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        fibonacciHeap60.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap60.new HeapNode(0);
        fibonacciHeap48.meld(fibonacciHeap60);
        fibonacciHeap44.meld(fibonacciHeap48);
        int[] intArray67 = fibonacciHeap48.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int70 = fibonacciHeap69.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap69.meld(fibonacciHeap72);
        fibonacciHeap72.deleteMin();
        int[] intArray75 = fibonacciHeap72.countersRep();
        int int76 = fibonacciHeap72.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap72.new HeapNode(0);
        int int79 = fibonacciHeap72.size();
        int int80 = fibonacciHeap72.size();
        fibonacciHeap48.meld(fibonacciHeap72);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap48.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap84 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap84.findMin();
        int int86 = fibonacciHeap84.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap84.findMin();
        int int88 = heapNode87.key;
        fibonacciHeap48.delete(heapNode87);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode91 = fibonacciHeap48.new HeapNode((int) (short) 1);
        fibonacciHeap20.delete(heapNode91);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(heapNode82);
        org.junit.Assert.assertNotNull(heapNode85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test5702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5702");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap0.insert(2);
        int int26 = fibonacciHeap0.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        fibonacciHeap40.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap28.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int48 = fibonacciHeap47.size();
        fibonacciHeap28.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap28.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        fibonacciHeap57.deleteMin();
        int[] intArray60 = fibonacciHeap57.countersRep();
        int int61 = fibonacciHeap57.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap57.new HeapNode(0);
        fibonacciHeap51.delete(heapNode63);
        fibonacciHeap51.deleteMin();
        int int66 = fibonacciHeap51.potential();
        int int67 = fibonacciHeap51.potential();
        fibonacciHeap0.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap0.new HeapNode(10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test5703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5703");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap34.insert(0);
        fibonacciHeap31.delete(heapNode37);
        fibonacciHeap27.delete(heapNode37);
        fibonacciHeap24.delete(heapNode37);
        fibonacciHeap1.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        int[] intArray62 = fibonacciHeap56.countersRep();
        boolean boolean63 = fibonacciHeap56.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap56.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap67.findMin();
        int int69 = heapNode68.key;
        fibonacciHeap56.delete(heapNode68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap72.meld(fibonacciHeap75);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap72.new HeapNode((int) (short) 0);
        fibonacciHeap56.meld(fibonacciHeap72);
        boolean boolean80 = fibonacciHeap56.empty();
        fibonacciHeap1.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap83 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(9);
        fibonacciHeap56.meld(fibonacciHeap83);
        int[] intArray85 = fibonacciHeap56.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap56.insert(7);
        int int88 = fibonacciHeap56.potential();
        fibonacciHeap56.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[4, 1, 0]");
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
    }

    @Test
    public void test5704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5704");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        int int4 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test5705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5705");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        boolean boolean13 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap15.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        fibonacciHeap27.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap27.new HeapNode(0);
        fibonacciHeap15.meld(fibonacciHeap27);
        int[] intArray33 = fibonacciHeap27.countersRep();
        boolean boolean34 = fibonacciHeap27.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap27.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        fibonacciHeap27.meld(fibonacciHeap38);
        int[] intArray47 = fibonacciHeap27.countersRep();
        int[] intArray48 = fibonacciHeap27.countersRep();
        fibonacciHeap1.meld(fibonacciHeap27);
        int int50 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
    }

    @Test
    public void test5706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5706");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        fibonacciHeap16.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        fibonacciHeap23.meld(fibonacciHeap27);
        int[] intArray46 = fibonacciHeap27.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap27.findMin();
        int int48 = fibonacciHeap27.potential();
        fibonacciHeap1.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        fibonacciHeap54.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap60.new HeapNode((int) (byte) 100);
        int[] intArray65 = fibonacciHeap60.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        int[] intArray85 = fibonacciHeap79.countersRep();
        boolean boolean86 = fibonacciHeap79.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode88 = fibonacciHeap79.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap79.insert(100);
        fibonacciHeap60.meld(fibonacciHeap79);
        fibonacciHeap1.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode93 = fibonacciHeap60.findMin();
        int int94 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode96 = fibonacciHeap60.new HeapNode((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(heapNode88);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
    }

    @Test
    public void test5707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5707");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        boolean boolean10 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test5708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5708");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        boolean boolean34 = fibonacciHeap31.empty();
        fibonacciHeap31.deleteMin();
        int int36 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap38.findMin();
        fibonacciHeap31.meld(fibonacciHeap38);
        fibonacciHeap1.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap31.insert((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap46.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        fibonacciHeap58.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap58.new HeapNode(0);
        fibonacciHeap46.meld(fibonacciHeap58);
        int[] intArray64 = fibonacciHeap58.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap58.findMin();
        fibonacciHeap31.meld(fibonacciHeap58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap31.insert(3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNull(heapNode65);
        org.junit.Assert.assertNotNull(heapNode68);
    }

    @Test
    public void test5709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5709");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert(8);
        int int10 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test5710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5710");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        int[] intArray44 = fibonacciHeap26.countersRep();
        int int45 = fibonacciHeap26.potential();
        fibonacciHeap13.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap13.new HeapNode((int) (short) -1);
        int int49 = fibonacciHeap13.size();
        int int50 = fibonacciHeap13.potential();
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int54 = fibonacciHeap53.potential();
        int int55 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap57.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int67 = fibonacciHeap66.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap66.meld(fibonacciHeap69);
        fibonacciHeap69.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap69.new HeapNode(0);
        fibonacciHeap57.meld(fibonacciHeap69);
        boolean boolean75 = fibonacciHeap69.empty();
        fibonacciHeap53.meld(fibonacciHeap69);
        fibonacciHeap53.deleteMin();
        fibonacciHeap13.meld(fibonacciHeap53);
        int int79 = fibonacciHeap53.size();
        fibonacciHeap53.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap53.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(heapNode81);
    }

    @Test
    public void test5711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5711");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.findMin();
        int int14 = fibonacciHeap4.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test5712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5712");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((int) (short) 100);
        int[] intArray10 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2, 0]");
    }

    @Test
    public void test5713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5713");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        boolean boolean22 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap1.insert(32);
        int int29 = heapNode28.key;
        java.lang.Class<?> wildcardClass30 = heapNode28.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(heapNode25);
        org.junit.Assert.assertNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test5714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5714");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int24 = fibonacciHeap23.size();
        fibonacciHeap4.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap30.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap37.insert(0);
        fibonacciHeap34.delete(heapNode40);
        fibonacciHeap30.delete(heapNode40);
        fibonacciHeap27.delete(heapNode40);
        fibonacciHeap4.delete(heapNode40);
        fibonacciHeap1.delete(heapNode40);
        int int46 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap1.new HeapNode(2);
        boolean boolean49 = fibonacciHeap1.empty();
        int[] intArray50 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
    }

    @Test
    public void test5715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5715");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        int[] intArray26 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.findMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap29.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap29.new HeapNode((int) (short) 100);
        boolean boolean34 = fibonacciHeap29.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.findMin();
        fibonacciHeap20.meld(fibonacciHeap29);
        int int37 = fibonacciHeap29.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNull(heapNode27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test5716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5716");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        int int33 = fibonacciHeap24.potential();
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap35.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode((int) (short) 100);
        int int40 = fibonacciHeap35.size();
        int[] intArray41 = fibonacciHeap35.countersRep();
        fibonacciHeap24.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.new HeapNode((int) (short) -1);
        int int45 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap24.insert((int) (short) 0);
        int[] intArray48 = fibonacciHeap24.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1]");
    }

    @Test
    public void test5717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5717");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.new HeapNode((int) '#');
        int int12 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap26.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.delete(heapNode38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap14.findMin();
        fibonacciHeap7.delete(heapNode40);
        boolean boolean42 = fibonacciHeap7.empty();
        int[] intArray43 = fibonacciHeap7.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap7.insert((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap47.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        fibonacciHeap59.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap59.new HeapNode(0);
        fibonacciHeap47.meld(fibonacciHeap59);
        int[] intArray65 = fibonacciHeap47.countersRep();
        int int66 = fibonacciHeap47.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int69 = fibonacciHeap68.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int72 = fibonacciHeap71.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap71.insert(0);
        fibonacciHeap68.delete(heapNode74);
        fibonacciHeap47.meld(fibonacciHeap68);
        boolean boolean77 = fibonacciHeap68.empty();
        fibonacciHeap68.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap68.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap68.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap68.findMin();
        fibonacciHeap7.meld(fibonacciHeap68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap7.findMin();
        boolean boolean85 = fibonacciHeap7.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(heapNode74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(heapNode79);
        org.junit.Assert.assertNotNull(heapNode81);
        org.junit.Assert.assertNotNull(heapNode82);
        org.junit.Assert.assertNotNull(heapNode84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test5718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5718");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        fibonacciHeap21.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(0);
        fibonacciHeap9.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int29 = fibonacciHeap28.size();
        fibonacciHeap9.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap9.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        int[] intArray41 = fibonacciHeap38.countersRep();
        int int42 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap32.delete(heapNode44);
        fibonacciHeap32.deleteMin();
        int int47 = fibonacciHeap32.potential();
        int int48 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap50.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        fibonacciHeap62.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap62.new HeapNode(0);
        fibonacciHeap50.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int70 = fibonacciHeap69.size();
        fibonacciHeap50.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap50.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap50.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap77 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int78 = fibonacciHeap77.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap80 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap77.meld(fibonacciHeap80);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap83 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap77.meld(fibonacciHeap83);
        int int85 = fibonacciHeap83.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap83.new HeapNode((int) '#');
        int[] intArray88 = fibonacciHeap83.countersRep();
        fibonacciHeap50.meld(fibonacciHeap83);
        fibonacciHeap32.meld(fibonacciHeap83);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap1.delete(heapNode92);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(heapNode75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[3]");
    }

    @Test
    public void test5719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5719");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        int[] intArray33 = fibonacciHeap30.countersRep();
        int int34 = fibonacciHeap30.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap24.delete(heapNode36);
        fibonacciHeap24.deleteMin();
        int int39 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap24.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.insert(35);
        fibonacciHeap24.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(heapNode43);
    }

    @Test
    public void test5720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5720");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert((int) (byte) 10);
        boolean boolean45 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap24.insert((int) (short) -1);
        int int48 = fibonacciHeap24.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
    }

    @Test
    public void test5721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5721");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.size();
        boolean boolean20 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap22.insert(0);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        fibonacciHeap40.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap28.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap28.insert((-1));
        fibonacciHeap22.meld(fibonacciHeap28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap51.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap1.new HeapNode((int) (short) 10);
        int int58 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 7 + "'", int58 == 7);
        org.junit.Assert.assertNotNull(heapNode59);
    }

    @Test
    public void test5722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5722");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        int[] intArray25 = fibonacciHeap19.countersRep();
        boolean boolean26 = fibonacciHeap19.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap19.insert((int) (byte) 100);
        int[] intArray29 = fibonacciHeap19.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap19.findMin();
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap19.insert(2);
        int int34 = fibonacciHeap19.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap36.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        fibonacciHeap48.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode(0);
        fibonacciHeap36.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int56 = fibonacciHeap55.size();
        fibonacciHeap36.meld(fibonacciHeap55);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap55.new HeapNode((int) (byte) 10);
        fibonacciHeap55.deleteMin();
        fibonacciHeap55.deleteMin();
        fibonacciHeap19.meld(fibonacciHeap55);
        boolean boolean63 = fibonacciHeap55.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap55.insert((int) (byte) 100);
        boolean boolean66 = fibonacciHeap55.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap55.insert((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap55);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(heapNode68);
    }

    @Test
    public void test5723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5723");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap1.new HeapNode((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test5724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5724");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (byte) 10);
        heapNode3.key = (short) 1;
        java.lang.Class<?> wildcardClass6 = heapNode3.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test5725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5725");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap23.insert((-1));
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap23.findMin();
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap51.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap60.meld(fibonacciHeap63);
        fibonacciHeap63.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap63.new HeapNode(0);
        fibonacciHeap51.meld(fibonacciHeap63);
        int[] intArray69 = fibonacciHeap51.countersRep();
        fibonacciHeap47.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap51.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap51.insert((int) ' ');
        int int75 = fibonacciHeap51.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap51.insert((int) (byte) -1);
        fibonacciHeap23.meld(fibonacciHeap51);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertNotNull(heapNode77);
    }

    @Test
    public void test5726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5726");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int2 = fibonacciHeap1.potential();
        boolean boolean3 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test5727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5727");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.new HeapNode((-1));
        int int5 = fibonacciHeap1.size();
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap8.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap8.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        fibonacciHeap33.delete(heapNode39);
        fibonacciHeap23.meld(fibonacciHeap33);
        int[] intArray42 = fibonacciHeap23.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap46.insert(1);
        int int49 = heapNode48.key;
        int int50 = heapNode48.key;
        heapNode48.key = (-1);
        int int53 = heapNode48.getKey();
        fibonacciHeap44.delete(heapNode48);
        int int55 = fibonacciHeap44.size();
        boolean boolean56 = fibonacciHeap44.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap44.findMin();
        fibonacciHeap23.meld(fibonacciHeap44);
        fibonacciHeap8.meld(fibonacciHeap44);
        boolean boolean60 = fibonacciHeap44.empty();
        fibonacciHeap1.meld(fibonacciHeap44);
        int[] intArray62 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNull(heapNode18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(heapNode57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1]");
    }

    @Test
    public void test5728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5728");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        boolean boolean31 = fibonacciHeap22.empty();
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap22.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap22.insert(32);
        int int36 = heapNode35.key;
        int int37 = heapNode35.getKey();
        heapNode35.key = 5;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(heapNode33);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
    }

    @Test
    public void test5729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5729");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        int int2 = fibonacciHeap1.size();
        boolean boolean3 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test5730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5730");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(35);
        int int9 = fibonacciHeap1.size();
        int[] intArray10 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        boolean boolean15 = fibonacciHeap12.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap12.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap12.insert(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap12.new HeapNode(6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap12.findMin();
        fibonacciHeap1.delete(heapNode22);
        int int24 = fibonacciHeap1.potential();
        boolean boolean25 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test5731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5731");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap3.insert(0);
        fibonacciHeap3.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap12.new HeapNode((int) (short) 10);
        fibonacciHeap3.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap12.new HeapNode(35);
        fibonacciHeap1.meld(fibonacciHeap12);
        int int27 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap1.insert(3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(heapNode29);
    }

    @Test
    public void test5732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5732");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        int[] intArray13 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        heapNode28.key = 2;
        int int31 = heapNode28.getKey();
        int int32 = heapNode28.key;
        heapNode28.key = (-1);
        heapNode28.key = '4';
        fibonacciHeap1.delete(heapNode28);
        int int38 = fibonacciHeap1.potential();
        int int39 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap1.insert((int) (byte) -1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(heapNode41);
    }

    @Test
    public void test5733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5733");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap16.insert(0);
        fibonacciHeap13.delete(heapNode19);
        fibonacciHeap9.delete(heapNode19);
        heapNode19.key = ' ';
        fibonacciHeap1.delete(heapNode19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.new HeapNode(0);
        int[] intArray27 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap1.new HeapNode(6);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1]");
    }

    @Test
    public void test5734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5734");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) ' ');
        int[] intArray6 = fibonacciHeap1.countersRep();
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        fibonacciHeap21.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(0);
        fibonacciHeap9.meld(fibonacciHeap21);
        int[] intArray27 = fibonacciHeap21.countersRep();
        boolean boolean28 = fibonacciHeap21.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap21.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap21.insert(100);
        int int33 = fibonacciHeap21.size();
        fibonacciHeap1.meld(fibonacciHeap21);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test5735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5735");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int5 = fibonacciHeap1.potential();
        int[] intArray6 = fibonacciHeap1.countersRep();
        int int7 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        fibonacciHeap21.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(0);
        fibonacciHeap9.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int29 = fibonacciHeap28.size();
        fibonacciHeap9.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap9.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap35.insert(0);
        fibonacciHeap35.deleteMin();
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap1.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap32.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        int int46 = fibonacciHeap45.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap45.insert(1);
        fibonacciHeap32.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap45.insert(7);
        int[] intArray52 = fibonacciHeap45.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap45.findMin();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode53);
    }

    @Test
    public void test5736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5736");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap1.insert((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        int[] intArray33 = fibonacciHeap31.countersRep();
        int int34 = fibonacciHeap31.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap31.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap31.insert(100);
        int int39 = fibonacciHeap31.size();
        fibonacciHeap1.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap42.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap42.new HeapNode(10);
        fibonacciHeap42.deleteMin();
        int int48 = fibonacciHeap42.size();
        boolean boolean49 = fibonacciHeap42.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap42.insert((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap42.insert(32);
        fibonacciHeap1.delete(heapNode53);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(heapNode53);
    }

    @Test
    public void test5737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5737");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        fibonacciHeap6.deleteMin();
        int[] intArray9 = fibonacciHeap6.countersRep();
        int int10 = fibonacciHeap6.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap6.new HeapNode(0);
        int int13 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap6.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap6.findMin();
        int int17 = heapNode16.key;
        int int18 = heapNode16.key;
        fibonacciHeap1.delete(heapNode16);
        int int20 = heapNode16.getKey();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test5738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5738");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(52);
        boolean boolean2 = fibonacciHeap1.empty();
        int int3 = fibonacciHeap1.potential();
        int int4 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        boolean boolean6 = fibonacciHeap1.empty();
        int int7 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test5739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5739");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap16.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap29.insert(0);
        fibonacciHeap26.delete(heapNode32);
        fibonacciHeap16.meld(fibonacciHeap26);
        int[] intArray35 = fibonacciHeap16.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.insert(1);
        int int42 = heapNode41.key;
        int int43 = heapNode41.key;
        heapNode41.key = (-1);
        int int46 = heapNode41.getKey();
        fibonacciHeap37.delete(heapNode41);
        int int48 = fibonacciHeap37.size();
        boolean boolean49 = fibonacciHeap37.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap37.findMin();
        fibonacciHeap16.meld(fibonacciHeap37);
        fibonacciHeap1.meld(fibonacciHeap37);
        boolean boolean53 = fibonacciHeap37.empty();
        int int54 = fibonacciHeap37.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(heapNode50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test5740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5740");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert((int) (byte) 10);
        boolean boolean45 = fibonacciHeap24.empty();
        int int46 = fibonacciHeap24.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
    }

    @Test
    public void test5741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5741");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap0.new HeapNode((int) (short) 100);
        boolean boolean5 = fibonacciHeap0.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap0.insert(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        fibonacciHeap21.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(0);
        fibonacciHeap9.meld(fibonacciHeap21);
        int[] intArray27 = fibonacciHeap9.countersRep();
        int int28 = fibonacciHeap9.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap33.insert(0);
        fibonacciHeap30.delete(heapNode36);
        fibonacciHeap9.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap30.new HeapNode(2);
        heapNode40.key = (byte) 10;
        int int43 = heapNode40.getKey();
        int int44 = heapNode40.getKey();
        fibonacciHeap0.delete(heapNode40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap0.insert(32);
        heapNode47.key = (short) 1;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(heapNode47);
    }

    @Test
    public void test5742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5742");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.new HeapNode(32);
        fibonacciHeap7.delete(heapNode33);
        int int35 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap7.insert(6);
        int int38 = heapNode37.getKey();
        int int39 = heapNode37.key;
        heapNode37.key = (byte) 0;
        int int42 = heapNode37.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test5743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5743");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        boolean boolean7 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode((int) '4');
        int int11 = heapNode10.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test5744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5744");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap13.size();
        fibonacciHeap13.deleteMin();
        int int21 = fibonacciHeap13.potential();
        int int22 = fibonacciHeap13.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test5745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5745");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        int[] intArray9 = fibonacciHeap1.countersRep();
        int int10 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.findMin();
        java.lang.Class<?> wildcardClass12 = heapNode11.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test5746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5746");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap24.insert((int) ' ');
        boolean boolean37 = fibonacciHeap24.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test5747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5747");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int int21 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.insert(3);
        int int24 = heapNode23.key;
        heapNode23.key = 7;
        java.lang.Class<?> wildcardClass27 = heapNode23.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test5748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5748");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        boolean boolean31 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap22.findMin();
        int[] intArray33 = fibonacciHeap22.countersRep();
        int int34 = fibonacciHeap22.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int37 = fibonacciHeap36.size();
        int int38 = fibonacciHeap36.potential();
        int int39 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode((int) (byte) 100);
        int[] intArray55 = fibonacciHeap50.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap50.new HeapNode(35);
        fibonacciHeap36.delete(heapNode57);
        fibonacciHeap22.meld(fibonacciHeap36);
        int int60 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap36.insert(4);
        int int63 = heapNode62.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(heapNode32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
    }

    @Test
    public void test5749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5749");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        int int4 = heapNode3.key;
        int int5 = heapNode3.key;
        heapNode3.key = (-1);
        int int8 = heapNode3.getKey();
        heapNode3.key = 2;
        heapNode3.key = (byte) 0;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test5750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5750");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap16.insert(0);
        fibonacciHeap13.delete(heapNode19);
        fibonacciHeap9.delete(heapNode19);
        heapNode19.key = ' ';
        fibonacciHeap1.delete(heapNode19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap33.insert(0);
        fibonacciHeap30.delete(heapNode36);
        heapNode36.key = (short) 1;
        int int40 = heapNode36.key;
        int int41 = heapNode36.key;
        int int42 = heapNode36.key;
        heapNode36.key = (byte) 1;
        int int45 = heapNode36.getKey();
        heapNode36.key = (short) 0;
        fibonacciHeap1.delete(heapNode36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap1.new HeapNode(8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap1.insert((int) ' ');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(heapNode52);
    }

    @Test
    public void test5751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5751");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert(8);
        int int10 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test5752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5752");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        fibonacciHeap1.delete(heapNode14);
        int[] intArray18 = fibonacciHeap1.countersRep();
        int int19 = fibonacciHeap1.size();
        int[] intArray20 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        int int22 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test5753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5753");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        int int4 = fibonacciHeap1.potential();
        int int5 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap19.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.delete(heapNode31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode(0);
        int int42 = fibonacciHeap37.size();
        fibonacciHeap37.deleteMin();
        fibonacciHeap7.meld(fibonacciHeap37);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap7.insert(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap7.insert((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(heapNode49);
    }

    @Test
    public void test5754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5754");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(32);
        int int11 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap15.deleteMin();
        fibonacciHeap15.deleteMin();
        fibonacciHeap15.deleteMin();
        int int19 = fibonacciHeap15.potential();
        int[] intArray20 = fibonacciHeap15.countersRep();
        int int21 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int43 = fibonacciHeap42.size();
        fibonacciHeap23.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap23.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap49.insert(0);
        fibonacciHeap49.deleteMin();
        fibonacciHeap46.meld(fibonacciHeap49);
        fibonacciHeap15.meld(fibonacciHeap46);
        fibonacciHeap4.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap46.insert((int) (short) 100);
        int int59 = heapNode58.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
    }

    @Test
    public void test5755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5755");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.insert(6);
        int int31 = heapNode30.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
    }

    @Test
    public void test5756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5756");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        int[] intArray6 = fibonacciHeap1.countersRep();
        int int7 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test5757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5757");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.new HeapNode((int) '#');
        int[] intArray12 = fibonacciHeap7.countersRep();
        int int13 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap7.insert(97);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[3]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
    }

    @Test
    public void test5758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5758");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        int int16 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap10.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap10.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        int int25 = fibonacciHeap24.size();
        int int26 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(97);
        int int29 = heapNode28.key;
        fibonacciHeap10.delete(heapNode28);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
    }

    @Test
    public void test5759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5759");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        boolean boolean23 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode((-1));
        int int26 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap20.new HeapNode(52);
        int int29 = heapNode28.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test5760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5760");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        fibonacciHeap9.meld(fibonacciHeap21);
        int int30 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap9.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap9.findMin();
        fibonacciHeap4.meld(fibonacciHeap9);
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap1.findMin();
        int[] intArray37 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 0, 0, 0, 0]");
    }

    @Test
    public void test5761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5761");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap7.insert((-1));
        fibonacciHeap7.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap7.findMin();
        boolean boolean29 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap7.findMin();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap1.insert((int) (byte) 100);
        heapNode33.key = 0;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode33);
    }

    @Test
    public void test5762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5762");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        boolean boolean23 = fibonacciHeap17.empty();
        fibonacciHeap1.meld(fibonacciHeap17);
        int[] intArray25 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap1.new HeapNode(52);
        int int28 = fibonacciHeap1.potential();
        int int29 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test5763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5763");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.size();
        boolean boolean20 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap22.insert(0);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        fibonacciHeap40.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap28.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap28.insert((-1));
        fibonacciHeap22.meld(fibonacciHeap28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap51.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap1.new HeapNode((int) (short) 10);
        int int58 = fibonacciHeap1.potential();
        int[] intArray59 = fibonacciHeap1.countersRep();
        int int60 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 7 + "'", int58 == 7);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
    }

    @Test
    public void test5764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5764");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.new HeapNode((int) (byte) 0);
        boolean boolean25 = fibonacciHeap13.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test5765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5765");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int int3 = fibonacciHeap1.potential();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        fibonacciHeap9.meld(fibonacciHeap21);
        fibonacciHeap1.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.new HeapNode(100);
        fibonacciHeap1.meld(fibonacciHeap32);
        int int36 = fibonacciHeap1.potential();
        boolean boolean37 = fibonacciHeap1.empty();
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap1.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test5766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5766");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        int int34 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap36.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap52.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap52.new HeapNode(0);
        fibonacciHeap40.meld(fibonacciHeap52);
        int[] intArray58 = fibonacciHeap40.countersRep();
        fibonacciHeap36.meld(fibonacciHeap40);
        fibonacciHeap29.meld(fibonacciHeap36);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap65.insert(0);
        int int69 = heapNode68.key;
        fibonacciHeap63.delete(heapNode68);
        heapNode68.key = (short) -1;
        fibonacciHeap29.delete(heapNode68);
        int[] intArray74 = fibonacciHeap29.countersRep();
        fibonacciHeap4.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap29.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode80 = fibonacciHeap29.new HeapNode(1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 0]");
        org.junit.Assert.assertNotNull(heapNode77);
        org.junit.Assert.assertNotNull(heapNode78);
    }

    @Test
    public void test5767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5767");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test5768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5768");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert(5);
        int int11 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(10);
        fibonacciHeap13.deleteMin();
        int int19 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap13.insert(35);
        fibonacciHeap1.meld(fibonacciHeap13);
        java.lang.Class<?> wildcardClass23 = fibonacciHeap13.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test5769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5769");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.insert((-1));
        fibonacciHeap1.delete(heapNode43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.findMin();
        int[] intArray46 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap48.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap48.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap48.insert(7);
        fibonacciHeap1.delete(heapNode53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap1.findMin();
        int int56 = heapNode55.getKey();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 1]");
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test5770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5770");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap7.insert((-1));
        fibonacciHeap1.meld(fibonacciHeap7);
        int int28 = fibonacciHeap1.potential();
        int int29 = fibonacciHeap1.size();
        int[] intArray30 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[5, 0, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode31);
    }

    @Test
    public void test5771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5771");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.getKey();
        int int11 = heapNode9.key;
        heapNode9.key = (byte) -1;
        int int14 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        int int25 = fibonacciHeap23.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap23.new HeapNode((int) '#');
        int int28 = fibonacciHeap23.potential();
        fibonacciHeap1.meld(fibonacciHeap23);
        int int30 = fibonacciHeap23.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test5772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5772");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        int[] intArray7 = fibonacciHeap1.countersRep();
        int int8 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.insert(100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(heapNode11);
    }

    @Test
    public void test5773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5773");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        boolean boolean20 = fibonacciHeap13.empty();
        int[] intArray21 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
    }

    @Test
    public void test5774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5774");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        int[] intArray23 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.findMin();
        fibonacciHeap13.deleteMin();
        fibonacciHeap13.deleteMin();
        int int27 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap13.new HeapNode(6);
        int[] intArray30 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1]");
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
    }

    @Test
    public void test5775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5775");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int int15 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.findMin();
        int int17 = heapNode16.getKey();
        int int18 = heapNode16.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test5776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5776");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap13.findMin();
        int[] intArray21 = fibonacciHeap13.countersRep();
        boolean boolean22 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        fibonacciHeap41.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode(0);
        fibonacciHeap29.meld(fibonacciHeap41);
        int[] intArray47 = fibonacciHeap41.countersRep();
        boolean boolean48 = fibonacciHeap41.empty();
        fibonacciHeap24.meld(fibonacciHeap41);
        fibonacciHeap41.deleteMin();
        fibonacciHeap41.deleteMin();
        fibonacciHeap41.deleteMin();
        fibonacciHeap13.meld(fibonacciHeap41);
        int int54 = fibonacciHeap41.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNull(heapNode20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test5777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5777");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(52);
        boolean boolean2 = fibonacciHeap1.empty();
        int int3 = fibonacciHeap1.potential();
        int int4 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode(52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode(10);
        int int10 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test5778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5778");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.insert((-1));
        int int24 = fibonacciHeap1.size();
        int int25 = fibonacciHeap1.size();
        boolean boolean26 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        int int29 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
    }

    @Test
    public void test5779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5779");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        int int7 = fibonacciHeap1.potential();
        int[] intArray8 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1]");
    }

    @Test
    public void test5780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5780");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap7.insert((-1));
        fibonacciHeap1.meld(fibonacciHeap7);
        int int28 = fibonacciHeap1.potential();
        int int29 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        int[] intArray50 = fibonacciHeap32.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap32.findMin();
        heapNode51.key = 35;
        fibonacciHeap1.delete(heapNode51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap1.insert(97);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int62 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap61.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        fibonacciHeap64.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap64.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap76.meld(fibonacciHeap82);
        fibonacciHeap64.meld(fibonacciHeap76);
        int int85 = fibonacciHeap64.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap64.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode88 = fibonacciHeap64.findMin();
        fibonacciHeap59.meld(fibonacciHeap64);
        int int90 = fibonacciHeap64.potential();
        fibonacciHeap1.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode93 = fibonacciHeap64.new HeapNode(8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 5 + "'", int85 == 5);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(heapNode88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 6 + "'", int90 == 6);
    }

    @Test
    public void test5781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5781");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        int[] intArray28 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap1.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap1.new HeapNode((int) (short) -1);
        int[] intArray33 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap1.new HeapNode(35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2, 0]");
    }

    @Test
    public void test5782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5782");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) ' ');
        int int6 = heapNode5.key;
        heapNode5.key = 0;
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
    }

    @Test
    public void test5783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5783");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap51.insert(0);
        fibonacciHeap48.delete(heapNode54);
        fibonacciHeap44.delete(heapNode54);
        boolean boolean57 = fibonacciHeap44.empty();
        fibonacciHeap20.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap44.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int62 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap61.insert(0);
        fibonacciHeap61.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        int int75 = fibonacciHeap73.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap73.new HeapNode((int) '#');
        fibonacciHeap61.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode80 = fibonacciHeap61.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap61.findMin();
        fibonacciHeap44.delete(heapNode81);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(heapNode81);
    }

    @Test
    public void test5784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5784");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(2);
        heapNode8.key = (short) 1;
        int int11 = heapNode8.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test5785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5785");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap6.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        fibonacciHeap6.meld(fibonacciHeap18);
        int int27 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap6.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap6.findMin();
        fibonacciHeap1.meld(fibonacciHeap6);
        int[] intArray32 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        int[] intArray34 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[9, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 1]");
    }

    @Test
    public void test5786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5786");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.insert((int) (short) 100);
        fibonacciHeap1.deleteMin();
        int int26 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test5787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5787");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) (short) -1);
        int int7 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test5788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5788");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode(9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5789");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        heapNode27.key = (short) 1;
        int int31 = heapNode27.key;
        fibonacciHeap1.delete(heapNode27);
        int int33 = fibonacciHeap1.size();
        boolean boolean34 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap1.meld(fibonacciHeap39);
        int int42 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap1.new HeapNode((int) '#');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
    }

    @Test
    public void test5790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5790");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        boolean boolean11 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        boolean boolean13 = fibonacciHeap4.empty();
        int int14 = fibonacciHeap4.potential();
        boolean boolean15 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test5791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5791");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(35);
        int int9 = fibonacciHeap1.size();
        boolean boolean10 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int32 = fibonacciHeap31.size();
        fibonacciHeap12.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap45.insert(0);
        fibonacciHeap42.delete(heapNode48);
        fibonacciHeap38.delete(heapNode48);
        fibonacciHeap35.delete(heapNode48);
        fibonacciHeap12.delete(heapNode48);
        heapNode48.key = ' ';
        fibonacciHeap1.delete(heapNode48);
        int int56 = heapNode48.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test5792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5792");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert(10);
        int int11 = heapNode10.getKey();
        int int12 = heapNode10.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test5793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5793");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap20.new HeapNode((int) (short) 10);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap20.findMin();
        heapNode46.key = 2;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
    }

    @Test
    public void test5794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5794");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        int[] intArray28 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap1.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap1.new HeapNode((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        int int40 = heapNode39.key;
        fibonacciHeap34.delete(heapNode39);
        heapNode39.key = (byte) 10;
        int int44 = heapNode39.key;
        fibonacciHeap1.delete(heapNode39);
        int[] intArray46 = fibonacciHeap1.countersRep();
        int[] intArray47 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1]");
    }

    @Test
    public void test5795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5795");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        boolean boolean9 = fibonacciHeap1.empty();
        int[] intArray10 = fibonacciHeap1.countersRep();
        int int11 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        int int31 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        fibonacciHeap33.delete(heapNode39);
        heapNode39.key = (short) 1;
        int int43 = heapNode39.key;
        fibonacciHeap13.delete(heapNode39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap13.insert((int) (short) 1);
        boolean boolean47 = fibonacciHeap13.empty();
        fibonacciHeap1.meld(fibonacciHeap13);
        int int49 = fibonacciHeap1.size();
        int int50 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap1.findMin();
        int int52 = heapNode51.getKey();
        int int53 = heapNode51.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test5796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5796");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap14.delete(heapNode20);
        fibonacciHeap4.meld(fibonacciHeap14);
        fibonacciHeap14.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap14.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap14.new HeapNode((int) (short) 1);
        heapNode27.key = '4';
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode25);
    }

    @Test
    public void test5797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5797");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap34.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap34.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        boolean boolean47 = fibonacciHeap44.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap44.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap44.new HeapNode((int) '#');
        fibonacciHeap34.delete(heapNode51);
        fibonacciHeap1.meld(fibonacciHeap34);
        boolean boolean54 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray57 = fibonacciHeap56.countersRep();
        boolean boolean58 = fibonacciHeap56.empty();
        int int59 = fibonacciHeap56.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int62 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap61.meld(fibonacciHeap64);
        fibonacciHeap64.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap64.new HeapNode(0);
        fibonacciHeap56.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap64.findMin();
        fibonacciHeap1.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap73.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap77 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int78 = fibonacciHeap77.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap80 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int81 = fibonacciHeap80.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap80.insert(0);
        fibonacciHeap77.delete(heapNode83);
        fibonacciHeap73.delete(heapNode83);
        heapNode83.key = ' ';
        int int88 = heapNode83.getKey();
        fibonacciHeap1.delete(heapNode83);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode91 = fibonacciHeap1.insert((int) (byte) 0);
        boolean boolean92 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNull(heapNode70);
        org.junit.Assert.assertNotNull(heapNode75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(heapNode83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 32 + "'", int88 == 32);
        org.junit.Assert.assertNotNull(heapNode91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test5798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5798");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap90 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 0);
        fibonacciHeap67.meld(fibonacciHeap90);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap67.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode93 = fibonacciHeap67.findMin();
        heapNode93.key = (short) -1;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(heapNode92);
        org.junit.Assert.assertNotNull(heapNode93);
    }

    @Test
    public void test5799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5799");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 100);
        int int11 = heapNode10.getKey();
        int int12 = heapNode10.getKey();
        int int13 = heapNode10.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test5800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5800");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int2 = fibonacciHeap1.size();
        boolean boolean3 = fibonacciHeap1.empty();
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap8.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        fibonacciHeap26.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap14.insert((-1));
        fibonacciHeap8.meld(fibonacciHeap14);
        int int35 = fibonacciHeap8.potential();
        int int36 = fibonacciHeap8.size();
        fibonacciHeap8.deleteMin();
        fibonacciHeap8.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
    }

    @Test
    public void test5801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5801");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap3.insert((int) '#');
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
    }

    @Test
    public void test5802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5802");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        int[] intArray34 = fibonacciHeap24.countersRep();
        fibonacciHeap4.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.findMin();
        fibonacciHeap37.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.insert(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap24.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap24.insert((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int50 = fibonacciHeap49.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap52.meld(fibonacciHeap55);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        fibonacciHeap55.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int69 = fibonacciHeap68.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap68.insert(0);
        fibonacciHeap65.delete(heapNode71);
        fibonacciHeap55.meld(fibonacciHeap65);
        fibonacciHeap65.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap65.insert(100);
        fibonacciHeap49.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap49.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap81 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap81.deleteMin();
        fibonacciHeap81.deleteMin();
        fibonacciHeap81.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap81.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap81.new HeapNode((int) (byte) 1);
        fibonacciHeap49.meld(fibonacciHeap81);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap49.insert((int) (short) 1);
        fibonacciHeap24.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap49.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertNotNull(heapNode76);
        org.junit.Assert.assertNull(heapNode85);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode92);
    }

    @Test
    public void test5803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5803");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.insert((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode(0);
        fibonacciHeap25.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap25.insert((-1));
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap25.findMin();
        boolean boolean47 = fibonacciHeap25.empty();
        fibonacciHeap1.meld(fibonacciHeap25);
        boolean boolean49 = fibonacciHeap25.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test5804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5804");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        fibonacciHeap13.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap33.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode((int) (short) 100);
        int int38 = fibonacciHeap33.size();
        fibonacciHeap13.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        boolean boolean47 = fibonacciHeap44.empty();
        fibonacciHeap44.deleteMin();
        int int49 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap44.findMin();
        fibonacciHeap13.meld(fibonacciHeap44);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(heapNode50);
    }

    @Test
    public void test5805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5805");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(100);
        int int7 = heapNode6.getKey();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test5806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5806");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap28.findMin();
        int int30 = heapNode29.getKey();
        fibonacciHeap13.delete(heapNode29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap35.new HeapNode((int) (short) 0);
        int int42 = fibonacciHeap35.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap54.insert(0);
        fibonacciHeap51.delete(heapNode57);
        fibonacciHeap47.delete(heapNode57);
        fibonacciHeap44.delete(heapNode57);
        fibonacciHeap35.delete(heapNode57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap35.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap68.insert(1);
        int int71 = heapNode70.key;
        heapNode70.key = 10;
        int int74 = heapNode70.key;
        int int75 = heapNode70.getKey();
        heapNode70.key = (short) 100;
        fibonacciHeap13.delete(heapNode70);
        int int79 = fibonacciHeap13.size();
        boolean boolean80 = fibonacciHeap13.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertNotNull(heapNode70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test5807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5807");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) ' ');
        int[] intArray6 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert(32);
        int int10 = heapNode9.key;
        java.lang.Class<?> wildcardClass11 = heapNode9.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1]");
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test5808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5808");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        boolean boolean11 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.new HeapNode(2);
        int int14 = heapNode13.key;
        int int15 = heapNode13.getKey();
        java.lang.Class<?> wildcardClass16 = heapNode13.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test5809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5809");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        int[] intArray31 = fibonacciHeap13.countersRep();
        fibonacciHeap9.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap9.insert(2);
        int int35 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap37.delete(heapNode41);
        fibonacciHeap9.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        fibonacciHeap48.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap48.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap48.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap48.new HeapNode((-1));
        fibonacciHeap9.delete(heapNode62);
        heapNode62.key = 'a';
        fibonacciHeap1.delete(heapNode62);
        int int67 = fibonacciHeap1.potential();
        int int68 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(heapNode69);
    }

    @Test
    public void test5810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5810");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        int int15 = fibonacciHeap10.size();
        int[] intArray16 = fibonacciHeap10.countersRep();
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap10.new HeapNode(0);
        int int20 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(10);
        fibonacciHeap10.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap10.findMin();
        int int31 = heapNode30.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test5811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5811");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap29.new HeapNode(0);
        fibonacciHeap17.meld(fibonacciHeap29);
        int[] intArray35 = fibonacciHeap29.countersRep();
        boolean boolean36 = fibonacciHeap29.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap29.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap29.insert(100);
        fibonacciHeap10.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        fibonacciHeap29.meld(fibonacciHeap43);
        int int45 = fibonacciHeap43.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(10);
        fibonacciHeap47.deleteMin();
        int int53 = fibonacciHeap47.size();
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap47.insert(5);
        int int57 = fibonacciHeap47.potential();
        fibonacciHeap43.meld(fibonacciHeap47);
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap43.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test5812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5812");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        int int18 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap21.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap21.new HeapNode((int) (short) 100);
        int int30 = heapNode29.key;
        fibonacciHeap9.delete(heapNode29);
        fibonacciHeap1.meld(fibonacciHeap9);
        int int33 = fibonacciHeap1.size();
        int int34 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test5813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5813");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        int[] intArray11 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert(3);
        int int14 = fibonacciHeap4.size();
        boolean boolean15 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.findMin();
        int[] intArray26 = fibonacciHeap23.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap23.new HeapNode(5);
        fibonacciHeap4.meld(fibonacciHeap23);
        int int30 = fibonacciHeap4.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1]");
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[3]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test5814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5814");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap1.insert((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap1.insert(2);
        int[] intArray32 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap1.new HeapNode((int) (byte) 1);
        int int35 = heapNode34.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test5815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5815");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        boolean boolean9 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode(5);
        boolean boolean13 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test5816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5816");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert((int) '4');
        heapNode24.key = 97;
        int int27 = heapNode24.key;
        heapNode24.key = 97;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
    }

    @Test
    public void test5817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5817");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        int[] intArray9 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int33 = fibonacciHeap32.size();
        fibonacciHeap13.meld(fibonacciHeap32);
        int int35 = fibonacciHeap32.size();
        fibonacciHeap32.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap32);
        int[] intArray38 = fibonacciHeap32.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
    }

    @Test
    public void test5818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5818");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        int[] intArray26 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.findMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        boolean boolean29 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNull(heapNode27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test5819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5819");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        int[] intArray7 = fibonacciHeap1.countersRep();
        int int8 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int[] intArray10 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1]");
    }

    @Test
    public void test5820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5820");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int int3 = fibonacciHeap1.potential();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        fibonacciHeap9.meld(fibonacciHeap21);
        fibonacciHeap1.meld(fibonacciHeap21);
        java.lang.Class<?> wildcardClass31 = fibonacciHeap21.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test5821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5821");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap0.insert(2);
        int int26 = fibonacciHeap0.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap28.delete(heapNode32);
        fibonacciHeap0.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap39.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap39.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap39.new HeapNode((-1));
        fibonacciHeap0.delete(heapNode53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap0.findMin();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(heapNode55);
    }

    @Test
    public void test5822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5822");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        int[] intArray5 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        fibonacciHeap26.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.meld(fibonacciHeap26);
        int[] intArray32 = fibonacciHeap26.countersRep();
        boolean boolean33 = fibonacciHeap26.empty();
        fibonacciHeap9.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap26.new HeapNode(0);
        heapNode36.key = (short) 10;
        fibonacciHeap1.delete(heapNode36);
        int[] intArray40 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
    }

    @Test
    public void test5823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5823");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        int int13 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap15.findMin();
        int int17 = fibonacciHeap15.size();
        fibonacciHeap4.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap15.new HeapNode((int) ' ');
        heapNode20.key = (short) -1;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test5824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5824");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        boolean boolean11 = fibonacciHeap7.empty();
        int int12 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int15 = fibonacciHeap14.size();
        boolean boolean16 = fibonacciHeap14.empty();
        int int17 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap14.findMin();
        fibonacciHeap7.delete(heapNode18);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode18);
    }

    @Test
    public void test5825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5825");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int24 = fibonacciHeap23.size();
        int int25 = fibonacciHeap23.potential();
        int int26 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap31.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode((int) (byte) 100);
        int[] intArray42 = fibonacciHeap37.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap37.new HeapNode(35);
        fibonacciHeap23.delete(heapNode44);
        boolean boolean46 = fibonacciHeap23.empty();
        fibonacciHeap23.deleteMin();
        fibonacciHeap10.meld(fibonacciHeap23);
        int int49 = fibonacciHeap10.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[4]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
    }

    @Test
    public void test5826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5826");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.insert(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap24.new HeapNode((int) (short) 0);
        int int93 = heapNode92.key;
        heapNode92.key = 3;
        heapNode92.key = (byte) 0;
        int int98 = heapNode92.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test5827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5827");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        int[] intArray7 = fibonacciHeap6.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap6.new HeapNode(0);
        fibonacciHeap1.delete(heapNode9);
        int int11 = fibonacciHeap1.potential();
        int int12 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test5828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5828");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int39 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.findMin();
        int int41 = fibonacciHeap38.potential();
        fibonacciHeap13.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap13.insert(52);
        int int45 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap46.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap50.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        fibonacciHeap62.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap62.new HeapNode(0);
        fibonacciHeap50.meld(fibonacciHeap62);
        int[] intArray68 = fibonacciHeap50.countersRep();
        fibonacciHeap46.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap50.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int74 = fibonacciHeap73.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap73.meld(fibonacciHeap76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap73.meld(fibonacciHeap79);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int83 = fibonacciHeap82.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap85 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap82.meld(fibonacciHeap85);
        fibonacciHeap85.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode89 = fibonacciHeap85.new HeapNode(0);
        fibonacciHeap73.meld(fibonacciHeap85);
        int[] intArray91 = fibonacciHeap85.countersRep();
        int int92 = fibonacciHeap85.size();
        int int93 = fibonacciHeap85.size();
        fibonacciHeap50.meld(fibonacciHeap85);
        int int95 = fibonacciHeap50.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode96 = fibonacciHeap50.findMin();
        fibonacciHeap13.meld(fibonacciHeap50);
        int int98 = fibonacciHeap50.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertNotNull(heapNode96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
    }

    @Test
    public void test5829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5829");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap24.new HeapNode(7);
        int int47 = fibonacciHeap24.potential();
        int int48 = fibonacciHeap24.potential();
        fibonacciHeap24.deleteMin();
        int int50 = fibonacciHeap24.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test5830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5830");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode((int) '#');
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.new HeapNode(6);
        int int21 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test5831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5831");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.findMin();
        int int14 = heapNode13.getKey();
        int int15 = heapNode13.getKey();
        heapNode13.key = (short) 1;
        int int18 = heapNode13.getKey();
        java.lang.Class<?> wildcardClass19 = heapNode13.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test5832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5832");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap3.new HeapNode(10);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.findMin();
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean24 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.insert(7);
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap13.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(heapNode26);
    }

    @Test
    public void test5833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5833");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray9 = fibonacciHeap8.countersRep();
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        fibonacciHeap24.meld(fibonacciHeap31);
        int int34 = fibonacciHeap31.size();
        fibonacciHeap1.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap31.new HeapNode((int) (byte) -1);
        int[] intArray38 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap31.findMin();
        java.lang.Class<?> wildcardClass40 = fibonacciHeap31.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[4]");
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test5834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5834");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        int int16 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap10.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap24.delete(heapNode30);
        fibonacciHeap20.delete(heapNode30);
        boolean boolean33 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        fibonacciHeap20.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap39.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        fibonacciHeap51.meld(fibonacciHeap58);
        fibonacciHeap20.meld(fibonacciHeap58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap20.new HeapNode(2);
        int[] intArray64 = fibonacciHeap20.countersRep();
        fibonacciHeap10.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap20.insert(7);
        int int68 = fibonacciHeap20.potential();
        int[] intArray69 = fibonacciHeap20.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[8, 0, 0]");
    }

    @Test
    public void test5835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5835");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int int15 = fibonacciHeap1.size();
        int[] intArray16 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap1.new HeapNode(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.new HeapNode((int) (short) -1);
        int int21 = heapNode20.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test5836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5836");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        int int29 = fibonacciHeap5.size();
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap36.delete(heapNode42);
        fibonacciHeap32.delete(heapNode42);
        boolean boolean45 = fibonacciHeap32.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        fibonacciHeap32.meld(fibonacciHeap47);
        int int50 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap32.findMin();
        fibonacciHeap5.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap60.meld(fibonacciHeap63);
        fibonacciHeap57.meld(fibonacciHeap63);
        fibonacciHeap63.deleteMin();
        int[] intArray67 = fibonacciHeap63.countersRep();
        int int68 = fibonacciHeap63.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap63.new HeapNode(2);
        fibonacciHeap5.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap5.findMin();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(heapNode72);
    }

    @Test
    public void test5837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5837");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(52);
        boolean boolean2 = fibonacciHeap1.empty();
        int int3 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        fibonacciHeap8.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap8.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap8.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap8.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap8.findMin();
        fibonacciHeap1.meld(fibonacciHeap8);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.new HeapNode(1);
        int int21 = heapNode20.key;
        heapNode20.key = 2;
        int int24 = heapNode20.getKey();
        int int25 = heapNode20.getKey();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test5838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5838");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap13.insert(0);
        fibonacciHeap10.delete(heapNode16);
        fibonacciHeap6.delete(heapNode16);
        fibonacciHeap1.delete(heapNode16);
        int[] intArray20 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap25.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap1.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap1.new HeapNode((int) (byte) -1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test5839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5839");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.new HeapNode(32);
        fibonacciHeap7.delete(heapNode33);
        int int35 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap7.new HeapNode((int) 'a');
        int int38 = fibonacciHeap7.size();
        boolean boolean39 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap41.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        fibonacciHeap53.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap53.new HeapNode(0);
        fibonacciHeap41.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int61 = fibonacciHeap60.size();
        fibonacciHeap41.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap41.meld(fibonacciHeap64);
        int int66 = fibonacciHeap64.potential();
        boolean boolean67 = fibonacciHeap64.empty();
        fibonacciHeap7.meld(fibonacciHeap64);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test5840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5840");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        int int5 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int8 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        int int15 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap10.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        fibonacciHeap33.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode(0);
        fibonacciHeap21.meld(fibonacciHeap33);
        int[] intArray39 = fibonacciHeap21.countersRep();
        fibonacciHeap17.meld(fibonacciHeap21);
        fibonacciHeap10.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap43.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap52.meld(fibonacciHeap55);
        fibonacciHeap55.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap55.new HeapNode(0);
        fibonacciHeap43.meld(fibonacciHeap55);
        int[] intArray61 = fibonacciHeap55.countersRep();
        boolean boolean62 = fibonacciHeap55.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap55.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap66.findMin();
        int int68 = heapNode67.key;
        fibonacciHeap55.delete(heapNode67);
        fibonacciHeap10.delete(heapNode67);
        fibonacciHeap7.delete(heapNode67);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap74 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int75 = fibonacciHeap74.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap77 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap74.meld(fibonacciHeap77);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap80 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int81 = fibonacciHeap80.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap83 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap80.meld(fibonacciHeap83);
        fibonacciHeap77.meld(fibonacciHeap83);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap83.new HeapNode((int) (byte) 100);
        int[] intArray88 = fibonacciHeap83.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap83.new HeapNode((int) '#');
        fibonacciHeap7.meld(fibonacciHeap83);
        int int92 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode94 = fibonacciHeap7.new HeapNode(8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[4]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test5841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5841");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        int int3 = heapNode2.getKey();
        heapNode2.key = 35;
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
    }

    @Test
    public void test5842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5842");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int int43 = fibonacciHeap24.size();
        int int44 = fibonacciHeap24.size();
        int int45 = fibonacciHeap24.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
    }

    @Test
    public void test5843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5843");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray21 = fibonacciHeap20.countersRep();
        fibonacciHeap20.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode((int) 'a');
        int int26 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(heapNode27);
    }

    @Test
    public void test5844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5844");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(52);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test5845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5845");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(0);
        int int4 = heapNode3.getKey();
        heapNode3.key = (short) 0;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test5846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5846");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int[] intArray9 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.insert(6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.insert(2);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(heapNode13);
    }

    @Test
    public void test5847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5847");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        fibonacciHeap24.deleteMin();
        int int27 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        fibonacciHeap41.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode(0);
        fibonacciHeap29.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        fibonacciHeap41.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap52.meld(fibonacciHeap55);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap52.meld(fibonacciHeap58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int62 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap61.meld(fibonacciHeap64);
        fibonacciHeap64.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap64.new HeapNode(0);
        fibonacciHeap52.meld(fibonacciHeap64);
        fibonacciHeap48.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap72.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int80 = fibonacciHeap79.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap79.insert(0);
        fibonacciHeap76.delete(heapNode82);
        fibonacciHeap72.delete(heapNode82);
        boolean boolean85 = fibonacciHeap72.empty();
        fibonacciHeap48.meld(fibonacciHeap72);
        fibonacciHeap24.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode88 = fibonacciHeap48.findMin();
        fibonacciHeap1.meld(fibonacciHeap48);
        fibonacciHeap48.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(heapNode74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(heapNode82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(heapNode88);
    }

    @Test
    public void test5848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5848");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        int int22 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        int[] intArray42 = fibonacciHeap36.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap36.findMin();
        fibonacciHeap17.meld(fibonacciHeap36);
        fibonacciHeap3.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap36.new HeapNode(100);
        fibonacciHeap1.delete(heapNode47);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNull(heapNode43);
    }

    @Test
    public void test5849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5849");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        fibonacciHeap13.deleteMin();
        int int22 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.findMin();
        int int24 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        int int33 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap28.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap35.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap39.meld(fibonacciHeap51);
        int[] intArray57 = fibonacciHeap39.countersRep();
        fibonacciHeap35.meld(fibonacciHeap39);
        fibonacciHeap28.meld(fibonacciHeap35);
        fibonacciHeap28.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int65 = fibonacciHeap64.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap64.insert(0);
        int int68 = heapNode67.key;
        fibonacciHeap62.delete(heapNode67);
        heapNode67.key = (short) -1;
        fibonacciHeap28.delete(heapNode67);
        heapNode67.key = 10;
        int int75 = heapNode67.key;
        heapNode67.key = 5;
        fibonacciHeap13.delete(heapNode67);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
    }

    @Test
    public void test5850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5850");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        int[] intArray2 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = heapNode3.key;
        heapNode3.key = 10;
        int int7 = heapNode3.key;
        int int8 = heapNode3.getKey();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test5851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5851");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int int15 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap18.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        fibonacciHeap30.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap41.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        fibonacciHeap53.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap53.new HeapNode(0);
        fibonacciHeap41.meld(fibonacciHeap53);
        fibonacciHeap37.meld(fibonacciHeap41);
        int[] intArray60 = fibonacciHeap41.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap41.findMin();
        int int62 = fibonacciHeap41.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int65 = fibonacciHeap64.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap64.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int71 = fibonacciHeap70.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap70.meld(fibonacciHeap73);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap67.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int80 = fibonacciHeap79.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap79.meld(fibonacciHeap82);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap85 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap79.meld(fibonacciHeap85);
        fibonacciHeap67.meld(fibonacciHeap79);
        int int88 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap67.insert(10);
        fibonacciHeap41.meld(fibonacciHeap67);
        fibonacciHeap1.meld(fibonacciHeap41);
        int int93 = fibonacciHeap41.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 9 + "'", int93 == 9);
    }

    @Test
    public void test5852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5852");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        heapNode7.key = (short) 1;
        int int11 = heapNode7.getKey();
        int int12 = heapNode7.key;
        heapNode7.key = 7;
        int int15 = heapNode7.key;
        int int16 = heapNode7.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
    }

    @Test
    public void test5853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5853");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        boolean boolean23 = fibonacciHeap17.empty();
        fibonacciHeap1.meld(fibonacciHeap17);
        int[] intArray25 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.findMin();
        heapNode26.key = (short) 1;
        int int29 = heapNode26.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1]");
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test5854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5854");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.findMin();
        boolean boolean23 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode(0);
        fibonacciHeap25.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap25.insert((-1));
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        boolean boolean50 = fibonacciHeap47.empty();
        int int51 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap52.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap56.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap65.meld(fibonacciHeap68);
        fibonacciHeap68.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap68.new HeapNode(0);
        fibonacciHeap56.meld(fibonacciHeap68);
        int[] intArray74 = fibonacciHeap56.countersRep();
        fibonacciHeap52.meld(fibonacciHeap56);
        fibonacciHeap47.meld(fibonacciHeap56);
        fibonacciHeap47.deleteMin();
        fibonacciHeap25.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap47.findMin();
        fibonacciHeap1.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap47.findMin();
        heapNode81.key = 9;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode79);
        org.junit.Assert.assertNotNull(heapNode81);
    }

    @Test
    public void test5855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5855");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.findMin();
        int int8 = fibonacciHeap5.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap9.new HeapNode((int) (short) 100);
        boolean boolean14 = fibonacciHeap9.empty();
        fibonacciHeap5.meld(fibonacciHeap9);
        boolean boolean16 = fibonacciHeap9.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap9.new HeapNode(2);
        heapNode18.key = 35;
        fibonacciHeap1.delete(heapNode18);
        int int22 = heapNode18.key;
        heapNode18.key = (short) 1;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test5856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5856");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        int[] intArray26 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.findMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        boolean boolean29 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap31.deleteMin();
        fibonacciHeap31.deleteMin();
        fibonacciHeap20.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap20.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap41.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode(32);
        fibonacciHeap20.delete(heapNode45);
        int int47 = heapNode45.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNull(heapNode27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test5857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5857");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        heapNode7.key = (short) 1;
        int int11 = heapNode7.getKey();
        int int12 = heapNode7.key;
        int int13 = heapNode7.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test5858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test5858");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        boolean boolean12 = fibonacciHeap5.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap5.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap5.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap18.new HeapNode((int) (short) 0);
        fibonacciHeap18.deleteMin();
        boolean boolean26 = fibonacciHeap18.empty();
        int int27 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap45.insert(0);
        fibonacciHeap42.delete(heapNode48);
        fibonacciHeap32.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap32.new HeapNode(52);
        int int53 = heapNode52.getKey();
        fibonacciHeap18.delete(heapNode52);
        int int55 = heapNode52.key;
        fibonacciHeap5.delete(heapNode52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap5.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(heapNode57);
    }
}


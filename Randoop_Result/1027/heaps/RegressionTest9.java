package heaps;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test4501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4501");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) '#');
        int[] intArray6 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
    }

    @Test
    public void test4502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4502");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        boolean boolean7 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        int int9 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.findMin();
        int int11 = fibonacciHeap4.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4503");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode((int) '#');
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap13.size();
        fibonacciHeap13.deleteMin();
        int int21 = fibonacciHeap13.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test4504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4504");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        heapNode8.key = 35;
        heapNode8.key = (byte) 10;
        heapNode8.key = (byte) 0;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test4505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4505");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.new HeapNode((int) (short) 10);
        int int43 = fibonacciHeap32.potential();
        fibonacciHeap24.meld(fibonacciHeap32);
        int int45 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap32.insert(52);
        int[] intArray48 = fibonacciHeap32.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 0, 0]");
    }

    @Test
    public void test4506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4506");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int[] intArray43 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        fibonacciHeap48.deleteMin();
        int[] intArray51 = fibonacciHeap48.countersRep();
        int int52 = fibonacciHeap48.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap48.new HeapNode(0);
        int int55 = fibonacciHeap48.size();
        int int56 = fibonacciHeap48.size();
        fibonacciHeap24.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap60.findMin();
        int int62 = fibonacciHeap60.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap60.findMin();
        int int64 = heapNode63.key;
        fibonacciHeap24.delete(heapNode63);
        boolean boolean66 = fibonacciHeap24.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test4507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4507");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap18.countersRep();
        boolean boolean25 = fibonacciHeap18.empty();
        fibonacciHeap1.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap30.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        fibonacciHeap42.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap42.new HeapNode(0);
        fibonacciHeap30.meld(fibonacciHeap42);
        int[] intArray48 = fibonacciHeap42.countersRep();
        int int49 = fibonacciHeap42.size();
        int int50 = fibonacciHeap42.size();
        fibonacciHeap18.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap53.deleteMin();
        fibonacciHeap53.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap57.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int67 = fibonacciHeap66.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap66.meld(fibonacciHeap69);
        fibonacciHeap69.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap69.new HeapNode(0);
        fibonacciHeap57.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int77 = fibonacciHeap76.size();
        fibonacciHeap57.meld(fibonacciHeap76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap57.findMin();
        fibonacciHeap53.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int83 = fibonacciHeap82.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap85 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap82.meld(fibonacciHeap85);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap88 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap82.meld(fibonacciHeap88);
        int int90 = fibonacciHeap88.potential();
        int int91 = fibonacciHeap88.size();
        boolean boolean92 = fibonacciHeap88.empty();
        int[] intArray93 = fibonacciHeap88.countersRep();
        fibonacciHeap53.meld(fibonacciHeap88);
        fibonacciHeap18.meld(fibonacciHeap53);
        int[] intArray96 = fibonacciHeap53.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode97 = fibonacciHeap53.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[3]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[7, 0, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode97);
    }

    @Test
    public void test4508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4508");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        heapNode11.key = ' ';
        int int16 = heapNode11.getKey();
        int int17 = heapNode11.getKey();
        heapNode11.key = 2;
        int int20 = heapNode11.key;
        int int21 = heapNode11.key;
        int int22 = heapNode11.getKey();
        java.lang.Class<?> wildcardClass23 = heapNode11.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test4509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4509");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        heapNode20.key = 35;
        int int23 = heapNode20.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test4510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4510");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        fibonacciHeap32.meld(fibonacciHeap39);
        fibonacciHeap1.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap1.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        boolean boolean48 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap1.delete(heapNode49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode.getKey()\" because \"x\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test4511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4511");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        boolean boolean12 = fibonacciHeap5.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap5.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap5.insert((int) 'a');
        int[] intArray17 = fibonacciHeap5.countersRep();
        int[] intArray18 = fibonacciHeap5.countersRep();
        fibonacciHeap5.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1]");
    }

    @Test
    public void test4512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4512");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        fibonacciHeap32.meld(fibonacciHeap39);
        fibonacciHeap1.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap1.new HeapNode(97);
        int int45 = heapNode44.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
    }

    @Test
    public void test4513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4513");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap7.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap17.insert(100);
        fibonacciHeap1.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap33.deleteMin();
        fibonacciHeap33.deleteMin();
        fibonacciHeap33.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap33.new HeapNode((int) (byte) 1);
        fibonacciHeap1.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap42.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap42.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        fibonacciHeap42.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap42.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap42.new HeapNode(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap58.insert(1);
        boolean boolean61 = fibonacciHeap58.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap63.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int71 = fibonacciHeap70.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap70.insert(0);
        fibonacciHeap67.delete(heapNode73);
        fibonacciHeap63.delete(heapNode73);
        fibonacciHeap58.delete(heapNode73);
        fibonacciHeap56.delete(heapNode73);
        fibonacciHeap42.delete(heapNode73);
        fibonacciHeap42.deleteMin();
        boolean boolean80 = fibonacciHeap42.empty();
        fibonacciHeap1.meld(fibonacciHeap42);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNull(heapNode37);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test4514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4514");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap0.insert(2);
        int int26 = fibonacciHeap0.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap0.findMin();
        heapNode27.key = 35;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test4515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4515");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray7 = fibonacciHeap6.countersRep();
        fibonacciHeap1.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        fibonacciHeap22.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap45.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap45.new HeapNode(0);
        fibonacciHeap33.meld(fibonacciHeap45);
        fibonacciHeap29.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap33.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap33.new HeapNode(7);
        int int56 = fibonacciHeap33.potential();
        int int57 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap59.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap59.new HeapNode(10);
        fibonacciHeap59.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int67 = fibonacciHeap66.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap66.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap66.new HeapNode((int) (short) 0);
        heapNode72.key = (byte) 100;
        heapNode72.key = (-1);
        fibonacciHeap59.delete(heapNode72);
        fibonacciHeap33.delete(heapNode72);
        fibonacciHeap1.delete(heapNode72);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap1.insert(3);
        heapNode81.key = 1;
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(heapNode81);
    }

    @Test
    public void test4516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4516");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert((int) ' ');
        int int28 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap30.meld(fibonacciHeap36);
        int int38 = fibonacciHeap36.potential();
        int int39 = fibonacciHeap36.size();
        boolean boolean40 = fibonacciHeap36.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap36.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap46.insert(1);
        int int49 = heapNode48.key;
        int int50 = heapNode48.key;
        heapNode48.key = (-1);
        int int53 = heapNode48.getKey();
        fibonacciHeap44.delete(heapNode48);
        int int55 = fibonacciHeap44.size();
        int int56 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap58.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        fibonacciHeap70.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap70.new HeapNode(0);
        fibonacciHeap58.meld(fibonacciHeap70);
        int[] intArray76 = fibonacciHeap58.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap58.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap58.findMin();
        boolean boolean79 = fibonacciHeap58.empty();
        fibonacciHeap44.meld(fibonacciHeap58);
        fibonacciHeap36.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap36.new HeapNode(6);
        fibonacciHeap4.delete(heapNode83);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap4.findMin();
        boolean boolean86 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode77);
        org.junit.Assert.assertNotNull(heapNode78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(heapNode85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test4517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4517");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        boolean boolean28 = fibonacciHeap22.empty();
        boolean boolean29 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap22.findMin();
        int int31 = fibonacciHeap22.size();
        fibonacciHeap22.deleteMin();
        fibonacciHeap7.meld(fibonacciHeap22);
        int int34 = fibonacciHeap7.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test4518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4518");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(35);
        int int9 = fibonacciHeap1.size();
        int[] intArray10 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode((int) '#');
        int int13 = heapNode12.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test4519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4519");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap11.new HeapNode((int) (short) 0);
        fibonacciHeap11.deleteMin();
        boolean boolean19 = fibonacciHeap11.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap37.insert(0);
        fibonacciHeap34.delete(heapNode40);
        fibonacciHeap24.meld(fibonacciHeap34);
        int[] intArray43 = fibonacciHeap24.countersRep();
        fibonacciHeap11.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap24.new HeapNode(9);
        fibonacciHeap1.meld(fibonacciHeap24);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 0]");
    }

    @Test
    public void test4520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4520");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap10.insert((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap44.insert(0);
        fibonacciHeap41.delete(heapNode47);
        fibonacciHeap37.delete(heapNode47);
        fibonacciHeap34.delete(heapNode47);
        fibonacciHeap10.delete(heapNode47);
        int int52 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap56.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap63.insert(0);
        fibonacciHeap60.delete(heapNode66);
        fibonacciHeap56.delete(heapNode66);
        boolean boolean69 = fibonacciHeap56.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int72 = fibonacciHeap71.size();
        fibonacciHeap56.meld(fibonacciHeap71);
        fibonacciHeap54.meld(fibonacciHeap56);
        int int75 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap77 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int78 = fibonacciHeap77.potential();
        fibonacciHeap77.deleteMin();
        int[] intArray80 = fibonacciHeap77.countersRep();
        int int81 = fibonacciHeap77.potential();
        fibonacciHeap56.meld(fibonacciHeap77);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap56.findMin();
        fibonacciHeap10.delete(heapNode83);
        int int85 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap10.new HeapNode(5);
        boolean boolean88 = fibonacciHeap10.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(heapNode83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test4521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4521");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode(10);
        int[] intArray10 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNull(heapNode5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
    }

    @Test
    public void test4522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4522");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.insert(35);
        int int8 = heapNode7.getKey();
        heapNode7.key = '#';
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test4523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4523");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int[] intArray7 = fibonacciHeap1.countersRep();
        int int8 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test4524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4524");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        int int14 = fibonacciHeap4.size();
        int[] intArray15 = fibonacciHeap4.countersRep();
        boolean boolean16 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap4.findMin();
        heapNode17.key = (byte) 1;
        java.lang.Class<?> wildcardClass20 = heapNode17.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test4525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4525");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap23.new HeapNode((int) (short) 0);
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        int int37 = fibonacciHeap32.size();
        int[] intArray38 = fibonacciHeap32.countersRep();
        fibonacciHeap23.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap32.new HeapNode(0);
        int int42 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap32.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap32.new HeapNode(1);
        fibonacciHeap1.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap1.new HeapNode((int) ' ');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(heapNode43);
    }

    @Test
    public void test4526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4526");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        int int18 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap21.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap21.new HeapNode((int) (short) 100);
        int int30 = heapNode29.key;
        fibonacciHeap9.delete(heapNode29);
        fibonacciHeap1.meld(fibonacciHeap9);
        int int33 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap35.insert(0);
        heapNode38.key = 0;
        heapNode38.key = 2;
        fibonacciHeap1.delete(heapNode38);
        int int44 = heapNode38.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test4527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4527");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap25.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(10);
        fibonacciHeap23.delete(heapNode29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap23.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap23);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap1.new HeapNode(32);
        int int37 = fibonacciHeap1.potential();
        int[] intArray38 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap40.insert(0);
        fibonacciHeap40.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap46.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        fibonacciHeap58.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap58.new HeapNode(0);
        fibonacciHeap46.meld(fibonacciHeap58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap46.insert((-1));
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap40.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap40.findMin();
        fibonacciHeap1.meld(fibonacciHeap40);
        int[] intArray70 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[5, 0, 0, 0]");
    }

    @Test
    public void test4528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4528");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        boolean boolean6 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert((int) ' ');
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(heapNode8);
    }

    @Test
    public void test4529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4529");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.insert((-1));
        fibonacciHeap1.delete(heapNode43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.findMin();
        int[] intArray46 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap1.new HeapNode((int) (byte) -1);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 1]");
    }

    @Test
    public void test4530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4530");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) ' ');
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) (short) -1);
        int int5 = heapNode4.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test4531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4531");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap10.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap10.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap18.meld(fibonacciHeap30);
        int[] intArray36 = fibonacciHeap30.countersRep();
        boolean boolean37 = fibonacciHeap30.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap30.insert((int) (byte) 100);
        int[] intArray40 = fibonacciHeap30.countersRep();
        fibonacciHeap10.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap43.findMin();
        fibonacciHeap43.deleteMin();
        fibonacciHeap30.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap30.insert(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap30.insert(0);
        heapNode51.key = 100;
        heapNode51.key = 0;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap1.delete(heapNode51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertNotNull(heapNode51);
    }

    @Test
    public void test4532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4532");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int24 = fibonacciHeap23.size();
        int int25 = fibonacciHeap23.potential();
        int int26 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap31.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode((int) (byte) 100);
        int[] intArray42 = fibonacciHeap37.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap37.new HeapNode(35);
        fibonacciHeap23.delete(heapNode44);
        boolean boolean46 = fibonacciHeap23.empty();
        fibonacciHeap23.deleteMin();
        fibonacciHeap10.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap10.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[4]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(heapNode49);
    }

    @Test
    public void test4533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4533");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap1.insert((int) 'a');
        int[] intArray15 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2, 0]");
    }

    @Test
    public void test4534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4534");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int[] intArray43 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.findMin();
        int int45 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap50.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap50.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap62.meld(fibonacciHeap68);
        fibonacciHeap50.meld(fibonacciHeap62);
        int int71 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap50.insert(10);
        fibonacciHeap24.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        int[] intArray76 = fibonacciHeap50.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1, 0, 1]");
    }

    @Test
    public void test4535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4535");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode((int) (byte) 10);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.new HeapNode((int) (byte) 100);
        boolean boolean28 = fibonacciHeap20.empty();
        int int29 = fibonacciHeap20.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test4536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4536");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        int[] intArray44 = fibonacciHeap26.countersRep();
        int int45 = fibonacciHeap26.potential();
        fibonacciHeap13.meld(fibonacciHeap26);
        int int47 = fibonacciHeap13.size();
        int[] intArray48 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int51 = fibonacciHeap50.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap50.findMin();
        int int53 = fibonacciHeap50.potential();
        boolean boolean54 = fibonacciHeap50.empty();
        fibonacciHeap13.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap50.findMin();
        int int57 = heapNode56.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[5, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test4537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4537");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap23.new HeapNode((int) (short) 0);
        heapNode29.key = (byte) 100;
        heapNode29.key = (-1);
        int int34 = heapNode29.getKey();
        fibonacciHeap1.delete(heapNode29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap1.new HeapNode((int) ' ');
        heapNode37.key = 3;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test4538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4538");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap25.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(10);
        fibonacciHeap23.delete(heapNode29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap23.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap23);
        java.lang.Class<?> wildcardClass34 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test4539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4539");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        int int16 = fibonacciHeap14.potential();
        int int17 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap19.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap31.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap31.new HeapNode(32);
        fibonacciHeap14.delete(heapNode40);
        int int42 = heapNode40.key;
        fibonacciHeap1.delete(heapNode40);
        int[] intArray44 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int47 = fibonacciHeap46.potential();
        fibonacciHeap46.deleteMin();
        int int49 = fibonacciHeap46.size();
        fibonacciHeap1.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        fibonacciHeap56.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int67 = fibonacciHeap66.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int70 = fibonacciHeap69.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap69.insert(0);
        fibonacciHeap66.delete(heapNode72);
        fibonacciHeap56.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap56.new HeapNode(52);
        int int77 = fibonacciHeap56.potential();
        fibonacciHeap1.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(heapNode72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(heapNode79);
    }

    @Test
    public void test4540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4540");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int[] intArray43 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.insert(0);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap52.insert(1);
        int int55 = heapNode54.key;
        int int56 = heapNode54.key;
        fibonacciHeap46.delete(heapNode54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        int int64 = fibonacciHeap59.size();
        fibonacciHeap46.meld(fibonacciHeap59);
        fibonacciHeap24.meld(fibonacciHeap59);
        int int67 = fibonacciHeap59.potential();
        int int68 = fibonacciHeap59.size();
        int[] intArray69 = fibonacciHeap59.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap59.new HeapNode(32);
        java.lang.Class<?> wildcardClass72 = heapNode71.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[6, 0]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test4541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4541");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.new HeapNode((int) (short) 10);
        int[] intArray16 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap1.insert((int) (short) -1);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode22);
    }

    @Test
    public void test4542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4542");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        fibonacciHeap1.delete(heapNode14);
        int[] intArray18 = fibonacciHeap1.countersRep();
        boolean boolean19 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.insert(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int43 = fibonacciHeap42.size();
        fibonacciHeap23.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap23.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap49.insert(0);
        fibonacciHeap49.deleteMin();
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap46.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap46.insert(0);
        int int59 = fibonacciHeap46.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap46.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap46.insert((int) '4');
        fibonacciHeap1.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int67 = fibonacciHeap66.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap66.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap72.meld(fibonacciHeap75);
        fibonacciHeap69.meld(fibonacciHeap75);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap69.insert((int) (short) 1);
        int[] intArray80 = fibonacciHeap69.countersRep();
        fibonacciHeap1.meld(fibonacciHeap69);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(heapNode79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[5, 0, 0]");
    }

    @Test
    public void test4543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4543");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.size();
        int[] intArray16 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode17);
    }

    @Test
    public void test4544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4544");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.insert((int) '#');
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(heapNode26);
    }

    @Test
    public void test4545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4545");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap20.findMin();
        boolean boolean44 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap20.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(heapNode45);
    }

    @Test
    public void test4546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4546");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.new HeapNode(5);
        int int5 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.findMin();
        int int7 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test4547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4547");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap14.delete(heapNode20);
        fibonacciHeap4.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap4.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode25);
    }

    @Test
    public void test4548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4548");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        fibonacciHeap13.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        int[] intArray42 = fibonacciHeap36.countersRep();
        boolean boolean43 = fibonacciHeap36.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap36.insert((int) (byte) 100);
        int[] intArray46 = fibonacciHeap36.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap36.findMin();
        fibonacciHeap36.deleteMin();
        fibonacciHeap36.deleteMin();
        int int50 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap36.new HeapNode(6);
        fibonacciHeap13.delete(heapNode52);
        java.lang.Class<?> wildcardClass54 = heapNode52.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1]");
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test4549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4549");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        int[] intArray25 = fibonacciHeap7.countersRep();
        fibonacciHeap3.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap7.new HeapNode((-1));
        heapNode28.key = 100;
        fibonacciHeap1.delete(heapNode28);
        boolean boolean32 = fibonacciHeap1.empty();
        int int33 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap1.new HeapNode((int) '#');
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test4550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4550");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        boolean boolean9 = fibonacciHeap1.empty();
        int[] intArray10 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap12.insert((-1));
        int int32 = fibonacciHeap12.potential();
        fibonacciHeap1.meld(fibonacciHeap12);
        int[] intArray34 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[5, 0, 0, 0]");
    }

    @Test
    public void test4551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4551");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode((int) '#');
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap13.insert(100);
        boolean boolean22 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        fibonacciHeap27.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap27.new HeapNode(0);
        int int32 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap27.findMin();
        fibonacciHeap13.meld(fibonacciHeap27);
        boolean boolean35 = fibonacciHeap13.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(heapNode33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test4552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4552");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        boolean boolean23 = fibonacciHeap20.empty();
        int int24 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.insert(100);
        int int27 = fibonacciHeap20.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test4553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4553");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.insert(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap24.new HeapNode((int) (short) -1);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode95 = fibonacciHeap24.insert(6);
        int[] intArray96 = fibonacciHeap24.countersRep();
        int[] intArray97 = fibonacciHeap24.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[2, 0, 0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[2, 0, 0, 1, 0]");
    }

    @Test
    public void test4554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4554");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.insert((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode(0);
        fibonacciHeap25.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int45 = fibonacciHeap44.size();
        fibonacciHeap25.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode((int) (byte) 10);
        boolean boolean49 = fibonacciHeap44.empty();
        fibonacciHeap1.meld(fibonacciHeap44);
        int[] intArray51 = fibonacciHeap44.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[7]");
    }

    @Test
    public void test4555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4555");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        int int11 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        int int13 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test4556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4556");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
    }

    @Test
    public void test4557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4557");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode(2);
        int int26 = fibonacciHeap20.potential();
        boolean boolean27 = fibonacciHeap20.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test4558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4558");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.findMin();
        heapNode9.key = (short) 100;
        heapNode9.key = 6;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
    }

    @Test
    public void test4559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4559");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        boolean boolean37 = fibonacciHeap13.empty();
        int[] intArray38 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[2, 0]");
    }

    @Test
    public void test4560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4560");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        boolean boolean20 = fibonacciHeap13.empty();
        int int21 = fibonacciHeap13.size();
        java.lang.Class<?> wildcardClass22 = fibonacciHeap13.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test4561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4561");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        int[] intArray4 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode((int) '#');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
    }

    @Test
    public void test4562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4562");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int24 = fibonacciHeap23.size();
        fibonacciHeap4.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap30.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap37.insert(0);
        fibonacciHeap34.delete(heapNode40);
        fibonacciHeap30.delete(heapNode40);
        fibonacciHeap27.delete(heapNode40);
        fibonacciHeap4.delete(heapNode40);
        fibonacciHeap1.delete(heapNode40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap1.insert(3);
        int int48 = heapNode47.getKey();
        int int49 = heapNode47.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
    }

    @Test
    public void test4563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4563");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        int int14 = fibonacciHeap4.size();
        int[] intArray15 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap4.new HeapNode((int) '4');
        boolean boolean18 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.new HeapNode((int) (short) 0);
        fibonacciHeap20.deleteMin();
        boolean boolean28 = fibonacciHeap20.empty();
        int int29 = fibonacciHeap20.size();
        fibonacciHeap4.meld(fibonacciHeap20);
        int[] intArray31 = fibonacciHeap4.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2, 0]");
    }

    @Test
    public void test4564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4564");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.size();
        boolean boolean16 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        fibonacciHeap21.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap21.new HeapNode((int) (short) 10);
        fibonacciHeap4.delete(heapNode31);
        boolean boolean33 = fibonacciHeap4.empty();
        int int34 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap36.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.insert(10);
        int int41 = fibonacciHeap36.size();
        fibonacciHeap4.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap36.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap46.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        fibonacciHeap58.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap58.new HeapNode(0);
        fibonacciHeap46.meld(fibonacciHeap58);
        int[] intArray64 = fibonacciHeap46.countersRep();
        int int65 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap46.findMin();
        int int67 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap46.new HeapNode(3);
        heapNode69.key = (short) -1;
        int int72 = heapNode69.key;
        fibonacciHeap36.delete(heapNode69);
        int int74 = fibonacciHeap36.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test4565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4565");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        java.lang.Class<?> wildcardClass7 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test4566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4566");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        int int24 = fibonacciHeap0.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int46 = fibonacciHeap45.size();
        fibonacciHeap26.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap26.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap52.insert(0);
        fibonacciHeap52.deleteMin();
        fibonacciHeap49.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap49.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap49.insert((int) ' ');
        fibonacciHeap0.delete(heapNode61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap0.new HeapNode(3);
        int int65 = heapNode64.key;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
    }

    @Test
    public void test4567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4567");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode((int) (short) 100);
        fibonacciHeap4.delete(heapNode21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap40.insert(0);
        fibonacciHeap37.delete(heapNode43);
        fibonacciHeap27.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap37.insert(100);
        fibonacciHeap4.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        int int51 = fibonacciHeap37.size();
        boolean boolean52 = fibonacciHeap37.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test4568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4568");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        boolean boolean12 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        int[] intArray20 = fibonacciHeap17.countersRep();
        int int21 = fibonacciHeap17.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap17.new HeapNode(0);
        int int24 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap17.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap17.findMin();
        int int28 = heapNode27.getKey();
        heapNode27.key = 9;
        heapNode27.key = (short) -1;
        fibonacciHeap1.delete(heapNode27);
        int int34 = fibonacciHeap1.potential();
        int int35 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test4569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4569");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        int int15 = heapNode14.key;
        int int16 = heapNode14.key;
        heapNode14.key = (-1);
        int int19 = heapNode14.getKey();
        fibonacciHeap10.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode((int) (byte) 100);
        int[] intArray36 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode(0);
        fibonacciHeap38.meld(fibonacciHeap50);
        int[] intArray56 = fibonacciHeap50.countersRep();
        boolean boolean57 = fibonacciHeap50.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap50.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap50.insert(100);
        fibonacciHeap31.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap64.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap64.new HeapNode(10);
        heapNode68.key = 100;
        int int71 = heapNode68.getKey();
        fibonacciHeap31.delete(heapNode68);
        fibonacciHeap10.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap10.new HeapNode((int) (short) -1);
        int[] intArray76 = fibonacciHeap10.countersRep();
        int[] intArray77 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap10.new HeapNode((int) (short) -1);
        fibonacciHeap4.delete(heapNode79);
        heapNode79.key = 'a';
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 0]");
    }

    @Test
    public void test4570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4570");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        java.lang.Class<?> wildcardClass9 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test4571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4571");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode(10);
        int int10 = fibonacciHeap5.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap5.new HeapNode((int) (byte) 0);
        int int13 = heapNode12.getKey();
        int int14 = heapNode12.key;
        fibonacciHeap1.delete(heapNode12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        fibonacciHeap33.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode(0);
        fibonacciHeap21.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        fibonacciHeap33.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        fibonacciHeap40.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap44.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap44.new HeapNode(7);
        fibonacciHeap17.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap17.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap17.findMin();
        fibonacciHeap1.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap1.insert(1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertNotNull(heapNode70);
        org.junit.Assert.assertNotNull(heapNode73);
    }

    @Test
    public void test4572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4572");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap1.insert(3);
        heapNode19.key = 8;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
    }

    @Test
    public void test4573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4573");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap18.countersRep();
        boolean boolean25 = fibonacciHeap18.empty();
        fibonacciHeap1.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap30.insert(1);
        int int33 = heapNode32.key;
        int int34 = heapNode32.key;
        heapNode32.key = (-1);
        int int37 = heapNode32.getKey();
        fibonacciHeap28.delete(heapNode32);
        int int39 = fibonacciHeap28.size();
        boolean boolean40 = fibonacciHeap28.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap28.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap28.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap28.findMin();
        fibonacciHeap18.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap18.insert(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap18.findMin();
        fibonacciHeap18.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(heapNode41);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(heapNode48);
    }

    @Test
    public void test4574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4574");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap29.new HeapNode(0);
        fibonacciHeap17.meld(fibonacciHeap29);
        int[] intArray35 = fibonacciHeap29.countersRep();
        boolean boolean36 = fibonacciHeap29.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap29.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap29.insert(100);
        fibonacciHeap10.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap43.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap43.new HeapNode(10);
        heapNode47.key = 100;
        int int50 = heapNode47.getKey();
        fibonacciHeap10.delete(heapNode47);
        int int52 = fibonacciHeap10.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test4575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4575");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        fibonacciHeap16.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        fibonacciHeap23.meld(fibonacciHeap27);
        int[] intArray46 = fibonacciHeap27.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap27.findMin();
        int int48 = fibonacciHeap27.potential();
        fibonacciHeap1.meld(fibonacciHeap27);
        int[] intArray50 = fibonacciHeap27.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap27.insert((int) (byte) 1);
        java.lang.Class<?> wildcardClass53 = heapNode52.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[5, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test4576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4576");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.findMin();
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        int int16 = fibonacciHeap11.size();
        int[] intArray17 = fibonacciHeap11.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap19.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap26.insert(0);
        fibonacciHeap23.delete(heapNode29);
        fibonacciHeap19.delete(heapNode29);
        heapNode29.key = ' ';
        fibonacciHeap11.delete(heapNode29);
        int int35 = heapNode29.getKey();
        int int36 = heapNode29.getKey();
        fibonacciHeap1.delete(heapNode29);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1]");
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test4577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4577");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert((int) ' ');
        int int28 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.new HeapNode((int) (byte) -1);
        boolean boolean31 = fibonacciHeap4.empty();
        int int32 = fibonacciHeap4.size();
        int[] intArray33 = fibonacciHeap4.countersRep();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[4, 0, 0]");
    }

    @Test
    public void test4578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4578");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        int int4 = heapNode3.getKey();
        int int5 = heapNode3.getKey();
        java.lang.Class<?> wildcardClass6 = heapNode3.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test4579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4579");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        int[] intArray26 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[7, 0, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test4580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4580");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap13.potential();
        int int20 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int23 = fibonacciHeap22.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap41.insert(0);
        fibonacciHeap38.delete(heapNode44);
        fibonacciHeap28.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap38.insert(100);
        fibonacciHeap22.meld(fibonacciHeap38);
        fibonacciHeap13.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap53.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        fibonacciHeap65.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap65.new HeapNode(0);
        fibonacciHeap53.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        fibonacciHeap65.meld(fibonacciHeap72);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap76.meld(fibonacciHeap82);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap85 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int86 = fibonacciHeap85.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap88 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap85.meld(fibonacciHeap88);
        fibonacciHeap88.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap88.new HeapNode(0);
        fibonacciHeap76.meld(fibonacciHeap88);
        fibonacciHeap72.meld(fibonacciHeap76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode96 = fibonacciHeap72.new HeapNode((int) (short) 10);
        heapNode96.key = (short) 0;
        fibonacciHeap38.delete(heapNode96);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test4581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4581");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.insert(4);
        fibonacciHeap1.deleteMin();
        int[] intArray23 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        boolean boolean25 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test4582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4582");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(3);
        int[] intArray2 = fibonacciHeap1.countersRep();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test4583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4583");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.new HeapNode((int) 'a');
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4584");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        int int36 = fibonacciHeap31.size();
        fibonacciHeap31.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap31);
        boolean boolean39 = fibonacciHeap31.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap51.insert(0);
        fibonacciHeap48.delete(heapNode54);
        fibonacciHeap44.delete(heapNode54);
        fibonacciHeap41.delete(heapNode54);
        int[] intArray58 = fibonacciHeap41.countersRep();
        int int59 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap41.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap41.new HeapNode((int) (byte) 100);
        int int63 = fibonacciHeap41.size();
        fibonacciHeap31.meld(fibonacciHeap41);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(heapNode60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test4585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4585");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        boolean boolean13 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap1.findMin();
        int int15 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int18 = fibonacciHeap17.potential();
        int int19 = fibonacciHeap17.size();
        int[] intArray20 = fibonacciHeap17.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int23 = fibonacciHeap22.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap41.insert(0);
        fibonacciHeap38.delete(heapNode44);
        fibonacciHeap28.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap38.insert(100);
        fibonacciHeap22.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap22.new HeapNode(100);
        int int53 = heapNode52.key;
        fibonacciHeap17.delete(heapNode52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap17.findMin();
        fibonacciHeap1.meld(fibonacciHeap17);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNull(heapNode55);
    }

    @Test
    public void test4586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4586");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        int int37 = fibonacciHeap29.potential();
        int int38 = fibonacciHeap29.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test4587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4587");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        int[] intArray37 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.new HeapNode((int) (short) 1);
        int[] intArray42 = fibonacciHeap39.countersRep();
        fibonacciHeap13.meld(fibonacciHeap39);
        boolean boolean44 = fibonacciHeap13.empty();
        int int45 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap48.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        fibonacciHeap60.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap60.new HeapNode(0);
        fibonacciHeap48.meld(fibonacciHeap60);
        int[] intArray66 = fibonacciHeap48.countersRep();
        int int67 = fibonacciHeap48.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int70 = fibonacciHeap69.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap72.insert(0);
        fibonacciHeap69.delete(heapNode75);
        fibonacciHeap48.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap69.new HeapNode(2);
        int int80 = heapNode79.getKey();
        int int81 = heapNode79.key;
        int int82 = heapNode79.getKey();
        int int83 = heapNode79.key;
        fibonacciHeap13.delete(heapNode79);
        int int85 = heapNode79.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(heapNode75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test4588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4588");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap13.insert(0);
        fibonacciHeap10.delete(heapNode16);
        fibonacciHeap6.delete(heapNode16);
        fibonacciHeap1.delete(heapNode16);
        int[] intArray20 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap25.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap1.delete(heapNode37);
        java.lang.Class<?> wildcardClass39 = heapNode37.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test4589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4589");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        int[] intArray13 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        heapNode28.key = 2;
        int int31 = heapNode28.getKey();
        int int32 = heapNode28.key;
        heapNode28.key = (-1);
        heapNode28.key = '4';
        fibonacciHeap1.delete(heapNode28);
        int int38 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.findMin();
        int int40 = heapNode39.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test4590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4590");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        heapNode22.key = (byte) 10;
        int int25 = heapNode22.getKey();
        heapNode22.key = 0;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test4591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4591");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        boolean boolean26 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap24.new HeapNode(9);
        int int30 = heapNode29.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
    }

    @Test
    public void test4592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4592");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap3.new HeapNode(10);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        fibonacciHeap26.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.meld(fibonacciHeap26);
        int[] intArray32 = fibonacciHeap26.countersRep();
        boolean boolean33 = fibonacciHeap26.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap26.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap37.findMin();
        int int39 = heapNode38.key;
        fibonacciHeap26.delete(heapNode38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap42.new HeapNode((int) (short) 0);
        fibonacciHeap26.meld(fibonacciHeap42);
        int[] intArray50 = fibonacciHeap26.countersRep();
        int int51 = fibonacciHeap26.potential();
        fibonacciHeap1.meld(fibonacciHeap26);
        int int53 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
    }

    @Test
    public void test4593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4593");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        int[] intArray6 = fibonacciHeap1.countersRep();
        int[] intArray7 = fibonacciHeap1.countersRep();
        int[] intArray8 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap12.new HeapNode(10);
        fibonacciHeap10.delete(heapNode16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap10.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap10.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        int[] intArray41 = fibonacciHeap35.countersRep();
        boolean boolean42 = fibonacciHeap35.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap35.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap46.findMin();
        int int48 = heapNode47.key;
        fibonacciHeap35.delete(heapNode47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap51.new HeapNode((int) (short) 0);
        fibonacciHeap35.meld(fibonacciHeap51);
        int[] intArray59 = fibonacciHeap35.countersRep();
        int int60 = fibonacciHeap35.potential();
        fibonacciHeap10.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap63.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int70 = fibonacciHeap69.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap69.meld(fibonacciHeap72);
        fibonacciHeap66.meld(fibonacciHeap72);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap66.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap66.new HeapNode(0);
        int int79 = heapNode78.key;
        fibonacciHeap10.delete(heapNode78);
        boolean boolean81 = fibonacciHeap10.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap10.findMin();
        fibonacciHeap1.meld(fibonacciHeap10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1]");
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(heapNode82);
    }

    @Test
    public void test4594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4594");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray21 = fibonacciHeap20.countersRep();
        fibonacciHeap20.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        int int24 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.findMin();
        int[] intArray28 = fibonacciHeap20.countersRep();
        java.lang.Class<?> wildcardClass29 = fibonacciHeap20.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(heapNode27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test4595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4595");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        boolean boolean12 = fibonacciHeap1.empty();
        int int13 = fibonacciHeap1.potential();
        boolean boolean14 = fibonacciHeap1.empty();
        int int15 = fibonacciHeap1.size();
        boolean boolean16 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test4596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4596");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        fibonacciHeap32.meld(fibonacciHeap39);
        fibonacciHeap1.meld(fibonacciHeap39);
        boolean boolean43 = fibonacciHeap1.empty();
        java.lang.Class<?> wildcardClass44 = fibonacciHeap1.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test4597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4597");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap13.insert(0);
        fibonacciHeap10.delete(heapNode16);
        fibonacciHeap6.delete(heapNode16);
        fibonacciHeap1.delete(heapNode16);
        int[] intArray20 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap25.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap1.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(heapNode39);
    }

    @Test
    public void test4598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4598");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        int[] intArray34 = fibonacciHeap24.countersRep();
        fibonacciHeap4.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap53.insert(0);
        fibonacciHeap50.delete(heapNode56);
        fibonacciHeap40.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap50.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap63.insert(1);
        int int66 = heapNode65.key;
        int int67 = heapNode65.key;
        fibonacciHeap50.delete(heapNode65);
        fibonacciHeap24.meld(fibonacciHeap50);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap24.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap74 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap74.deleteMin();
        int int76 = fibonacciHeap74.size();
        fibonacciHeap74.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap74.new HeapNode(2);
        fibonacciHeap24.meld(fibonacciHeap74);
        int int81 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap24.new HeapNode(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(heapNode72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test4599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4599");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.new HeapNode((int) (short) 10);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap1.new HeapNode((int) '#');
        heapNode18.key = (byte) 0;
        int int21 = heapNode18.getKey();
        int int22 = heapNode18.key;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test4600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4600");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        int int15 = fibonacciHeap10.size();
        int[] intArray16 = fibonacciHeap10.countersRep();
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap10.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap21.insert(1);
        boolean boolean24 = fibonacciHeap21.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap21.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap21.new HeapNode((int) '#');
        fibonacciHeap10.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap10.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(heapNode30);
    }

    @Test
    public void test4601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4601");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        heapNode7.key = (short) -1;
        int int10 = heapNode7.key;
        int int11 = heapNode7.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test4602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4602");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        int int26 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        int int28 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap4.insert(35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode32);
    }

    @Test
    public void test4603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4603");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int[] intArray15 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap24.delete(heapNode30);
        fibonacciHeap20.delete(heapNode30);
        heapNode30.key = ' ';
        int int35 = heapNode30.getKey();
        fibonacciHeap17.delete(heapNode30);
        int int37 = fibonacciHeap17.potential();
        boolean boolean38 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap17.insert((int) (short) 100);
        fibonacciHeap1.meld(fibonacciHeap17);
        int int42 = fibonacciHeap1.size();
        java.lang.Class<?> wildcardClass43 = fibonacciHeap1.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test4604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4604");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        boolean boolean11 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.insert(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap21.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap28.insert(0);
        fibonacciHeap25.delete(heapNode31);
        fibonacciHeap21.delete(heapNode31);
        heapNode31.key = ' ';
        int int36 = heapNode31.getKey();
        fibonacciHeap18.delete(heapNode31);
        heapNode31.key = '4';
        int int40 = heapNode31.getKey();
        heapNode31.key = 52;
        fibonacciHeap4.delete(heapNode31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNull(heapNode44);
    }

    @Test
    public void test4605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4605");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        int[] intArray34 = fibonacciHeap24.countersRep();
        fibonacciHeap4.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.findMin();
        fibonacciHeap37.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap37);
        int[] intArray42 = fibonacciHeap37.countersRep();
        int int43 = fibonacciHeap37.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap48.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap55.insert(0);
        fibonacciHeap52.delete(heapNode58);
        fibonacciHeap48.delete(heapNode58);
        fibonacciHeap45.delete(heapNode58);
        int[] intArray62 = fibonacciHeap45.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap64.new HeapNode((int) (short) 1);
        fibonacciHeap45.meld(fibonacciHeap64);
        fibonacciHeap37.meld(fibonacciHeap64);
        java.lang.Class<?> wildcardClass69 = fibonacciHeap37.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test4606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4606");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap27.new HeapNode((int) 'a');
        int int35 = fibonacciHeap27.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.findMin();
        int int40 = fibonacciHeap37.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap41.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode((int) (short) 100);
        boolean boolean46 = fibonacciHeap41.empty();
        fibonacciHeap37.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap37.new HeapNode(52);
        fibonacciHeap27.meld(fibonacciHeap37);
        java.lang.Class<?> wildcardClass51 = fibonacciHeap37.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test4607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4607");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap4.insert(97);
        int int18 = fibonacciHeap4.size();
        int int19 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap4.insert(8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        fibonacciHeap35.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap46.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        fibonacciHeap58.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap58.new HeapNode(0);
        fibonacciHeap46.meld(fibonacciHeap58);
        fibonacciHeap42.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap66.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int71 = fibonacciHeap70.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int74 = fibonacciHeap73.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap73.insert(0);
        fibonacciHeap70.delete(heapNode76);
        fibonacciHeap66.delete(heapNode76);
        boolean boolean79 = fibonacciHeap66.empty();
        fibonacciHeap42.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap42.insert(52);
        int int83 = heapNode82.key;
        int int84 = heapNode82.key;
        heapNode82.key = (short) 1;
        fibonacciHeap4.delete(heapNode82);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(heapNode76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(heapNode82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
    }

    @Test
    public void test4608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4608");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode((int) '#');
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap13.size();
        boolean boolean20 = fibonacciHeap13.empty();
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        int[] intArray24 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
    }

    @Test
    public void test4609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4609");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        heapNode4.key = '4';
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test4610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4610");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        int int2 = fibonacciHeap1.size();
        int int3 = fibonacciHeap1.potential();
        int int4 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test4611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4611");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.insert(1);
        boolean boolean9 = fibonacciHeap6.empty();
        fibonacciHeap6.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        int int15 = heapNode14.getKey();
        int int16 = heapNode14.key;
        heapNode14.key = (byte) -1;
        int int19 = heapNode14.key;
        fibonacciHeap6.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        int int30 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap28.new HeapNode((int) '#');
        int int33 = fibonacciHeap28.potential();
        fibonacciHeap6.meld(fibonacciHeap28);
        int int35 = fibonacciHeap28.potential();
        fibonacciHeap1.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        int[] intArray40 = fibonacciHeap38.countersRep();
        int int41 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap38.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap38.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(10);
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap54.new HeapNode((int) (short) 0);
        heapNode60.key = (byte) 100;
        heapNode60.key = (-1);
        fibonacciHeap47.delete(heapNode60);
        fibonacciHeap47.deleteMin();
        fibonacciHeap38.meld(fibonacciHeap47);
        int[] intArray68 = fibonacciHeap47.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap47.insert(32);
        fibonacciHeap1.meld(fibonacciHeap47);
        fibonacciHeap47.deleteMin();
        int[] intArray73 = fibonacciHeap47.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(heapNode70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
    }

    @Test
    public void test4612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4612");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap16.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        int[] intArray38 = fibonacciHeap20.countersRep();
        fibonacciHeap16.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap16.new HeapNode((int) 'a');
        fibonacciHeap10.delete(heapNode41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap10.insert((int) (short) 1);
        heapNode44.key = '#';
        int int47 = heapNode44.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
    }

    @Test
    public void test4613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4613");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        int int25 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap27.new HeapNode((int) (short) 0);
        int int34 = fibonacciHeap27.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.insert(0);
        fibonacciHeap43.delete(heapNode49);
        fibonacciHeap39.delete(heapNode49);
        fibonacciHeap36.delete(heapNode49);
        fibonacciHeap27.delete(heapNode49);
        int[] intArray54 = fibonacciHeap27.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap27.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap27.new HeapNode((int) (short) -1);
        fibonacciHeap13.delete(heapNode58);
        int int60 = heapNode58.key;
        int int61 = heapNode58.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1]");
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test4614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4614");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        int int35 = fibonacciHeap24.size();
        int int36 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap24.findMin();
        int[] intArray38 = fibonacciHeap24.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[6, 0]");
    }

    @Test
    public void test4615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4615");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        boolean boolean49 = fibonacciHeap4.empty();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test4616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4616");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        heapNode4.key = 0;
        heapNode4.key = (short) 1;
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode4);
    }

    @Test
    public void test4617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4617");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        int int16 = fibonacciHeap14.potential();
        int int17 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap19.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap31.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap31.new HeapNode(32);
        fibonacciHeap14.delete(heapNode40);
        int int42 = heapNode40.key;
        fibonacciHeap1.delete(heapNode40);
        int[] intArray44 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int47 = fibonacciHeap46.potential();
        fibonacciHeap46.deleteMin();
        int int49 = fibonacciHeap46.size();
        fibonacciHeap1.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap1.findMin();
        java.lang.Class<?> wildcardClass52 = heapNode51.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test4618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4618");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.new HeapNode((int) (short) 10);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap1.new HeapNode((int) '#');
        int int19 = heapNode18.key;
        int int20 = heapNode18.getKey();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    }

    @Test
    public void test4619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4619");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap0.new HeapNode((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap0.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap0.findMin();
        int int29 = heapNode28.getKey();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test4620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4620");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap10.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode(10);
        fibonacciHeap10.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap17.new HeapNode((int) (short) 0);
        heapNode23.key = (byte) 100;
        heapNode23.key = (-1);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap10.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        int[] intArray34 = fibonacciHeap32.countersRep();
        int int35 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap32.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap32.new HeapNode(10);
        fibonacciHeap10.meld(fibonacciHeap32);
        int[] intArray41 = fibonacciHeap10.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2, 0]");
    }

    @Test
    public void test4621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4621");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap90 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 0);
        fibonacciHeap67.meld(fibonacciHeap90);
        int[] intArray92 = fibonacciHeap90.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode94 = fibonacciHeap90.new HeapNode((int) 'a');
        int[] intArray95 = fibonacciHeap90.countersRep();
        boolean boolean96 = fibonacciHeap90.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[10]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[10]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4622");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        boolean boolean11 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.insert(1);
        int int20 = heapNode19.key;
        int int21 = heapNode19.key;
        heapNode19.key = (-1);
        int int24 = heapNode19.getKey();
        fibonacciHeap15.delete(heapNode19);
        int int26 = fibonacciHeap15.size();
        int int27 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        fibonacciHeap41.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode(0);
        fibonacciHeap29.meld(fibonacciHeap41);
        int[] intArray47 = fibonacciHeap29.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap29.findMin();
        boolean boolean50 = fibonacciHeap29.empty();
        fibonacciHeap15.meld(fibonacciHeap29);
        fibonacciHeap7.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap7.new HeapNode(6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap7.insert((int) (byte) 10);
        heapNode56.key = (byte) 100;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(heapNode56);
    }

    @Test
    public void test4623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4623");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        boolean boolean8 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) -1);
        int int11 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        int int26 = heapNode23.getKey();
        heapNode23.key = (short) -1;
        int int29 = heapNode23.key;
        fibonacciHeap1.delete(heapNode23);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test4624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4624");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.new HeapNode(32);
        fibonacciHeap7.delete(heapNode33);
        boolean boolean35 = fibonacciHeap7.empty();
        fibonacciHeap7.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap7.new HeapNode(4);
        int int39 = heapNode38.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(heapNode31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
    }

    @Test
    public void test4625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4625");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) 0);
        heapNode6.key = 100;
        org.junit.Assert.assertNotNull(heapNode6);
    }

    @Test
    public void test4626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4626");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(32);
        int int11 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        heapNode13.key = 1;
        int int16 = heapNode13.key;
        heapNode13.key = 2;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test4627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4627");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode((int) '#');
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap13.size();
        int int20 = fibonacciHeap13.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test4628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4628");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        boolean boolean8 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) -1);
        int int11 = fibonacciHeap1.potential();
        int int12 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        int int22 = fibonacciHeap20.potential();
        int int23 = fibonacciHeap20.size();
        boolean boolean24 = fibonacciHeap20.empty();
        int[] intArray25 = fibonacciHeap20.countersRep();
        fibonacciHeap1.meld(fibonacciHeap20);
        int[] intArray27 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[3]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[5, 0, 0]");
    }

    @Test
    public void test4629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4629");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        int int4 = heapNode3.key;
        int int5 = heapNode3.key;
        heapNode3.key = (-1);
        int int8 = heapNode3.key;
        int int9 = heapNode3.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test4630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4630");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        int[] intArray9 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.findMin();
        int int11 = fibonacciHeap4.potential();
        boolean boolean12 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode(52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap4.findMin();
        int[] intArray16 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(heapNode15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNull(heapNode17);
    }

    @Test
    public void test4631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4631");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap16.insert(0);
        fibonacciHeap13.delete(heapNode19);
        fibonacciHeap9.delete(heapNode19);
        boolean boolean22 = fibonacciHeap9.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        fibonacciHeap9.meld(fibonacciHeap24);
        fibonacciHeap7.meld(fibonacciHeap9);
        int int28 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int31 = fibonacciHeap30.potential();
        fibonacciHeap30.deleteMin();
        int[] intArray33 = fibonacciHeap30.countersRep();
        int int34 = fibonacciHeap30.potential();
        fibonacciHeap9.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap9.findMin();
        boolean boolean37 = fibonacciHeap9.empty();
        int int38 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap9.insert((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap42.meld(fibonacciHeap48);
        int int50 = fibonacciHeap48.potential();
        int int51 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap53.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        fibonacciHeap65.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap65.new HeapNode(0);
        fibonacciHeap53.meld(fibonacciHeap65);
        int[] intArray71 = fibonacciHeap65.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap65.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap65.new HeapNode(32);
        fibonacciHeap48.delete(heapNode74);
        boolean boolean76 = fibonacciHeap48.empty();
        fibonacciHeap48.deleteMin();
        boolean boolean78 = fibonacciHeap48.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode80 = fibonacciHeap48.new HeapNode(35);
        fibonacciHeap9.delete(heapNode80);
        fibonacciHeap1.delete(heapNode80);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNull(heapNode72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test4632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4632");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap29.new HeapNode(0);
        fibonacciHeap17.meld(fibonacciHeap29);
        int[] intArray35 = fibonacciHeap29.countersRep();
        boolean boolean36 = fibonacciHeap29.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap29.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap29.insert(100);
        fibonacciHeap10.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap43.meld(fibonacciHeap49);
        int int51 = fibonacciHeap49.potential();
        int int52 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap53.new HeapNode((int) '#');
        fibonacciHeap49.delete(heapNode55);
        int int57 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap49.new HeapNode((int) 'a');
        fibonacciHeap10.delete(heapNode59);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test4633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4633");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((int) (short) 10);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.findMin();
        int[] intArray12 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
    }

    @Test
    public void test4634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4634");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        fibonacciHeap1.deleteMin();
        int int20 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray23 = fibonacciHeap22.countersRep();
        boolean boolean24 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode((int) ' ');
        fibonacciHeap1.meld(fibonacciHeap22);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4635");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        heapNode6.key = (byte) 1;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test4636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4636");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        int int22 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.potential();
        fibonacciHeap24.deleteMin();
        int[] intArray27 = fibonacciHeap24.countersRep();
        int int28 = fibonacciHeap24.potential();
        fibonacciHeap3.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap3.findMin();
        int int31 = fibonacciHeap3.size();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test4637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4637");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        fibonacciHeap35.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap35.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.delete(heapNode47);
        fibonacciHeap3.meld(fibonacciHeap23);
        fibonacciHeap3.deleteMin();
        fibonacciHeap3.deleteMin();
        int[] intArray52 = fibonacciHeap3.countersRep();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1]");
    }

    @Test
    public void test4638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4638");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        heapNode3.key = 7;
        org.junit.Assert.assertNotNull(heapNode3);
    }

    @Test
    public void test4639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4639");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int int7 = fibonacciHeap4.potential();
        int[] intArray8 = fibonacciHeap4.countersRep();
        int[] intArray9 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(heapNode10);
    }

    @Test
    public void test4640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4640");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode(0);
        fibonacciHeap38.meld(fibonacciHeap50);
        int int56 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int62 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap61.insert(0);
        fibonacciHeap58.delete(heapNode64);
        heapNode64.key = (short) 1;
        int int68 = heapNode64.key;
        fibonacciHeap38.delete(heapNode64);
        fibonacciHeap13.delete(heapNode64);
        int int71 = fibonacciHeap13.potential();
        int int72 = fibonacciHeap13.potential();
        int[] intArray73 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1]");
    }

    @Test
    public void test4641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4641");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        int[] intArray4 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) 'a');
        int int7 = heapNode6.key;
        java.lang.Class<?> wildcardClass8 = heapNode6.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1]");
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test4642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4642");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        int[] intArray28 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap1.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap1.new HeapNode((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        int int40 = heapNode39.key;
        fibonacciHeap34.delete(heapNode39);
        heapNode39.key = (byte) 10;
        int int44 = heapNode39.key;
        fibonacciHeap1.delete(heapNode39);
        int int46 = fibonacciHeap1.potential();
        int int47 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap49.deleteMin();
        fibonacciHeap49.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        int int58 = fibonacciHeap53.size();
        fibonacciHeap49.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap49.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap49.new HeapNode((int) (short) 10);
        int[] intArray64 = fibonacciHeap49.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap49.insert((int) (short) -1);
        int int67 = heapNode66.getKey();
        fibonacciHeap1.delete(heapNode66);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test4643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4643");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap0.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap0.findMin();
        fibonacciHeap0.deleteMin();
        int[] intArray6 = fibonacciHeap0.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap0.insert(32);
        int[] intArray9 = fibonacciHeap0.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap0.new HeapNode((int) (short) -1);
        int int12 = fibonacciHeap0.potential();
        org.junit.Assert.assertNull(heapNode3);
        org.junit.Assert.assertNull(heapNode4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test4644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4644");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int int15 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap18.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        fibonacciHeap30.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap41.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        fibonacciHeap53.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap53.new HeapNode(0);
        fibonacciHeap41.meld(fibonacciHeap53);
        fibonacciHeap37.meld(fibonacciHeap41);
        int[] intArray60 = fibonacciHeap41.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap41.findMin();
        int int62 = fibonacciHeap41.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int65 = fibonacciHeap64.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap64.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int71 = fibonacciHeap70.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap70.meld(fibonacciHeap73);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap67.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int80 = fibonacciHeap79.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap79.meld(fibonacciHeap82);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap85 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap79.meld(fibonacciHeap85);
        fibonacciHeap67.meld(fibonacciHeap79);
        int int88 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap67.insert(10);
        fibonacciHeap41.meld(fibonacciHeap67);
        fibonacciHeap1.meld(fibonacciHeap41);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
        org.junit.Assert.assertNotNull(heapNode90);
    }

    @Test
    public void test4645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4645");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap7.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap17.insert(100);
        fibonacciHeap1.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap17.new HeapNode(9);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(heapNode28);
    }

    @Test
    public void test4646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4646");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        int[] intArray5 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(3);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNull(heapNode9);
    }

    @Test
    public void test4647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4647");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        fibonacciHeap46.meld(fibonacciHeap53);
        fibonacciHeap24.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap53.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap53.findMin();
        int int60 = heapNode59.key;
        int int61 = heapNode59.getKey();
        int int62 = heapNode59.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test4648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4648");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap24.new HeapNode(7);
        int int47 = fibonacciHeap24.potential();
        int int48 = fibonacciHeap24.size();
        int int49 = fibonacciHeap24.potential();
        int int50 = fibonacciHeap24.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
    }

    @Test
    public void test4649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4649");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap22.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap22.findMin();
        int int34 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap22.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test4650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4650");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        int int34 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap36.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap52.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap52.new HeapNode(0);
        fibonacciHeap40.meld(fibonacciHeap52);
        int[] intArray58 = fibonacciHeap40.countersRep();
        fibonacciHeap36.meld(fibonacciHeap40);
        fibonacciHeap29.meld(fibonacciHeap36);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap65.insert(0);
        int int69 = heapNode68.key;
        fibonacciHeap63.delete(heapNode68);
        heapNode68.key = (short) -1;
        fibonacciHeap29.delete(heapNode68);
        int[] intArray74 = fibonacciHeap29.countersRep();
        fibonacciHeap4.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap77 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int78 = fibonacciHeap77.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap80 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap77.meld(fibonacciHeap80);
        fibonacciHeap80.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap80.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode86 = fibonacciHeap80.new HeapNode(32);
        int int87 = fibonacciHeap80.size();
        fibonacciHeap4.meld(fibonacciHeap80);
        int[] intArray89 = fibonacciHeap4.countersRep();
        fibonacciHeap4.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[9, 1, 0, 0, 0]");
    }

    @Test
    public void test4651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4651");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int[] intArray43 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.findMin();
        int int45 = fibonacciHeap24.potential();
        int int46 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap48.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode(10);
        fibonacciHeap48.deleteMin();
        int int54 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap48.insert(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap58.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        fibonacciHeap70.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap70.new HeapNode(0);
        fibonacciHeap58.meld(fibonacciHeap70);
        int[] intArray76 = fibonacciHeap58.countersRep();
        int int77 = fibonacciHeap58.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int80 = fibonacciHeap79.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int83 = fibonacciHeap82.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap82.insert(0);
        fibonacciHeap79.delete(heapNode85);
        fibonacciHeap58.meld(fibonacciHeap79);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode89 = fibonacciHeap79.new HeapNode(2);
        int int90 = heapNode89.getKey();
        int int91 = heapNode89.getKey();
        int int92 = heapNode89.getKey();
        fibonacciHeap48.delete(heapNode89);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode95 = fibonacciHeap48.insert(32);
        fibonacciHeap24.delete(heapNode95);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(heapNode85);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(heapNode95);
    }

    @Test
    public void test4652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4652");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        int int89 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap24.insert((int) (byte) -1);
        boolean boolean93 = fibonacciHeap24.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test4653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4653");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap22.insert(1);
        boolean boolean25 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap30.insert(0);
        fibonacciHeap27.delete(heapNode33);
        heapNode33.key = (short) 1;
        fibonacciHeap22.delete(heapNode33);
        int int38 = fibonacciHeap22.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap22.insert(3);
        fibonacciHeap1.delete(heapNode40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap1.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        fibonacciHeap48.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap48.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap48.new HeapNode(0);
        int int61 = heapNode60.key;
        fibonacciHeap1.delete(heapNode60);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test4654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4654");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int24 = fibonacciHeap23.size();
        int int25 = fibonacciHeap23.potential();
        int int26 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap31.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode((int) (byte) 100);
        int[] intArray42 = fibonacciHeap37.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap37.new HeapNode(35);
        fibonacciHeap23.delete(heapNode44);
        boolean boolean46 = fibonacciHeap23.empty();
        fibonacciHeap23.deleteMin();
        fibonacciHeap10.meld(fibonacciHeap23);
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap10.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[4]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test4655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4655");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.findMin();
        int int23 = heapNode22.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test4656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4656");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.findMin();
        int int11 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test4657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4657");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.new HeapNode(3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(heapNode22);
    }

    @Test
    public void test4658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4658");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        fibonacciHeap13.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap33.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode((int) (short) 100);
        int int38 = fibonacciHeap33.size();
        fibonacciHeap13.meld(fibonacciHeap33);
        int[] intArray40 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap13.new HeapNode(3);
        boolean boolean43 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap13.findMin();
        int[] intArray45 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[4, 0, 0]");
    }

    @Test
    public void test4659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4659");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.findMin();
        int int7 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap11.insert(1);
        int int14 = heapNode13.key;
        int int15 = heapNode13.key;
        heapNode13.key = (-1);
        int int18 = heapNode13.getKey();
        fibonacciHeap9.delete(heapNode13);
        int int20 = fibonacciHeap9.size();
        boolean boolean21 = fibonacciHeap9.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap9.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap9.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap9.findMin();
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap28.insert(1);
        boolean boolean31 = fibonacciHeap28.empty();
        int int32 = fibonacciHeap28.size();
        int int33 = fibonacciHeap28.size();
        boolean boolean34 = fibonacciHeap28.empty();
        int int35 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap28.insert((int) (byte) 10);
        fibonacciHeap9.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap9.new HeapNode((int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(heapNode37);
    }

    @Test
    public void test4660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4660");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap1.findMin();
        int int20 = heapNode19.getKey();
        int int21 = heapNode19.getKey();
        int int22 = heapNode19.getKey();
        int int23 = heapNode19.key;
        heapNode19.key = (byte) 0;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test4661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4661");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap18.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        int[] intArray41 = fibonacciHeap35.countersRep();
        boolean boolean42 = fibonacciHeap35.empty();
        fibonacciHeap18.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap18.findMin();
        fibonacciHeap1.delete(heapNode44);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(heapNode44);
    }

    @Test
    public void test4662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4662");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap5.insert(5);
        fibonacciHeap1.delete(heapNode11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap14.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap14.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap35.insert(0);
        fibonacciHeap32.delete(heapNode38);
        fibonacciHeap22.meld(fibonacciHeap32);
        int[] intArray41 = fibonacciHeap22.countersRep();
        fibonacciHeap14.meld(fibonacciHeap22);
        fibonacciHeap1.meld(fibonacciHeap22);
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap22.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[4, 0]");
    }

    @Test
    public void test4663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4663");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        int[] intArray2 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertNotNull(heapNode3);
    }

    @Test
    public void test4664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4664");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        fibonacciHeap28.deleteMin();
        int[] intArray31 = fibonacciHeap28.countersRep();
        int int32 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap28.new HeapNode(1);
        boolean boolean35 = fibonacciHeap28.empty();
        fibonacciHeap1.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.insert((int) 'a');
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(heapNode39);
    }

    @Test
    public void test4665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4665");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int[] intArray43 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.findMin();
        int int45 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap50.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap50.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap62.meld(fibonacciHeap68);
        fibonacciHeap50.meld(fibonacciHeap62);
        int int71 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap50.insert(10);
        fibonacciHeap24.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        int[] intArray81 = fibonacciHeap76.countersRep();
        fibonacciHeap50.meld(fibonacciHeap76);
        int int83 = fibonacciHeap76.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap76.insert((int) (byte) 0);
        int int86 = heapNode85.getKey();
        int int87 = heapNode85.getKey();
        int int88 = heapNode85.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(heapNode85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test4666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4666");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        fibonacciHeap1.delete(heapNode14);
        int[] intArray18 = fibonacciHeap1.countersRep();
        int int19 = fibonacciHeap1.size();
        int[] intArray20 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.new HeapNode(7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNull(heapNode21);
        org.junit.Assert.assertNull(heapNode22);
    }

    @Test
    public void test4667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4667");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.new HeapNode((int) (short) 100);
        int int24 = heapNode23.key;
        int int25 = heapNode23.key;
        int int26 = heapNode23.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
    }

    @Test
    public void test4668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4668");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test4669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4669");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap3.insert(0);
        fibonacciHeap3.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap12.new HeapNode((int) (short) 10);
        fibonacciHeap3.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap12.new HeapNode(35);
        fibonacciHeap1.meld(fibonacciHeap12);
        int int27 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap35.findMin();
        int[] intArray38 = fibonacciHeap35.countersRep();
        int int39 = fibonacciHeap35.potential();
        fibonacciHeap1.meld(fibonacciHeap35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[3]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test4670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4670");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) (byte) 1);
    }

    @Test
    public void test4671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4671");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        int int49 = fibonacciHeap4.size();
        int int50 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
    }

    @Test
    public void test4672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4672");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap10.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap10.insert((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap36.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap36.findMin();
        int[] intArray39 = fibonacciHeap36.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap36.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap43.new HeapNode((int) (short) 0);
        fibonacciHeap43.deleteMin();
        boolean boolean51 = fibonacciHeap43.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap43.findMin();
        fibonacciHeap36.meld(fibonacciHeap43);
        int int54 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap56.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.insert(1);
        int int61 = heapNode60.key;
        heapNode60.key = (short) -1;
        fibonacciHeap43.delete(heapNode60);
        fibonacciHeap10.delete(heapNode60);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1]");
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test4673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4673");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        int int49 = fibonacciHeap39.potential();
        boolean boolean50 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap52.meld(fibonacciHeap55);
        fibonacciHeap55.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap55.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap55.new HeapNode(32);
        int int62 = fibonacciHeap55.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap55.insert((int) (short) 1);
        fibonacciHeap39.meld(fibonacciHeap55);
        int int66 = fibonacciHeap55.potential();
        int int67 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap55.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap55.insert(1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(heapNode69);
        org.junit.Assert.assertNotNull(heapNode71);
    }

    @Test
    public void test4674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4674");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        int int5 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int8 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        int int15 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap10.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        fibonacciHeap33.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode(0);
        fibonacciHeap21.meld(fibonacciHeap33);
        int[] intArray39 = fibonacciHeap21.countersRep();
        fibonacciHeap17.meld(fibonacciHeap21);
        fibonacciHeap10.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap43.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap52.meld(fibonacciHeap55);
        fibonacciHeap55.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap55.new HeapNode(0);
        fibonacciHeap43.meld(fibonacciHeap55);
        int[] intArray61 = fibonacciHeap55.countersRep();
        boolean boolean62 = fibonacciHeap55.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap55.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap66.findMin();
        int int68 = heapNode67.key;
        fibonacciHeap55.delete(heapNode67);
        fibonacciHeap10.delete(heapNode67);
        fibonacciHeap7.delete(heapNode67);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap1.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap1.new HeapNode(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(heapNode74);
    }

    @Test
    public void test4675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4675");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.findMin();
        int int27 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap28.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap28.new HeapNode((int) (short) 100);
        boolean boolean33 = fibonacciHeap28.empty();
        fibonacciHeap24.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap24.findMin();
        int int37 = heapNode36.getKey();
        fibonacciHeap13.delete(heapNode36);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test4676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4676");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        fibonacciHeap46.meld(fibonacciHeap53);
        fibonacciHeap24.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap53.findMin();
        int[] intArray58 = fibonacciHeap53.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap53.findMin();
        int int60 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap53.new HeapNode(32);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2]");
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test4677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4677");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int5 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.insert((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(heapNode7);
    }

    @Test
    public void test4678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4678");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode((int) (short) 0);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(heapNode20);
    }

    @Test
    public void test4679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4679");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.new HeapNode(0);
        int[] intArray17 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap4.insert(100);
        int int20 = heapNode19.key;
        heapNode19.key = 100;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test4680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4680");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int42 = fibonacciHeap41.size();
        fibonacciHeap22.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap22.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap45.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap1.new HeapNode(6);
        int[] intArray52 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[8, 0, 0]");
    }

    @Test
    public void test4681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4681");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.new HeapNode(2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test4682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4682");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.insert(1);
        boolean boolean26 = fibonacciHeap23.empty();
        int int27 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap28.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        int[] intArray50 = fibonacciHeap32.countersRep();
        fibonacciHeap28.meld(fibonacciHeap32);
        fibonacciHeap23.meld(fibonacciHeap32);
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap23.findMin();
        int[] intArray56 = fibonacciHeap23.countersRep();
        int int57 = fibonacciHeap23.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap59.insert(0);
        fibonacciHeap59.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap65.insert(1);
        int int68 = heapNode67.key;
        int int69 = heapNode67.key;
        fibonacciHeap59.delete(heapNode67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap72.meld(fibonacciHeap75);
        int int77 = fibonacciHeap72.size();
        fibonacciHeap59.meld(fibonacciHeap72);
        fibonacciHeap59.deleteMin();
        int[] intArray80 = fibonacciHeap59.countersRep();
        int int81 = fibonacciHeap59.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap59.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap59.findMin();
        boolean boolean84 = fibonacciHeap59.empty();
        fibonacciHeap23.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap59.insert((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(heapNode82);
        org.junit.Assert.assertNotNull(heapNode83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(heapNode87);
    }

    @Test
    public void test4683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4683");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int2 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.insert(1);
        boolean boolean8 = fibonacciHeap5.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap10.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap14.delete(heapNode20);
        fibonacciHeap10.delete(heapNode20);
        fibonacciHeap5.delete(heapNode20);
        int int24 = fibonacciHeap5.size();
        boolean boolean25 = fibonacciHeap5.empty();
        int int26 = fibonacciHeap5.potential();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap1.insert((int) ' ');
        boolean boolean30 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4684");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap2 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap2.new HeapNode((int) '#');
        fibonacciHeap1.delete(heapNode4);
        heapNode4.key = (short) 1;
        int int8 = heapNode4.getKey();
        int int9 = heapNode4.getKey();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test4685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4685");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
    }

    @Test
    public void test4686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4686");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.new HeapNode((int) (short) 10);
        int int43 = fibonacciHeap32.potential();
        fibonacciHeap24.meld(fibonacciHeap32);
        int int45 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap32.insert(52);
        int int48 = fibonacciHeap32.size();
        boolean boolean49 = fibonacciHeap32.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap32.insert((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(heapNode51);
    }

    @Test
    public void test4687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4687");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        boolean boolean12 = fibonacciHeap5.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap5.new HeapNode(0);
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.insert(1);
        boolean boolean20 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        heapNode28.key = (short) 1;
        fibonacciHeap17.delete(heapNode28);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int36 = fibonacciHeap35.size();
        int int37 = fibonacciHeap35.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.insert(52);
        fibonacciHeap17.meld(fibonacciHeap35);
        fibonacciHeap5.meld(fibonacciHeap17);
        int int42 = fibonacciHeap17.size();
        int int43 = fibonacciHeap17.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test4688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4688");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap6.insert(0);
        int int10 = heapNode9.key;
        fibonacciHeap4.delete(heapNode9);
        boolean boolean12 = fibonacciHeap4.empty();
        fibonacciHeap1.meld(fibonacciHeap4);
        int int14 = fibonacciHeap4.size();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4689");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode((int) (short) 100);
        fibonacciHeap4.delete(heapNode21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap40.insert(0);
        fibonacciHeap37.delete(heapNode43);
        fibonacciHeap27.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap37.insert(100);
        fibonacciHeap4.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap37.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertNotNull(heapNode50);
    }

    @Test
    public void test4690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4690");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        boolean boolean22 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        int int24 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        int int26 = fibonacciHeap1.potential();
        int int27 = fibonacciHeap1.size();
        int int28 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test4691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4691");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        int int20 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap34.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap34.findMin();
        fibonacciHeap15.meld(fibonacciHeap34);
        fibonacciHeap1.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap54.insert(0);
        fibonacciHeap51.delete(heapNode57);
        fibonacciHeap47.delete(heapNode57);
        boolean boolean60 = fibonacciHeap47.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        fibonacciHeap47.meld(fibonacciHeap62);
        fibonacciHeap45.meld(fibonacciHeap47);
        boolean boolean66 = fibonacciHeap45.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int69 = fibonacciHeap68.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap68.meld(fibonacciHeap71);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap74 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap68.meld(fibonacciHeap74);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap77 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int78 = fibonacciHeap77.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap80 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap77.meld(fibonacciHeap80);
        fibonacciHeap80.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap80.new HeapNode(0);
        fibonacciHeap68.meld(fibonacciHeap80);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap68.insert((-1));
        fibonacciHeap45.delete(heapNode87);
        int int89 = heapNode87.key;
        fibonacciHeap1.delete(heapNode87);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap93 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap1.meld(fibonacciHeap93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap.empty()\" because \"heap2\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(heapNode41);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test4692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4692");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.new HeapNode((int) ' ');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test4693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4693");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        int int7 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap4.new HeapNode(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap11.insert(1);
        int int14 = heapNode13.key;
        int int15 = heapNode13.key;
        heapNode13.key = (-1);
        int int18 = heapNode13.getKey();
        heapNode13.key = (byte) 1;
        heapNode13.key = (byte) 0;
        fibonacciHeap4.delete(heapNode13);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test4694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4694");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap7.new HeapNode(0);
        int int13 = fibonacciHeap7.size();
        int int14 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap7.insert((-1));
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
    }

    @Test
    public void test4695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4695");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        int int16 = fibonacciHeap14.potential();
        int int17 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap19.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap31.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap31.new HeapNode(32);
        fibonacciHeap14.delete(heapNode40);
        int int42 = heapNode40.key;
        fibonacciHeap1.delete(heapNode40);
        int[] intArray44 = fibonacciHeap1.countersRep();
        boolean boolean45 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap1.findMin();
        int int47 = heapNode46.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test4696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4696");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int int21 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.insert(3);
        int int24 = fibonacciHeap1.potential();
        boolean boolean25 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap1.insert(3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test4697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4697");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        boolean boolean37 = fibonacciHeap13.empty();
        int int38 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap43.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap50.insert(0);
        fibonacciHeap47.delete(heapNode53);
        fibonacciHeap43.delete(heapNode53);
        heapNode53.key = ' ';
        int int58 = heapNode53.getKey();
        fibonacciHeap40.delete(heapNode53);
        int int60 = fibonacciHeap40.potential();
        fibonacciHeap13.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap40.insert(35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 32 + "'", int58 == 32);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(heapNode63);
    }

    @Test
    public void test4698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4698");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        int[] intArray3 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        int[] intArray23 = fibonacciHeap5.countersRep();
        int int24 = fibonacciHeap5.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap29.insert(0);
        fibonacciHeap26.delete(heapNode32);
        fibonacciHeap5.meld(fibonacciHeap26);
        int[] intArray35 = fibonacciHeap26.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap26.new HeapNode(97);
        int int38 = fibonacciHeap26.potential();
        fibonacciHeap1.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap1.insert((int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(heapNode41);
    }

    @Test
    public void test4699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4699");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.size();
        boolean boolean21 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4700");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        int int34 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap36.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap52.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap52.new HeapNode(0);
        fibonacciHeap40.meld(fibonacciHeap52);
        int[] intArray58 = fibonacciHeap40.countersRep();
        fibonacciHeap36.meld(fibonacciHeap40);
        fibonacciHeap29.meld(fibonacciHeap36);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap65.insert(0);
        int int69 = heapNode68.key;
        fibonacciHeap63.delete(heapNode68);
        heapNode68.key = (short) -1;
        fibonacciHeap29.delete(heapNode68);
        int[] intArray74 = fibonacciHeap29.countersRep();
        fibonacciHeap4.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap77 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int78 = fibonacciHeap77.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap80 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap77.meld(fibonacciHeap80);
        fibonacciHeap80.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap80.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode86 = fibonacciHeap80.new HeapNode(32);
        int int87 = fibonacciHeap80.size();
        fibonacciHeap4.meld(fibonacciHeap80);
        int int89 = fibonacciHeap80.potential();
        int[] intArray90 = fibonacciHeap80.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
    }

    @Test
    public void test4701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4701");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap18.countersRep();
        boolean boolean25 = fibonacciHeap18.empty();
        fibonacciHeap1.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap18.insert(0);
        int[] intArray31 = fibonacciHeap18.countersRep();
        java.lang.Class<?> wildcardClass32 = fibonacciHeap18.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2, 0]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test4702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4702");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.potential();
        fibonacciHeap20.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test4703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4703");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray23 = fibonacciHeap22.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap22.new HeapNode((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap22.insert((int) (byte) -1);
        fibonacciHeap1.meld(fibonacciHeap22);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1]");
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
    }

    @Test
    public void test4704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4704");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap16.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        int[] intArray38 = fibonacciHeap20.countersRep();
        fibonacciHeap16.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap16.new HeapNode((int) 'a');
        fibonacciHeap10.delete(heapNode41);
        int int43 = fibonacciHeap10.size();
        int int44 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap10.findMin();
        int int46 = fibonacciHeap10.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(heapNode45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test4705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4705");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        boolean boolean13 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap18);
        int[] intArray30 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int52 = fibonacciHeap51.size();
        fibonacciHeap32.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap32.meld(fibonacciHeap55);
        int int57 = fibonacciHeap55.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap55.new HeapNode(0);
        fibonacciHeap1.delete(heapNode59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        boolean boolean64 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[4, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test4706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4706");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap9.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap9.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap17.insert((int) (short) -1);
        int int23 = fibonacciHeap17.size();
        int[] intArray24 = fibonacciHeap17.countersRep();
        fibonacciHeap9.meld(fibonacciHeap17);
        boolean boolean26 = fibonacciHeap9.empty();
        java.lang.Class<?> wildcardClass27 = fibonacciHeap9.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test4707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4707");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.findMin();
        int int14 = heapNode13.getKey();
        int int15 = heapNode13.getKey();
        heapNode13.key = (short) 1;
        int int18 = heapNode13.getKey();
        int int19 = heapNode13.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test4708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4708");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap11.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap23.new HeapNode(0);
        fibonacciHeap11.meld(fibonacciHeap23);
        int[] intArray29 = fibonacciHeap11.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap11.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.insert(1);
        boolean boolean35 = fibonacciHeap32.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap40.insert(0);
        fibonacciHeap37.delete(heapNode43);
        heapNode43.key = (short) 1;
        fibonacciHeap32.delete(heapNode43);
        int int48 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap32.insert(3);
        fibonacciHeap11.delete(heapNode50);
        fibonacciHeap1.meld(fibonacciHeap11);
        boolean boolean53 = fibonacciHeap1.empty();
        int int54 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray57 = fibonacciHeap56.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap56.new HeapNode(35);
        fibonacciHeap1.meld(fibonacciHeap56);
        int int61 = fibonacciHeap56.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test4709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4709");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap18.countersRep();
        boolean boolean25 = fibonacciHeap18.empty();
        fibonacciHeap1.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap30.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        fibonacciHeap42.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap42.new HeapNode(0);
        fibonacciHeap30.meld(fibonacciHeap42);
        int[] intArray48 = fibonacciHeap42.countersRep();
        int int49 = fibonacciHeap42.size();
        int int50 = fibonacciHeap42.size();
        fibonacciHeap18.meld(fibonacciHeap42);
        int int52 = fibonacciHeap42.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test4710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4710");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        int[] intArray52 = fibonacciHeap46.countersRep();
        boolean boolean53 = fibonacciHeap46.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap46.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap57.findMin();
        int int59 = heapNode58.key;
        fibonacciHeap46.delete(heapNode58);
        fibonacciHeap1.delete(heapNode58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap63.findMin();
        fibonacciHeap63.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap63.new HeapNode((int) (byte) 10);
        fibonacciHeap1.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap63.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertNull(heapNode70);
    }

    @Test
    public void test4711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4711");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap36.delete(heapNode42);
        fibonacciHeap32.delete(heapNode42);
        fibonacciHeap22.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap32.new HeapNode(35);
        int int48 = heapNode47.getKey();
        int int49 = heapNode47.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
    }

    @Test
    public void test4712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4712");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        int int24 = heapNode23.getKey();
        int int25 = heapNode23.key;
        int int26 = heapNode23.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
    }

    @Test
    public void test4713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4713");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        boolean boolean5 = fibonacciHeap1.empty();
        int int6 = fibonacciHeap1.size();
        int int7 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((-1));
        boolean boolean10 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test4714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4714");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap3.new HeapNode(10);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.findMin();
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean24 = fibonacciHeap13.empty();
        int[] intArray25 = fibonacciHeap13.countersRep();
        boolean boolean26 = fibonacciHeap13.empty();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[4, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4715");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        boolean boolean26 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap24.new HeapNode(9);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap24.delete(heapNode31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode.getKey()\" because \"x\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test4716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4716");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        boolean boolean23 = fibonacciHeap20.empty();
        int int24 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap26.insert(0);
        fibonacciHeap26.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        int int40 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode((int) '#');
        fibonacciHeap26.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap26.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap26.insert(32);
        fibonacciHeap20.meld(fibonacciHeap26);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode47);
    }

    @Test
    public void test4717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4717");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap15.insert(0);
        fibonacciHeap12.delete(heapNode18);
        fibonacciHeap8.delete(heapNode18);
        boolean boolean21 = fibonacciHeap8.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        fibonacciHeap8.meld(fibonacciHeap23);
        fibonacciHeap6.meld(fibonacciHeap8);
        boolean boolean27 = fibonacciHeap6.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap6.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap6.insert(35);
        fibonacciHeap1.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap6.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap6.insert(8);
        int int36 = fibonacciHeap6.potential();
        fibonacciHeap6.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap6.insert(6);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(heapNode39);
    }

    @Test
    public void test4718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4718");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int24 = fibonacciHeap23.size();
        fibonacciHeap4.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap30.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap37.insert(0);
        fibonacciHeap34.delete(heapNode40);
        fibonacciHeap30.delete(heapNode40);
        fibonacciHeap27.delete(heapNode40);
        fibonacciHeap4.delete(heapNode40);
        fibonacciHeap1.delete(heapNode40);
        int int46 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap1.new HeapNode(2);
        boolean boolean49 = fibonacciHeap1.empty();
        int int50 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test4719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4719");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.insert(1);
        boolean boolean20 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap22.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap29.insert(0);
        fibonacciHeap26.delete(heapNode32);
        fibonacciHeap22.delete(heapNode32);
        fibonacciHeap17.delete(heapNode32);
        fibonacciHeap15.delete(heapNode32);
        fibonacciHeap1.delete(heapNode32);
        int int38 = fibonacciHeap1.size();
        int int39 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode((int) (byte) 100);
        int[] intArray55 = fibonacciHeap50.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap56.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap60.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap60.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int70 = fibonacciHeap69.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap69.meld(fibonacciHeap72);
        fibonacciHeap72.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap72.new HeapNode(0);
        fibonacciHeap60.meld(fibonacciHeap72);
        int[] intArray78 = fibonacciHeap60.countersRep();
        fibonacciHeap56.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap56.new HeapNode((int) 'a');
        fibonacciHeap50.delete(heapNode81);
        fibonacciHeap50.deleteMin();
        int[] intArray84 = fibonacciHeap50.countersRep();
        fibonacciHeap1.meld(fibonacciHeap50);
        int[] intArray86 = fibonacciHeap50.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[4]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
    }

    @Test
    public void test4720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4720");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        int int35 = fibonacciHeap24.size();
        int int36 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap46.meld(fibonacciHeap52);
        int int55 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap46.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap58.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap58.new HeapNode((int) (short) 100);
        int int67 = heapNode66.key;
        fibonacciHeap46.delete(heapNode66);
        fibonacciHeap38.meld(fibonacciHeap46);
        fibonacciHeap24.meld(fibonacciHeap46);
        int[] intArray71 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int74 = fibonacciHeap73.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap73.meld(fibonacciHeap76);
        fibonacciHeap76.deleteMin();
        int[] intArray79 = fibonacciHeap76.countersRep();
        int int80 = fibonacciHeap76.potential();
        int[] intArray81 = fibonacciHeap76.countersRep();
        int[] intArray82 = fibonacciHeap76.countersRep();
        fibonacciHeap24.meld(fibonacciHeap76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap24.findMin();
        int int85 = heapNode84.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[8, 0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(heapNode84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test4721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4721");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int[] intArray15 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap24.delete(heapNode30);
        fibonacciHeap20.delete(heapNode30);
        heapNode30.key = ' ';
        int int35 = heapNode30.getKey();
        fibonacciHeap17.delete(heapNode30);
        int int37 = fibonacciHeap17.potential();
        boolean boolean38 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap17.insert((int) (short) 100);
        fibonacciHeap1.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertNotNull(heapNode42);
    }

    @Test
    public void test4722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4722");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap36.delete(heapNode42);
        fibonacciHeap32.delete(heapNode42);
        fibonacciHeap22.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap50.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode((int) (byte) 100);
        int[] intArray61 = fibonacciHeap56.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap63.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap63.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap72.meld(fibonacciHeap75);
        fibonacciHeap75.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap75.new HeapNode(0);
        fibonacciHeap63.meld(fibonacciHeap75);
        int[] intArray81 = fibonacciHeap75.countersRep();
        boolean boolean82 = fibonacciHeap75.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap75.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode86 = fibonacciHeap75.insert(100);
        fibonacciHeap56.meld(fibonacciHeap75);
        fibonacciHeap22.meld(fibonacciHeap56);
        boolean boolean89 = fibonacciHeap22.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(heapNode84);
        org.junit.Assert.assertNotNull(heapNode86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test4723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4723");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap13.insert(0);
        fibonacciHeap10.delete(heapNode16);
        fibonacciHeap6.delete(heapNode16);
        fibonacciHeap1.delete(heapNode16);
        heapNode16.key = 10;
        int int22 = heapNode16.getKey();
        int int23 = heapNode16.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test4724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4724");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap3.new HeapNode(10);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        fibonacciHeap26.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.meld(fibonacciHeap26);
        int[] intArray32 = fibonacciHeap26.countersRep();
        boolean boolean33 = fibonacciHeap26.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap26.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap37.findMin();
        int int39 = heapNode38.key;
        fibonacciHeap26.delete(heapNode38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap42.new HeapNode((int) (short) 0);
        fibonacciHeap26.meld(fibonacciHeap42);
        int[] intArray50 = fibonacciHeap26.countersRep();
        int int51 = fibonacciHeap26.potential();
        fibonacciHeap1.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap26.insert((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap26.new HeapNode((int) (short) 100);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(heapNode54);
    }

    @Test
    public void test4725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4725");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        heapNode11.key = (short) 1;
        int int15 = heapNode11.getKey();
        int int16 = heapNode11.key;
        int int17 = heapNode11.key;
        heapNode11.key = (byte) -1;
        heapNode11.key = (byte) 100;
        fibonacciHeap1.delete(heapNode11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        boolean boolean27 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap32.insert(0);
        fibonacciHeap29.delete(heapNode35);
        heapNode35.key = (short) 1;
        fibonacciHeap24.delete(heapNode35);
        int int40 = fibonacciHeap24.potential();
        boolean boolean41 = fibonacciHeap24.empty();
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert(4);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap47.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        fibonacciHeap59.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap59.new HeapNode(0);
        fibonacciHeap47.meld(fibonacciHeap59);
        int int65 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int71 = fibonacciHeap70.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap70.insert(0);
        fibonacciHeap67.delete(heapNode73);
        heapNode73.key = (short) 1;
        int int77 = heapNode73.key;
        fibonacciHeap47.delete(heapNode73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode80 = fibonacciHeap47.insert((int) (short) 1);
        boolean boolean81 = fibonacciHeap47.empty();
        fibonacciHeap24.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap47.findMin();
        int[] intArray84 = fibonacciHeap47.countersRep();
        int[] intArray85 = fibonacciHeap47.countersRep();
        fibonacciHeap1.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode88 = fibonacciHeap47.insert(4);
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(heapNode83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1, 0]");
        org.junit.Assert.assertNotNull(heapNode88);
    }

    @Test
    public void test4726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4726");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.insert((int) (short) 100);
        heapNode24.key = 4;
        int int27 = heapNode24.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test4727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4727");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int int15 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
    }

    @Test
    public void test4728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4728");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode(100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertNotNull(heapNode7);
    }

    @Test
    public void test4729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4729");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap7.insert((-1));
        fibonacciHeap1.meld(fibonacciHeap7);
        boolean boolean28 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap7.insert((-1));
        int int31 = heapNode30.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test4730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4730");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        int int7 = heapNode6.getKey();
        int int8 = heapNode6.key;
        java.lang.Class<?> wildcardClass9 = heapNode6.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test4731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4731");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int[] intArray15 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap24.delete(heapNode30);
        fibonacciHeap20.delete(heapNode30);
        heapNode30.key = ' ';
        int int35 = heapNode30.getKey();
        fibonacciHeap17.delete(heapNode30);
        int int37 = fibonacciHeap17.potential();
        boolean boolean38 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap17.insert((int) (short) 100);
        fibonacciHeap1.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        int[] intArray44 = fibonacciHeap17.countersRep();
        int[] intArray45 = fibonacciHeap17.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap17.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap48.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        fibonacciHeap60.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap60.new HeapNode(0);
        fibonacciHeap48.meld(fibonacciHeap60);
        int[] intArray66 = fibonacciHeap60.countersRep();
        int int67 = fibonacciHeap60.size();
        int int68 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap60.new HeapNode((int) '4');
        fibonacciHeap60.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap60.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap60.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap60.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap60.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap60.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap60.findMin();
        fibonacciHeap17.delete(heapNode79);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[2]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[2]");
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertNotNull(heapNode74);
        org.junit.Assert.assertNotNull(heapNode75);
        org.junit.Assert.assertNotNull(heapNode78);
        org.junit.Assert.assertNotNull(heapNode79);
    }

    @Test
    public void test4732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4732");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.insert((-1));
        fibonacciHeap1.delete(heapNode43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.findMin();
        int[] intArray46 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap48.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap48.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap48.insert(7);
        fibonacciHeap1.delete(heapNode53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap1.insert(35);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 1]");
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(heapNode58);
    }

    @Test
    public void test4733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4733");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) '4');
        boolean boolean5 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap14.insert(0);
        fibonacciHeap11.delete(heapNode17);
        fibonacciHeap7.delete(heapNode17);
        boolean boolean20 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap7.insert(3);
        boolean boolean23 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap7.insert((int) (short) 1);
        int[] intArray26 = fibonacciHeap7.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap7.findMin();
        fibonacciHeap1.meld(fibonacciHeap7);
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test4734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4734");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(32);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray8 = fibonacciHeap7.countersRep();
        boolean boolean9 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.new HeapNode((int) ' ');
        int[] intArray12 = fibonacciHeap7.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.findMin();
        fibonacciHeap1.delete(heapNode13);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1]");
        org.junit.Assert.assertNotNull(heapNode13);
    }

    @Test
    public void test4735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4735");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.insert(4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode25);
    }

    @Test
    public void test4736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4736");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        boolean boolean12 = fibonacciHeap5.empty();
        int int13 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap15.insert(1);
        boolean boolean18 = fibonacciHeap15.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap23.insert(0);
        fibonacciHeap20.delete(heapNode26);
        heapNode26.key = (short) 1;
        fibonacciHeap15.delete(heapNode26);
        int int31 = fibonacciHeap15.potential();
        boolean boolean32 = fibonacciHeap15.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray35 = fibonacciHeap34.countersRep();
        fibonacciHeap34.deleteMin();
        fibonacciHeap15.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap34.new HeapNode((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap34);
        fibonacciHeap5.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1]");
    }

    @Test
    public void test4737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4737");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        boolean boolean13 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap1.findMin();
        int int18 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(heapNode14);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test4738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4738");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        boolean boolean8 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        int int10 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap12.new HeapNode(10);
        fibonacciHeap12.deleteMin();
        int int18 = fibonacciHeap12.size();
        int int19 = fibonacciHeap12.size();
        fibonacciHeap12.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap12);
        int[] intArray22 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
    }

    @Test
    public void test4739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4739");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        int[] intArray4 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int7 = fibonacciHeap6.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap12.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap22.insert(100);
        fibonacciHeap6.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap6.new HeapNode(100);
        int int37 = heapNode36.key;
        fibonacciHeap1.delete(heapNode36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.findMin();
        int int40 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(heapNode41);
    }

    @Test
    public void test4740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4740");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        int int36 = fibonacciHeap34.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode((int) '#');
        int[] intArray39 = fibonacciHeap34.countersRep();
        fibonacciHeap1.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap42.insert(0);
        fibonacciHeap1.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap1.new HeapNode((-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[3]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(heapNode45);
    }

    @Test
    public void test4741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4741");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        int[] intArray44 = fibonacciHeap26.countersRep();
        int int45 = fibonacciHeap26.potential();
        fibonacciHeap13.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap48.findMin();
        int int51 = fibonacciHeap48.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap48.insert((int) (short) 100);
        int[] intArray54 = fibonacciHeap48.countersRep();
        fibonacciHeap26.meld(fibonacciHeap48);
        boolean boolean56 = fibonacciHeap26.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2, 0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test4742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4742");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap7.insert((-1));
        fibonacciHeap7.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap7.findMin();
        boolean boolean29 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap7.findMin();
        fibonacciHeap1.meld(fibonacciHeap7);
        int int32 = fibonacciHeap7.potential();
        java.lang.Class<?> wildcardClass33 = fibonacciHeap7.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test4743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4743");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.insert(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.findMin();
        java.lang.Class<?> wildcardClass23 = heapNode22.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test4744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4744");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) '4');
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.findMin();
        heapNode6.key = 10;
        int int9 = heapNode6.key;
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test4745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4745");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        int int18 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap21.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap21.new HeapNode((int) (short) 100);
        int int30 = heapNode29.key;
        fibonacciHeap9.delete(heapNode29);
        fibonacciHeap1.meld(fibonacciHeap9);
        int int33 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap35.insert(0);
        heapNode38.key = 0;
        heapNode38.key = 2;
        fibonacciHeap1.delete(heapNode38);
        int int44 = fibonacciHeap1.size();
        int int45 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test4746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4746");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap9.new HeapNode(10);
        heapNode13.key = (short) 10;
        fibonacciHeap1.delete(heapNode13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap1.insert(5);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test4747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4747");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.findMin();
        boolean boolean9 = fibonacciHeap1.empty();
        int[] intArray10 = fibonacciHeap1.countersRep();
        int[] intArray11 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2, 0]");
    }

    @Test
    public void test4748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4748");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.new HeapNode(1);
        int int24 = fibonacciHeap1.size();
        int[] intArray25 = fibonacciHeap1.countersRep();
        java.lang.Class<?> wildcardClass26 = intArray25.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[5, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test4749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4749");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap34.insert(0);
        fibonacciHeap31.delete(heapNode37);
        fibonacciHeap27.delete(heapNode37);
        fibonacciHeap24.delete(heapNode37);
        fibonacciHeap1.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        int[] intArray62 = fibonacciHeap56.countersRep();
        boolean boolean63 = fibonacciHeap56.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap56.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap67.findMin();
        int int69 = heapNode68.key;
        fibonacciHeap56.delete(heapNode68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap72.meld(fibonacciHeap75);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap72.new HeapNode((int) (short) 0);
        fibonacciHeap56.meld(fibonacciHeap72);
        boolean boolean80 = fibonacciHeap56.empty();
        fibonacciHeap1.meld(fibonacciHeap56);
        fibonacciHeap1.deleteMin();
        boolean boolean83 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test4750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4750");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode(6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertNotNull(heapNode11);
    }

    @Test
    public void test4751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4751");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        int int24 = fibonacciHeap0.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap0.insert((int) '#');
        int int27 = fibonacciHeap0.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        fibonacciHeap41.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode(0);
        fibonacciHeap29.meld(fibonacciHeap41);
        int[] intArray47 = fibonacciHeap29.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap50.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        fibonacciHeap62.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap62.new HeapNode(0);
        fibonacciHeap50.meld(fibonacciHeap62);
        int[] intArray68 = fibonacciHeap62.countersRep();
        boolean boolean69 = fibonacciHeap62.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap62.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap73.findMin();
        int int75 = heapNode74.key;
        fibonacciHeap62.delete(heapNode74);
        fibonacciHeap29.delete(heapNode74);
        fibonacciHeap0.meld(fibonacciHeap29);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertNotNull(heapNode74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test4752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4752");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        int int3 = fibonacciHeap1.potential();
        int int4 = fibonacciHeap1.size();
        boolean boolean5 = fibonacciHeap1.empty();
        java.lang.Class<?> wildcardClass6 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test4753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4753");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (short) 1);
        int int4 = heapNode3.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test4754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4754");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap6.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap6.insert(0);
        boolean boolean10 = fibonacciHeap6.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap6.findMin();
        fibonacciHeap1.meld(fibonacciHeap6);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(heapNode11);
    }

    @Test
    public void test4755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4755");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap1.deleteMin();
        int int32 = fibonacciHeap1.potential();
        int[] intArray33 = fibonacciHeap1.countersRep();
        int[] intArray34 = fibonacciHeap1.countersRep();
        int[] intArray35 = fibonacciHeap1.countersRep();
        int int36 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.new HeapNode((int) (byte) 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
    }

    @Test
    public void test4756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4756");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap23.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap23.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap23.findMin();
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap23.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap23.new HeapNode((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap37.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        fibonacciHeap49.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap49.new HeapNode(0);
        fibonacciHeap37.meld(fibonacciHeap49);
        int[] intArray55 = fibonacciHeap49.countersRep();
        boolean boolean56 = fibonacciHeap49.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap49.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap49.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap62.meld(fibonacciHeap68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int72 = fibonacciHeap71.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap74 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap71.meld(fibonacciHeap74);
        fibonacciHeap74.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap74.new HeapNode(0);
        fibonacciHeap62.meld(fibonacciHeap74);
        int[] intArray80 = fibonacciHeap62.countersRep();
        int int81 = fibonacciHeap62.potential();
        fibonacciHeap49.meld(fibonacciHeap62);
        int int83 = fibonacciHeap49.size();
        int[] intArray84 = fibonacciHeap49.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap86 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int87 = fibonacciHeap86.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode88 = fibonacciHeap86.findMin();
        int int89 = fibonacciHeap86.potential();
        boolean boolean90 = fibonacciHeap86.empty();
        fibonacciHeap49.meld(fibonacciHeap86);
        boolean boolean92 = fibonacciHeap86.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode94 = fibonacciHeap86.new HeapNode((int) (short) -1);
        int int95 = heapNode94.getKey();
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap23.delete(heapNode94);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[5, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(heapNode88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test4757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4757");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) 0);
        heapNode6.key = 9;
        org.junit.Assert.assertNotNull(heapNode6);
    }

    @Test
    public void test4758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4758");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        int int35 = fibonacciHeap24.size();
        int int36 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap46.meld(fibonacciHeap52);
        int int55 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap46.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap58.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap58.new HeapNode((int) (short) 100);
        int int67 = heapNode66.key;
        fibonacciHeap46.delete(heapNode66);
        fibonacciHeap38.meld(fibonacciHeap46);
        fibonacciHeap24.meld(fibonacciHeap46);
        int int71 = fibonacciHeap46.potential();
        boolean boolean72 = fibonacciHeap46.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test4759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4759");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap34.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap34.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        boolean boolean47 = fibonacciHeap44.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap44.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap44.new HeapNode((int) '#');
        fibonacciHeap34.delete(heapNode51);
        fibonacciHeap1.meld(fibonacciHeap34);
        int int54 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test4760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4760");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap20.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap20.insert((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
    }

    @Test
    public void test4761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4761");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap14.delete(heapNode20);
        fibonacciHeap4.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap14.new HeapNode(32);
        fibonacciHeap14.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap14.new HeapNode((int) (byte) 100);
        int int28 = heapNode27.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
    }

    @Test
    public void test4762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4762");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        int int15 = fibonacciHeap10.size();
        int[] intArray16 = fibonacciHeap10.countersRep();
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap10.new HeapNode(0);
        int int20 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap10.findMin();
        boolean boolean22 = fibonacciHeap10.empty();
        int int23 = fibonacciHeap10.potential();
        int int24 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap29.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap29.new HeapNode(0);
        int[] intArray42 = fibonacciHeap29.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap29.insert(100);
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap10.delete(heapNode44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode44);
    }

    @Test
    public void test4763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4763");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        int[] intArray13 = fibonacciHeap10.countersRep();
        boolean boolean14 = fibonacciHeap10.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap10.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap10.findMin();
        heapNode17.key = 8;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[4]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(heapNode17);
    }

    @Test
    public void test4764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4764");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap18.countersRep();
        boolean boolean25 = fibonacciHeap18.empty();
        fibonacciHeap1.meld(fibonacciHeap18);
        boolean boolean27 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        java.lang.Class<?> wildcardClass29 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test4765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4765");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        fibonacciHeap1.deleteMin();
        int int24 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap29.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        fibonacciHeap33.delete(heapNode39);
        fibonacciHeap29.delete(heapNode39);
        heapNode39.key = ' ';
        int int44 = heapNode39.getKey();
        fibonacciHeap26.delete(heapNode39);
        int int46 = fibonacciHeap26.potential();
        boolean boolean47 = fibonacciHeap26.empty();
        fibonacciHeap26.deleteMin();
        int int49 = fibonacciHeap26.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap26.findMin();
        fibonacciHeap1.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap53.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        fibonacciHeap65.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap65.new HeapNode(0);
        fibonacciHeap53.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int73 = fibonacciHeap72.size();
        fibonacciHeap53.meld(fibonacciHeap72);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap53.meld(fibonacciHeap76);
        int int78 = fibonacciHeap76.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode80 = fibonacciHeap76.new HeapNode(0);
        boolean boolean81 = fibonacciHeap76.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap83 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int84 = fibonacciHeap83.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap86 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap83.meld(fibonacciHeap86);
        fibonacciHeap86.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap86.new HeapNode(0);
        int int91 = fibonacciHeap86.size();
        fibonacciHeap76.meld(fibonacciHeap86);
        fibonacciHeap26.meld(fibonacciHeap76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode95 = fibonacciHeap26.new HeapNode((int) (byte) -1);
        int int96 = fibonacciHeap26.potential();
        java.lang.Class<?> wildcardClass97 = fibonacciHeap26.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test4766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4766");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        int[] intArray25 = fibonacciHeap19.countersRep();
        boolean boolean26 = fibonacciHeap19.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap19.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap19.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        int[] intArray50 = fibonacciHeap32.countersRep();
        int int51 = fibonacciHeap32.potential();
        fibonacciHeap19.meld(fibonacciHeap32);
        int int53 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap32.findMin();
        int[] intArray55 = fibonacciHeap32.countersRep();
        fibonacciHeap1.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap32.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[5, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode57);
    }

    @Test
    public void test4767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4767");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap5.insert((-1));
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        boolean boolean30 = fibonacciHeap27.empty();
        int int31 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap36.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        fibonacciHeap48.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode(0);
        fibonacciHeap36.meld(fibonacciHeap48);
        int[] intArray54 = fibonacciHeap36.countersRep();
        fibonacciHeap32.meld(fibonacciHeap36);
        fibonacciHeap27.meld(fibonacciHeap36);
        fibonacciHeap27.deleteMin();
        fibonacciHeap5.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap27.findMin();
        fibonacciHeap1.meld(fibonacciHeap27);
        int int61 = fibonacciHeap27.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test4768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4768");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.insert(6);
        java.lang.Class<?> wildcardClass31 = heapNode30.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test4769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4769");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.size();
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.new HeapNode((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap20.new HeapNode((int) (short) 0);
        int[] intArray29 = fibonacciHeap20.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
    }

    @Test
    public void test4770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4770");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray21 = fibonacciHeap20.countersRep();
        fibonacciHeap20.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        int int24 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.new HeapNode(10);
        int int27 = fibonacciHeap20.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test4771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4771");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        boolean boolean37 = fibonacciHeap13.empty();
        int int38 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap43.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap50.insert(0);
        fibonacciHeap47.delete(heapNode53);
        fibonacciHeap43.delete(heapNode53);
        heapNode53.key = ' ';
        int int58 = heapNode53.getKey();
        fibonacciHeap40.delete(heapNode53);
        int int60 = fibonacciHeap40.potential();
        fibonacciHeap13.meld(fibonacciHeap40);
        boolean boolean62 = fibonacciHeap13.empty();
        int int63 = fibonacciHeap13.size();
        fibonacciHeap13.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 32 + "'", int58 == 32);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
    }

    @Test
    public void test4772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4772");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap11.deleteMin();
        fibonacciHeap11.deleteMin();
        fibonacciHeap11.deleteMin();
        int int15 = fibonacciHeap11.potential();
        int[] intArray16 = fibonacciHeap11.countersRep();
        int int17 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap19.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int39 = fibonacciHeap38.size();
        fibonacciHeap19.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap19.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap45.insert(0);
        fibonacciHeap45.deleteMin();
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap11.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap42.insert(10);
        int int54 = fibonacciHeap42.size();
        fibonacciHeap1.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap42.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap42.new HeapNode(4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(heapNode57);
    }

    @Test
    public void test4773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4773");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        boolean boolean8 = fibonacciHeap1.empty();
        boolean boolean9 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4774");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        int[] intArray44 = fibonacciHeap26.countersRep();
        int int45 = fibonacciHeap26.potential();
        fibonacciHeap13.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap48.findMin();
        int int51 = fibonacciHeap48.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap48.insert((int) (short) 100);
        int[] intArray54 = fibonacciHeap48.countersRep();
        fibonacciHeap26.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap57.insert(0);
        int int61 = heapNode60.key;
        heapNode60.key = (-1);
        heapNode60.key = 'a';
        fibonacciHeap48.delete(heapNode60);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test4775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4775");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap51.insert(0);
        fibonacciHeap48.delete(heapNode54);
        fibonacciHeap44.delete(heapNode54);
        boolean boolean57 = fibonacciHeap44.empty();
        fibonacciHeap20.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap20.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap20.findMin();
        heapNode61.key = 0;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertNotNull(heapNode61);
    }

    @Test
    public void test4776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4776");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        int[] intArray28 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap1.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap32.insert(0);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        int int41 = heapNode40.key;
        int int42 = heapNode40.key;
        fibonacciHeap32.delete(heapNode40);
        int int44 = heapNode40.getKey();
        fibonacciHeap1.delete(heapNode40);
        int int46 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test4777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4777");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(32);
        boolean boolean2 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.new HeapNode((int) (byte) -1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(heapNode6);
    }

    @Test
    public void test4778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4778");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        boolean boolean8 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) -1);
        int int11 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.insert(0);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(heapNode13);
    }

    @Test
    public void test4779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4779");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        int[] intArray22 = fibonacciHeap1.countersRep();
        int int23 = fibonacciHeap1.size();
        int int24 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test4780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4780");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap34.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap34.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        boolean boolean47 = fibonacciHeap44.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap44.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap44.new HeapNode((int) '#');
        fibonacciHeap34.delete(heapNode51);
        fibonacciHeap1.meld(fibonacciHeap34);
        boolean boolean54 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray57 = fibonacciHeap56.countersRep();
        boolean boolean58 = fibonacciHeap56.empty();
        int int59 = fibonacciHeap56.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int62 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap61.meld(fibonacciHeap64);
        fibonacciHeap64.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap64.new HeapNode(0);
        fibonacciHeap56.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap64.findMin();
        fibonacciHeap1.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap1.new HeapNode((int) (short) 10);
        int int74 = heapNode73.key;
        int int75 = heapNode73.getKey();
        int int76 = heapNode73.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNull(heapNode70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
    }

    @Test
    public void test4781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4781");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        boolean boolean9 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.findMin();
        int int11 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert((int) (short) 1);
        heapNode15.key = (short) 0;
        fibonacciHeap1.delete(heapNode15);
        int[] intArray19 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
    }

    @Test
    public void test4782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4782");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        fibonacciHeap13.deleteMin();
        int int22 = fibonacciHeap13.potential();
        fibonacciHeap13.deleteMin();
        fibonacciHeap13.deleteMin();
        boolean boolean25 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap13.delete(heapNode26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode.getKey()\" because \"x\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test4783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4783");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap9.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap1.findMin();
        int int20 = heapNode19.key;
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test4784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4784");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        int[] intArray7 = fibonacciHeap1.countersRep();
        int int8 = fibonacciHeap1.size();
        int int9 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test4785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4785");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.insert(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap24.new HeapNode((int) (short) -1);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode95 = fibonacciHeap24.insert(6);
        int[] intArray96 = fibonacciHeap24.countersRep();
        int int97 = fibonacciHeap24.size();
        int[] intArray98 = fibonacciHeap24.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[2, 0, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 8 + "'", int97 == 8);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[2, 0, 0, 1, 0]");
    }

    @Test
    public void test4786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4786");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap8.new HeapNode((int) (short) 0);
        heapNode14.key = (byte) 100;
        heapNode14.key = (-1);
        fibonacciHeap1.delete(heapNode14);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(heapNode21);
    }

    @Test
    public void test4787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4787");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        int int13 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap15.findMin();
        int int17 = fibonacciHeap15.size();
        fibonacciHeap4.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap15.new HeapNode((int) ' ');
        int int21 = heapNode20.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
    }

    @Test
    public void test4788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4788");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        fibonacciHeap13.deleteMin();
        int int22 = fibonacciHeap13.potential();
        fibonacciHeap13.deleteMin();
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.findMin();
        int[] intArray26 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        fibonacciHeap40.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap28.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int48 = fibonacciHeap47.size();
        fibonacciHeap28.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap28.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap54.insert(0);
        fibonacciHeap54.deleteMin();
        fibonacciHeap51.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap51.new HeapNode((int) (short) 10);
        int int62 = fibonacciHeap51.size();
        int int63 = fibonacciHeap51.size();
        int int64 = fibonacciHeap51.size();
        fibonacciHeap13.meld(fibonacciHeap51);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(heapNode25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test4789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4789");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        int int14 = fibonacciHeap4.size();
        int[] intArray15 = fibonacciHeap4.countersRep();
        boolean boolean16 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap4.insert(97);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(heapNode18);
    }

    @Test
    public void test4790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4790");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        int int12 = heapNode11.key;
        heapNode11.key = (byte) 1;
        int int15 = heapNode11.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test4791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4791");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        int[] intArray52 = fibonacciHeap34.countersRep();
        fibonacciHeap8.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap55.new HeapNode((int) (short) 0);
        int int62 = fibonacciHeap55.size();
        int[] intArray63 = fibonacciHeap55.countersRep();
        fibonacciHeap8.meld(fibonacciHeap55);
        int int65 = fibonacciHeap55.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
    }

    @Test
    public void test4792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4792");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.findMin();
        int[] intArray10 = fibonacciHeap7.countersRep();
        int int11 = fibonacciHeap7.potential();
        fibonacciHeap7.deleteMin();
        boolean boolean13 = fibonacciHeap7.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[3]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test4793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4793");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.insert((int) (byte) 0);
        int int27 = fibonacciHeap20.size();
        int int28 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap20.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap20.new HeapNode((int) ' ');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(heapNode29);
    }

    @Test
    public void test4794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4794");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        int int29 = fibonacciHeap5.size();
        int int30 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap34.insert(1);
        int int37 = heapNode36.key;
        int int38 = heapNode36.key;
        heapNode36.key = (-1);
        int int41 = heapNode36.getKey();
        fibonacciHeap32.delete(heapNode36);
        int int43 = fibonacciHeap32.size();
        boolean boolean44 = fibonacciHeap32.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap52.meld(fibonacciHeap55);
        fibonacciHeap49.meld(fibonacciHeap55);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap49.new HeapNode((int) (short) 10);
        fibonacciHeap32.meld(fibonacciHeap49);
        fibonacciHeap5.meld(fibonacciHeap32);
        java.lang.Class<?> wildcardClass62 = fibonacciHeap5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test4795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4795");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap23.insert((-1));
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap23.findMin();
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap48.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap53.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        fibonacciHeap65.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap65.new HeapNode(0);
        fibonacciHeap53.meld(fibonacciHeap65);
        int[] intArray71 = fibonacciHeap65.countersRep();
        boolean boolean72 = fibonacciHeap65.empty();
        fibonacciHeap48.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap77 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap77.insert(1);
        int int80 = heapNode79.key;
        int int81 = heapNode79.key;
        heapNode79.key = (-1);
        int int84 = heapNode79.getKey();
        fibonacciHeap75.delete(heapNode79);
        int int86 = fibonacciHeap75.size();
        boolean boolean87 = fibonacciHeap75.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode88 = fibonacciHeap75.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap75.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode91 = fibonacciHeap75.findMin();
        fibonacciHeap65.meld(fibonacciHeap75);
        fibonacciHeap23.meld(fibonacciHeap65);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = fibonacciHeap65.countersRep();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(heapNode79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(heapNode88);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode91);
    }

    @Test
    public void test4796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4796");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        int[] intArray9 = fibonacciHeap4.countersRep();
        int[] intArray10 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        int[] intArray14 = fibonacciHeap12.countersRep();
        int int15 = fibonacciHeap12.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap19.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap26.insert(0);
        fibonacciHeap23.delete(heapNode29);
        fibonacciHeap19.delete(heapNode29);
        boolean boolean32 = fibonacciHeap19.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        fibonacciHeap19.meld(fibonacciHeap34);
        fibonacciHeap17.meld(fibonacciHeap19);
        boolean boolean38 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap17.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap17.insert(35);
        fibonacciHeap12.meld(fibonacciHeap17);
        fibonacciHeap12.deleteMin();
        fibonacciHeap4.meld(fibonacciHeap12);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap4.insert(35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode48);
    }

    @Test
    public void test4797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4797");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        int int9 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test4798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4798");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        fibonacciHeap16.deleteMin();
        boolean boolean21 = fibonacciHeap16.empty();
        boolean boolean22 = fibonacciHeap16.empty();
        int[] intArray23 = fibonacciHeap16.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
    }

    @Test
    public void test4799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4799");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        fibonacciHeap46.meld(fibonacciHeap53);
        fibonacciHeap24.meld(fibonacciHeap53);
        fibonacciHeap24.deleteMin();
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap24.new HeapNode((int) (short) -1);
        int int61 = fibonacciHeap24.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test4800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4800");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap3.insert(0);
        int int7 = heapNode6.key;
        fibonacciHeap1.delete(heapNode6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(heapNode9);
    }

    @Test
    public void test4801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4801");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        int int7 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap4.new HeapNode(5);
        java.lang.Class<?> wildcardClass10 = heapNode9.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test4802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4802");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap7.insert((int) '#');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(heapNode15);
    }

    @Test
    public void test4803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4803");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        boolean boolean6 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap15.insert(0);
        fibonacciHeap12.delete(heapNode18);
        fibonacciHeap8.delete(heapNode18);
        fibonacciHeap3.delete(heapNode18);
        fibonacciHeap1.delete(heapNode18);
        java.lang.Class<?> wildcardClass23 = heapNode18.getClass();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test4804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4804");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int5 = fibonacciHeap1.potential();
        int[] intArray6 = fibonacciHeap1.countersRep();
        int int7 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        fibonacciHeap21.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(0);
        fibonacciHeap9.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int29 = fibonacciHeap28.size();
        fibonacciHeap9.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap9.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap35.insert(0);
        fibonacciHeap35.deleteMin();
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap1.meld(fibonacciHeap32);
        int[] intArray42 = fibonacciHeap32.countersRep();
        int int43 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap32.new HeapNode(100);
        heapNode45.key = 7;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[6, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test4805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4805");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        int int5 = fibonacciHeap1.potential();
        int int6 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int[] intArray8 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
    }

    @Test
    public void test4806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4806");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap11.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap23.new HeapNode(0);
        fibonacciHeap11.meld(fibonacciHeap23);
        int[] intArray29 = fibonacciHeap11.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap11.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.insert(1);
        boolean boolean35 = fibonacciHeap32.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap40.insert(0);
        fibonacciHeap37.delete(heapNode43);
        heapNode43.key = (short) 1;
        fibonacciHeap32.delete(heapNode43);
        int int48 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap32.insert(3);
        fibonacciHeap11.delete(heapNode50);
        fibonacciHeap1.meld(fibonacciHeap11);
        boolean boolean53 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap1.insert(52);
        fibonacciHeap1.deleteMin();
        int[] intArray57 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 0, 1, 0]");
    }

    @Test
    public void test4807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4807");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.size();
        boolean boolean5 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap14.insert(0);
        fibonacciHeap11.delete(heapNode17);
        fibonacciHeap7.delete(heapNode17);
        boolean boolean20 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap7.insert(3);
        boolean boolean23 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap7.insert((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap7.new HeapNode(7);
        boolean boolean28 = fibonacciHeap7.empty();
        fibonacciHeap1.meld(fibonacciHeap7);
        int int30 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(heapNode31);
    }

    @Test
    public void test4808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4808");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        int int33 = fibonacciHeap27.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test4809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4809");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        int int3 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(heapNode5);
    }

    @Test
    public void test4810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4810");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        boolean boolean5 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(2);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test4811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4811");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        int int7 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.insert((int) '#');
        fibonacciHeap1.deleteMin();
        int int13 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.insert(0);
        int int16 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test4812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4812");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        int int16 = fibonacciHeap10.size();
        int int17 = fibonacciHeap10.size();
        int[] intArray18 = fibonacciHeap10.countersRep();
        boolean boolean19 = fibonacciHeap10.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap10.new HeapNode(4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[4]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4813");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((int) (short) 100);
        int int10 = heapNode9.key;
        heapNode9.key = 0;
        heapNode9.key = 'a';
        int int15 = heapNode9.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
    }

    @Test
    public void test4814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4814");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.insert(6);
        int[] intArray31 = fibonacciHeap4.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2, 1, 1, 0]");
    }

    @Test
    public void test4815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4815");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        int int49 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap4.findMin();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap4.insert((int) '4');
        int int54 = fibonacciHeap4.size();
        java.lang.Class<?> wildcardClass55 = fibonacciHeap4.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test4816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4816");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int int21 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.insert(3);
        int int24 = fibonacciHeap1.potential();
        int[] intArray25 = fibonacciHeap1.countersRep();
        boolean boolean26 = fibonacciHeap1.empty();
        int int27 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test4817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4817");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        int[] intArray33 = fibonacciHeap30.countersRep();
        int int34 = fibonacciHeap30.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap24.delete(heapNode36);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap24.new HeapNode((-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(heapNode39);
    }

    @Test
    public void test4818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4818");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        int int29 = fibonacciHeap5.size();
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap5.insert(97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(heapNode32);
    }

    @Test
    public void test4819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4819");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        fibonacciHeap1.deleteMin();
        int int24 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap29.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        fibonacciHeap33.delete(heapNode39);
        fibonacciHeap29.delete(heapNode39);
        heapNode39.key = ' ';
        int int44 = heapNode39.getKey();
        fibonacciHeap26.delete(heapNode39);
        int int46 = fibonacciHeap26.potential();
        boolean boolean47 = fibonacciHeap26.empty();
        fibonacciHeap26.deleteMin();
        int int49 = fibonacciHeap26.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap26.findMin();
        fibonacciHeap1.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap53.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        fibonacciHeap65.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap65.new HeapNode(0);
        fibonacciHeap53.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int73 = fibonacciHeap72.size();
        fibonacciHeap53.meld(fibonacciHeap72);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap53.meld(fibonacciHeap76);
        int int78 = fibonacciHeap76.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode80 = fibonacciHeap76.new HeapNode(0);
        boolean boolean81 = fibonacciHeap76.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap83 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int84 = fibonacciHeap83.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap86 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap83.meld(fibonacciHeap86);
        fibonacciHeap86.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap86.new HeapNode(0);
        int int91 = fibonacciHeap86.size();
        fibonacciHeap76.meld(fibonacciHeap86);
        fibonacciHeap26.meld(fibonacciHeap76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode95 = fibonacciHeap26.new HeapNode((int) (byte) -1);
        boolean boolean96 = fibonacciHeap26.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4820");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        int int33 = fibonacciHeap24.potential();
        int[] intArray34 = fibonacciHeap24.countersRep();
        int int35 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.insert(0);
        fibonacciHeap43.delete(heapNode49);
        fibonacciHeap39.delete(heapNode49);
        boolean boolean52 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        fibonacciHeap39.meld(fibonacciHeap54);
        fibonacciHeap37.meld(fibonacciHeap39);
        int int58 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int61 = fibonacciHeap60.potential();
        fibonacciHeap60.deleteMin();
        int[] intArray63 = fibonacciHeap60.countersRep();
        int int64 = fibonacciHeap60.potential();
        fibonacciHeap39.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap39.findMin();
        int int67 = heapNode66.getKey();
        fibonacciHeap24.delete(heapNode66);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test4821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4821");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap7.insert(0);
        fibonacciHeap7.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap13.insert((-1));
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap13.new HeapNode((int) 'a');
        fibonacciHeap1.delete(heapNode35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
    }

    @Test
    public void test4822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4822");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.insert(0);
        int int24 = heapNode23.getKey();
        java.lang.Class<?> wildcardClass25 = heapNode23.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(heapNode21);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test4823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4823");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        int[] intArray7 = fibonacciHeap1.countersRep();
        int int8 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap11.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap23.new HeapNode(0);
        fibonacciHeap11.meld(fibonacciHeap23);
        int[] intArray29 = fibonacciHeap23.countersRep();
        boolean boolean30 = fibonacciHeap23.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap23.insert((int) (byte) 100);
        int[] intArray33 = fibonacciHeap23.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap23.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap23.findMin();
        int[] intArray36 = fibonacciHeap23.countersRep();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.insert(0);
        fibonacciHeap43.delete(heapNode49);
        fibonacciHeap39.delete(heapNode49);
        boolean boolean52 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        fibonacciHeap39.meld(fibonacciHeap54);
        int[] intArray57 = fibonacciHeap39.countersRep();
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap60.meld(fibonacciHeap63);
        fibonacciHeap63.deleteMin();
        fibonacciHeap63.deleteMin();
        int[] intArray67 = fibonacciHeap63.countersRep();
        fibonacciHeap39.meld(fibonacciHeap63);
        fibonacciHeap23.meld(fibonacciHeap63);
        int int70 = fibonacciHeap63.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1]");
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1]");
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test4824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4824");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(100);
        int[] intArray2 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.new HeapNode((-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
    }

    @Test
    public void test4825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4825");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int int7 = fibonacciHeap4.potential();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int[] intArray11 = fibonacciHeap4.countersRep();
        int int12 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap14.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap14.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap14.new HeapNode((int) '4');
        int int25 = fibonacciHeap14.potential();
        int[] intArray26 = fibonacciHeap14.countersRep();
        fibonacciHeap4.meld(fibonacciHeap14);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[3, 0, 0]");
    }

    @Test
    public void test4826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4826");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        int int25 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap13.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap13.insert(1);
        int int30 = fibonacciHeap13.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
    }

    @Test
    public void test4827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4827");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.insert(4);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        int int42 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap47.insert(0);
        fibonacciHeap44.delete(heapNode50);
        heapNode50.key = (short) 1;
        int int54 = heapNode50.key;
        fibonacciHeap24.delete(heapNode50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap24.insert((int) (short) 1);
        boolean boolean58 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap24.findMin();
        int[] intArray61 = fibonacciHeap24.countersRep();
        int int62 = fibonacciHeap24.size();
        int int63 = fibonacciHeap24.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
    }

    @Test
    public void test4828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4828");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        int int18 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap21.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap21.new HeapNode((int) (short) 100);
        int int30 = heapNode29.key;
        fibonacciHeap9.delete(heapNode29);
        fibonacciHeap1.meld(fibonacciHeap9);
        int int33 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap1.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap1.new HeapNode(10);
        boolean boolean38 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4829");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        int[] intArray26 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.findMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        int[] intArray29 = fibonacciHeap20.countersRep();
        int[] intArray30 = fibonacciHeap20.countersRep();
        fibonacciHeap20.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNull(heapNode27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
    }

    @Test
    public void test4830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4830");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        boolean boolean13 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(heapNode14);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertNotNull(heapNode18);
    }

    @Test
    public void test4831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4831");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        heapNode27.key = (short) 1;
        int int31 = heapNode27.key;
        fibonacciHeap1.delete(heapNode27);
        int int33 = fibonacciHeap1.size();
        boolean boolean34 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap1.meld(fibonacciHeap39);
        int int42 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.new HeapNode(7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(heapNode43);
    }

    @Test
    public void test4832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4832");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap0.insert(2);
        int int26 = fibonacciHeap0.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        fibonacciHeap40.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap28.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int48 = fibonacciHeap47.size();
        fibonacciHeap28.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap28.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        fibonacciHeap57.deleteMin();
        int[] intArray60 = fibonacciHeap57.countersRep();
        int int61 = fibonacciHeap57.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap57.new HeapNode(0);
        fibonacciHeap51.delete(heapNode63);
        fibonacciHeap51.deleteMin();
        int int66 = fibonacciHeap51.potential();
        int int67 = fibonacciHeap51.potential();
        fibonacciHeap0.meld(fibonacciHeap51);
        java.lang.Class<?> wildcardClass69 = fibonacciHeap51.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test4833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4833");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert((int) (byte) -1);
        int int10 = heapNode9.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test4834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4834");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap3.new HeapNode(10);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode((int) '#');
        int int13 = fibonacciHeap1.size();
        int[] intArray14 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNull(heapNode15);
    }

    @Test
    public void test4835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4835");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        fibonacciHeap13.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap33.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode((int) (short) 100);
        int int38 = fibonacciHeap33.size();
        fibonacciHeap13.meld(fibonacciHeap33);
        fibonacciHeap33.deleteMin();
        int int41 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap33.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap33.new HeapNode((int) (byte) 10);
        int int46 = fibonacciHeap33.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test4836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4836");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        heapNode7.key = (short) 1;
        int int11 = heapNode7.getKey();
        heapNode7.key = 0;
        int int14 = heapNode7.getKey();
        int int15 = heapNode7.key;
        heapNode7.key = 0;
        int int18 = heapNode7.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test4837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4837");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap3.new HeapNode(10);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        fibonacciHeap26.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.meld(fibonacciHeap26);
        int[] intArray32 = fibonacciHeap26.countersRep();
        boolean boolean33 = fibonacciHeap26.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap26.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap37.findMin();
        int int39 = heapNode38.key;
        fibonacciHeap26.delete(heapNode38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap42.new HeapNode((int) (short) 0);
        fibonacciHeap26.meld(fibonacciHeap42);
        int[] intArray50 = fibonacciHeap26.countersRep();
        int int51 = fibonacciHeap26.potential();
        fibonacciHeap1.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap60.meld(fibonacciHeap63);
        fibonacciHeap57.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap57.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap57.new HeapNode(0);
        int int70 = heapNode69.key;
        fibonacciHeap1.delete(heapNode69);
        boolean boolean72 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap1.findMin();
        int int74 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap1.findMin();
        int int76 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap1.new HeapNode(1);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(heapNode75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test4838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4838");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(2);
        boolean boolean9 = fibonacciHeap4.empty();
        int int10 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4839");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.size();
        int[] intArray16 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap4.insert((int) 'a');
        int[] intArray19 = fibonacciHeap4.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[5, 0, 0]");
    }

    @Test
    public void test4840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4840");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        fibonacciHeap1.deleteMin();
        int int22 = fibonacciHeap1.potential();
        int[] intArray23 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode(0);
        fibonacciHeap25.meld(fibonacciHeap37);
        int[] intArray43 = fibonacciHeap37.countersRep();
        int int44 = fibonacciHeap37.size();
        int[] intArray45 = fibonacciHeap37.countersRep();
        boolean boolean46 = fibonacciHeap37.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap37.findMin();
        fibonacciHeap1.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap37.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(heapNode47);
        org.junit.Assert.assertNull(heapNode49);
    }

    @Test
    public void test4841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4841");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        boolean boolean13 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap18.findMin();
        boolean boolean31 = fibonacciHeap18.empty();
        boolean boolean32 = fibonacciHeap18.empty();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test4842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4842");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        int int14 = fibonacciHeap4.size();
        int[] intArray15 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap4.new HeapNode((int) '4');
        boolean boolean18 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.new HeapNode((int) (short) 0);
        fibonacciHeap20.deleteMin();
        boolean boolean28 = fibonacciHeap20.empty();
        int int29 = fibonacciHeap20.size();
        fibonacciHeap4.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap20.new HeapNode(9);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test4843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4843");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        heapNode7.key = (short) 1;
        heapNode7.key = 52;
        heapNode7.key = 5;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
    }

    @Test
    public void test4844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4844");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert((int) (byte) 10);
        boolean boolean45 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap24.findMin();
        fibonacciHeap24.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(heapNode46);
    }

    @Test
    public void test4845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4845");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.insert((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(heapNode25);
    }

    @Test
    public void test4846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4846");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        boolean boolean22 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int25 = fibonacciHeap1.size();
        boolean boolean26 = fibonacciHeap1.empty();
        int int27 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test4847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4847");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.findMin();
        java.lang.Class<?> wildcardClass8 = fibonacciHeap4.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test4848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4848");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        heapNode3.key = (short) 10;
    }

    @Test
    public void test4849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4849");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap26.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap26.new HeapNode(10);
        fibonacciHeap24.delete(heapNode30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap24);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(heapNode28);
    }

    @Test
    public void test4850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4850");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        int[] intArray8 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int30 = fibonacciHeap29.size();
        fibonacciHeap10.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap10.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap33.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        fibonacciHeap41.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap41.new HeapNode((int) (short) 10);
        int int52 = fibonacciHeap41.potential();
        fibonacciHeap33.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap41.new HeapNode((int) (byte) 0);
        fibonacciHeap1.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap58.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        fibonacciHeap70.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap70.new HeapNode(0);
        fibonacciHeap58.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap58.findMin();
        int int77 = heapNode76.getKey();
        int int78 = heapNode76.getKey();
        fibonacciHeap1.delete(heapNode76);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap1.new HeapNode(100);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(heapNode76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test4851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4851");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        int int4 = heapNode3.key;
        int int5 = heapNode3.key;
        heapNode3.key = (-1);
        int int8 = heapNode3.key;
        heapNode3.key = 97;
        int int11 = heapNode3.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test4852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4852");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray9 = fibonacciHeap8.countersRep();
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        fibonacciHeap24.meld(fibonacciHeap31);
        int int34 = fibonacciHeap31.size();
        fibonacciHeap1.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap31.new HeapNode((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap31.new HeapNode(2);
        java.lang.Class<?> wildcardClass40 = heapNode39.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test4853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4853");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(10);
        boolean boolean6 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        boolean boolean28 = fibonacciHeap22.empty();
        boolean boolean29 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap22.findMin();
        int int31 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap22.new HeapNode((int) (short) 100);
        fibonacciHeap8.delete(heapNode33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap8.findMin();
        fibonacciHeap1.meld(fibonacciHeap8);
        java.lang.Class<?> wildcardClass37 = fibonacciHeap8.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(heapNode35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test4854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4854");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        int int23 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap25.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap25.insert(5);
        boolean boolean32 = fibonacciHeap25.empty();
        fibonacciHeap25.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap25);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test4855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4855");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        int int23 = heapNode22.getKey();
        int int24 = heapNode22.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test4856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4856");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap10.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap10.insert((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap10.insert(97);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertNotNull(heapNode36);
    }

    @Test
    public void test4857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4857");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        heapNode3.key = 97;
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode3);
    }

    @Test
    public void test4858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4858");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap7.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap17.insert(100);
        fibonacciHeap1.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap33.deleteMin();
        fibonacciHeap33.deleteMin();
        fibonacciHeap33.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap33.new HeapNode((int) (byte) 1);
        fibonacciHeap1.meld(fibonacciHeap33);
        int[] intArray41 = fibonacciHeap33.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNull(heapNode37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
    }

    @Test
    public void test4859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4859");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        int int9 = fibonacciHeap4.size();
        int int10 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        int int12 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        int int22 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap17.findMin();
        fibonacciHeap4.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap17.insert(97);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(heapNode23);
        org.junit.Assert.assertNotNull(heapNode26);
    }

    @Test
    public void test4860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4860");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        int int31 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap26.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap33.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap37.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        fibonacciHeap49.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap49.new HeapNode(0);
        fibonacciHeap37.meld(fibonacciHeap49);
        int[] intArray55 = fibonacciHeap37.countersRep();
        fibonacciHeap33.meld(fibonacciHeap37);
        fibonacciHeap26.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap59.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int69 = fibonacciHeap68.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap68.meld(fibonacciHeap71);
        fibonacciHeap71.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap71.new HeapNode(0);
        fibonacciHeap59.meld(fibonacciHeap71);
        int[] intArray77 = fibonacciHeap59.countersRep();
        fibonacciHeap33.meld(fibonacciHeap59);
        fibonacciHeap13.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap13.insert((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap13.new HeapNode(0);
        heapNode84.key = 4;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode81);
        org.junit.Assert.assertNotNull(heapNode82);
    }

    @Test
    public void test4861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4861");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap10.new HeapNode(35);
        int int18 = fibonacciHeap10.potential();
        int int19 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        fibonacciHeap33.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode(0);
        fibonacciHeap21.meld(fibonacciHeap33);
        int[] intArray39 = fibonacciHeap21.countersRep();
        int int40 = fibonacciHeap21.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap45.insert(0);
        fibonacciHeap42.delete(heapNode48);
        fibonacciHeap21.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap52.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap59.insert(0);
        fibonacciHeap56.delete(heapNode62);
        fibonacciHeap52.delete(heapNode62);
        fibonacciHeap42.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap42.findMin();
        fibonacciHeap10.meld(fibonacciHeap42);
        int int68 = fibonacciHeap42.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test4862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4862");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.size();
        int int21 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
    }

    @Test
    public void test4863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4863");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap1.deleteMin();
        int int32 = fibonacciHeap1.potential();
        int[] intArray33 = fibonacciHeap1.countersRep();
        int[] intArray34 = fibonacciHeap1.countersRep();
        int[] intArray35 = fibonacciHeap1.countersRep();
        int int36 = fibonacciHeap1.size();
        int int37 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.insert(9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertNotNull(heapNode41);
    }

    @Test
    public void test4864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4864");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        heapNode27.key = (short) 1;
        int int31 = heapNode27.key;
        fibonacciHeap1.delete(heapNode27);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test4865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4865");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        int int14 = fibonacciHeap4.size();
        int[] intArray15 = fibonacciHeap4.countersRep();
        boolean boolean16 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap4.insert((int) (byte) -1);
        heapNode18.key = (short) 10;
        heapNode18.key = 8;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(heapNode18);
    }

    @Test
    public void test4866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4866");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        int int4 = fibonacciHeap1.potential();
        int int5 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap19.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.delete(heapNode31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode(0);
        int int42 = fibonacciHeap37.size();
        fibonacciHeap37.deleteMin();
        fibonacciHeap7.meld(fibonacciHeap37);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap7.insert(3);
        int int48 = heapNode47.key;
        heapNode47.key = ' ';
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
    }

    @Test
    public void test4867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4867");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        fibonacciHeap17.delete(heapNode27);
        heapNode27.key = ' ';
        int int32 = heapNode27.getKey();
        fibonacciHeap14.delete(heapNode27);
        int int34 = fibonacciHeap14.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(10);
        fibonacciHeap36.delete(heapNode42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap14.meld(fibonacciHeap36);
        fibonacciHeap14.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap14.new HeapNode(32);
        int int50 = fibonacciHeap14.potential();
        fibonacciHeap1.meld(fibonacciHeap14);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test4868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4868");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(100);
        int int9 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.insert((int) (byte) 0);
        int[] intArray12 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap14.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test4869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4869");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert(5);
        int int11 = heapNode10.getKey();
        heapNode10.key = 0;
        int int14 = heapNode10.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4870");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        fibonacciHeap1.delete(heapNode14);
        int[] intArray18 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.new HeapNode((int) (short) 1);
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap1.new HeapNode(0);
        int[] intArray26 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap1.new HeapNode(4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1]");
    }

    @Test
    public void test4871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4871");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        int[] intArray23 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[4, 0, 0]");
    }

    @Test
    public void test4872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4872");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.new HeapNode((int) (byte) 10);
        heapNode26.key = (byte) -1;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test4873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4873");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        heapNode11.key = ' ';
        heapNode11.key = (short) -1;
        int int18 = heapNode11.getKey();
        heapNode11.key = (short) 10;
        int int21 = heapNode11.key;
        java.lang.Class<?> wildcardClass22 = heapNode11.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test4874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4874");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.insert(5);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(heapNode15);
    }

    @Test
    public void test4875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4875");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        fibonacciHeap4.deleteMin();
        int int50 = fibonacciHeap4.size();
        java.lang.Class<?> wildcardClass51 = fibonacciHeap4.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test4876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4876");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        heapNode5.key = '#';
        int int14 = heapNode5.getKey();
        heapNode5.key = 0;
        int int17 = heapNode5.getKey();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4877");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode((int) (short) 100);
        fibonacciHeap4.delete(heapNode21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap27.countersRep();
        fibonacciHeap23.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap23.new HeapNode((int) 'a');
        int int49 = heapNode48.key;
        int int50 = heapNode48.getKey();
        fibonacciHeap4.delete(heapNode48);
        int int52 = heapNode48.key;
        int int53 = heapNode48.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test4878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4878");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap7.findMin();
        boolean boolean11 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap7.new HeapNode(8);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(heapNode12);
    }

    @Test
    public void test4879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4879");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap3.insert(1);
        int int8 = heapNode7.key;
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.insert((int) '4');
        int[] intArray14 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
    }

    @Test
    public void test4880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4880");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        int[] intArray34 = fibonacciHeap24.countersRep();
        fibonacciHeap4.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.findMin();
        fibonacciHeap37.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.new HeapNode(4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
    }

    @Test
    public void test4881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4881");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        boolean boolean11 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap7.insert(100);
        int int16 = heapNode15.getKey();
        heapNode15.key = 9;
        int int19 = heapNode15.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
    }

    @Test
    public void test4882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4882");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap92 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode94 = fibonacciHeap92.new HeapNode((int) (short) 1);
        int int95 = heapNode94.getKey();
        int int96 = heapNode94.getKey();
        fibonacciHeap24.delete(heapNode94);
        int int98 = fibonacciHeap24.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
    }

    @Test
    public void test4883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4883");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        int[] intArray28 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap1.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap1.new HeapNode((int) (short) -1);
        int[] intArray33 = fibonacciHeap1.countersRep();
        java.lang.Class<?> wildcardClass34 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2, 0]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test4884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4884");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode((int) (byte) 100);
        int[] intArray43 = fibonacciHeap38.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap38.new HeapNode(35);
        fibonacciHeap1.delete(heapNode45);
        int int47 = heapNode45.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test4885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4885");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap13.potential();
        int int20 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) '4');
        int int23 = heapNode22.key;
        heapNode22.key = 7;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
    }

    @Test
    public void test4886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4886");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        int int16 = fibonacciHeap14.potential();
        int int17 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap19.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap31.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap31.new HeapNode(32);
        fibonacciHeap14.delete(heapNode40);
        int int42 = heapNode40.key;
        fibonacciHeap1.delete(heapNode40);
        int[] intArray44 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int47 = fibonacciHeap46.potential();
        fibonacciHeap46.deleteMin();
        int int49 = fibonacciHeap46.size();
        fibonacciHeap1.meld(fibonacciHeap46);
        int int51 = fibonacciHeap46.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap53.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        fibonacciHeap65.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap65.new HeapNode(0);
        fibonacciHeap53.meld(fibonacciHeap65);
        boolean boolean71 = fibonacciHeap65.empty();
        boolean boolean72 = fibonacciHeap65.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap65.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap65.insert(0);
        fibonacciHeap46.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap65.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(heapNode73);
        org.junit.Assert.assertNotNull(heapNode75);
        org.junit.Assert.assertNotNull(heapNode77);
    }

    @Test
    public void test4887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4887");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap9.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap1.new HeapNode(0);
        int[] intArray19 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2, 0]");
    }

    @Test
    public void test4888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4888");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        boolean boolean12 = fibonacciHeap1.empty();
        int int13 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap18.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap18.delete(heapNode28);
        heapNode28.key = ' ';
        int int33 = heapNode28.getKey();
        fibonacciHeap15.delete(heapNode28);
        int int35 = fibonacciHeap15.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap15.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap15.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap52.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap52.new HeapNode(0);
        fibonacciHeap40.meld(fibonacciHeap52);
        int[] intArray58 = fibonacciHeap52.countersRep();
        boolean boolean59 = fibonacciHeap52.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap52.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap63.findMin();
        int int65 = heapNode64.key;
        fibonacciHeap52.delete(heapNode64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int69 = fibonacciHeap68.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap68.meld(fibonacciHeap71);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap68.new HeapNode((int) (short) 0);
        fibonacciHeap52.meld(fibonacciHeap68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap77 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int78 = fibonacciHeap77.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap77.findMin();
        int int80 = fibonacciHeap77.potential();
        fibonacciHeap52.meld(fibonacciHeap77);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap52.insert(52);
        int int84 = fibonacciHeap52.size();
        fibonacciHeap15.meld(fibonacciHeap52);
        fibonacciHeap1.meld(fibonacciHeap15);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(heapNode79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(heapNode83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
    }

    @Test
    public void test4889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4889");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        int int36 = fibonacciHeap34.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode((int) '#');
        int[] intArray39 = fibonacciHeap34.countersRep();
        fibonacciHeap1.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap42.insert(0);
        fibonacciHeap1.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap42.findMin();
        int int48 = fibonacciHeap42.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[3]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test4890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4890");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        int[] intArray44 = fibonacciHeap26.countersRep();
        int int45 = fibonacciHeap26.potential();
        fibonacciHeap13.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap48.findMin();
        int int51 = fibonacciHeap48.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap48.insert((int) (short) 100);
        int[] intArray54 = fibonacciHeap48.countersRep();
        fibonacciHeap26.meld(fibonacciHeap48);
        boolean boolean56 = fibonacciHeap48.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap60.insert(1);
        int int63 = heapNode62.key;
        int int64 = heapNode62.key;
        heapNode62.key = (-1);
        int int67 = heapNode62.getKey();
        fibonacciHeap58.delete(heapNode62);
        int int69 = fibonacciHeap58.size();
        int int70 = fibonacciHeap58.size();
        int int71 = fibonacciHeap58.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap58.new HeapNode(0);
        int int74 = heapNode73.key;
        fibonacciHeap48.delete(heapNode73);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2, 0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test4891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4891");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        int int22 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.insert(8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(heapNode24);
    }

    @Test
    public void test4892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4892");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap10.insert((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap44.insert(0);
        fibonacciHeap41.delete(heapNode47);
        fibonacciHeap37.delete(heapNode47);
        fibonacciHeap34.delete(heapNode47);
        fibonacciHeap10.delete(heapNode47);
        int int52 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap10.findMin();
        int int54 = heapNode53.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test4893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4893");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int42 = fibonacciHeap41.size();
        fibonacciHeap22.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap22.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap45.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap45);
        int[] intArray50 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[8, 0, 0]");
    }

    @Test
    public void test4894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4894");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.findMin();
        int int22 = fibonacciHeap1.potential();
        int int23 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test4895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4895");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        fibonacciHeap13.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap33.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode((int) (short) 100);
        int int38 = fibonacciHeap33.size();
        fibonacciHeap13.meld(fibonacciHeap33);
        int int40 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap13.insert(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(heapNode42);
    }

    @Test
    public void test4896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4896");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        boolean boolean22 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap1.new HeapNode(6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap1.new HeapNode(32);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test4897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4897");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        int int7 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test4898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4898");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        boolean boolean5 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        int int16 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap18.meld(fibonacciHeap30);
        int[] intArray36 = fibonacciHeap30.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap30.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap30.new HeapNode(32);
        fibonacciHeap13.delete(heapNode39);
        int int41 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap13.findMin();
        boolean boolean43 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap13.insert(7);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int47 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(heapNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test4899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4899");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap3.new HeapNode(10);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        fibonacciHeap26.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.meld(fibonacciHeap26);
        int[] intArray32 = fibonacciHeap26.countersRep();
        boolean boolean33 = fibonacciHeap26.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap26.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap37.findMin();
        int int39 = heapNode38.key;
        fibonacciHeap26.delete(heapNode38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap42.new HeapNode((int) (short) 0);
        fibonacciHeap26.meld(fibonacciHeap42);
        int[] intArray50 = fibonacciHeap26.countersRep();
        int int51 = fibonacciHeap26.potential();
        fibonacciHeap1.meld(fibonacciHeap26);
        fibonacciHeap26.deleteMin();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
    }

    @Test
    public void test4900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4900");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.insert((-1));
        int int24 = fibonacciHeap1.size();
        int int25 = fibonacciHeap1.size();
        boolean boolean26 = fibonacciHeap1.empty();
        boolean boolean27 = fibonacciHeap1.empty();
        int int28 = fibonacciHeap1.potential();
        boolean boolean29 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test4901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4901");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(32);
        int int11 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.findMin();
        int int16 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap18.meld(fibonacciHeap30);
        int[] intArray36 = fibonacciHeap18.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap18.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap39.meld(fibonacciHeap51);
        int[] intArray57 = fibonacciHeap51.countersRep();
        boolean boolean58 = fibonacciHeap51.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap51.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap62.findMin();
        int int64 = heapNode63.key;
        fibonacciHeap51.delete(heapNode63);
        fibonacciHeap18.delete(heapNode63);
        fibonacciHeap13.meld(fibonacciHeap18);
        fibonacciHeap4.meld(fibonacciHeap18);
        int int69 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap4.new HeapNode((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test4902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4902");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        boolean boolean12 = fibonacciHeap5.empty();
        int int13 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap15.insert(1);
        boolean boolean18 = fibonacciHeap15.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap23.insert(0);
        fibonacciHeap20.delete(heapNode26);
        heapNode26.key = (short) 1;
        fibonacciHeap15.delete(heapNode26);
        int int31 = fibonacciHeap15.potential();
        boolean boolean32 = fibonacciHeap15.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray35 = fibonacciHeap34.countersRep();
        fibonacciHeap34.deleteMin();
        fibonacciHeap15.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap34.new HeapNode((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap34);
        int int41 = fibonacciHeap5.size();
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap5.new HeapNode(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test4903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4903");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.size();
        boolean boolean20 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap22.insert(0);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        fibonacciHeap40.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap28.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap28.insert((-1));
        fibonacciHeap22.meld(fibonacciHeap28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap51.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap1.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap65.meld(fibonacciHeap68);
        fibonacciHeap62.meld(fibonacciHeap68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap62.new HeapNode((int) (short) 10);
        heapNode72.key = 2;
        int int75 = heapNode72.getKey();
        int int76 = heapNode72.key;
        heapNode72.key = (-1);
        int int79 = heapNode72.key;
        heapNode72.key = 100;
        fibonacciHeap1.delete(heapNode72);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test4904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4904");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.findMin();
        int int9 = heapNode8.getKey();
        int int10 = heapNode8.key;
        fibonacciHeap1.delete(heapNode8);
        int int12 = heapNode8.getKey();
        heapNode8.key = 52;
        int int15 = heapNode8.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test4905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4905");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        int int10 = fibonacciHeap7.potential();
        fibonacciHeap7.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.findMin();
        int int14 = fibonacciHeap7.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(heapNode12);
        org.junit.Assert.assertNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4906");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.size();
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap20.insert((int) 'a');
        java.lang.Class<?> wildcardClass29 = heapNode28.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test4907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4907");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        heapNode7.key = (byte) 100;
        heapNode7.key = (-1);
        heapNode7.key = 8;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test4908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4908");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode(0);
        int int13 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap15.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        fibonacciHeap27.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap27.new HeapNode(0);
        fibonacciHeap15.meld(fibonacciHeap27);
        int[] intArray33 = fibonacciHeap15.countersRep();
        int int34 = fibonacciHeap15.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap36.delete(heapNode42);
        fibonacciHeap15.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap36.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap36.findMin();
        fibonacciHeap1.meld(fibonacciHeap36);
        int int49 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test4909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4909");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap1.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        fibonacciHeap39.meld(fibonacciHeap46);
        boolean boolean49 = fibonacciHeap46.empty();
        int int50 = fibonacciHeap46.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap46.insert(100);
        fibonacciHeap1.delete(heapNode52);
        boolean boolean54 = fibonacciHeap1.empty();
        int int55 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test4910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4910");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap7.insert((-1));
        fibonacciHeap1.meld(fibonacciHeap7);
        int int28 = fibonacciHeap1.potential();
        int int29 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        int[] intArray50 = fibonacciHeap32.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap32.findMin();
        heapNode51.key = 35;
        fibonacciHeap1.delete(heapNode51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap1.insert(97);
        boolean boolean57 = fibonacciHeap1.empty();
        int int58 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
    }

    @Test
    public void test4911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4911");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        int[] intArray2 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        int int13 = fibonacciHeap11.potential();
        int int14 = fibonacciHeap11.size();
        boolean boolean15 = fibonacciHeap11.empty();
        int int16 = fibonacciHeap11.potential();
        int int17 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap18.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap22.countersRep();
        fibonacciHeap18.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap22.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap45.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        fibonacciHeap57.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap57.new HeapNode(0);
        fibonacciHeap45.meld(fibonacciHeap57);
        int[] intArray63 = fibonacciHeap57.countersRep();
        int int64 = fibonacciHeap57.size();
        int int65 = fibonacciHeap57.size();
        fibonacciHeap22.meld(fibonacciHeap57);
        int int67 = fibonacciHeap57.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap57.insert(52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap57.new HeapNode(52);
        fibonacciHeap11.delete(heapNode71);
        fibonacciHeap1.delete(heapNode71);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(heapNode69);
    }

    @Test
    public void test4912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4912");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.insert(0);
        int int12 = heapNode11.key;
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4913");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.insert(5);
        boolean boolean12 = fibonacciHeap7.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4914");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.findMin();
        boolean boolean23 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.findMin();
        int int25 = fibonacciHeap1.size();
        int int26 = fibonacciHeap1.size();
        java.lang.Class<?> wildcardClass27 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test4915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4915");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap30.meld(fibonacciHeap36);
        int int38 = fibonacciHeap36.potential();
        int int39 = fibonacciHeap36.size();
        boolean boolean40 = fibonacciHeap36.empty();
        int[] intArray41 = fibonacciHeap36.countersRep();
        fibonacciHeap1.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap1.new HeapNode((int) 'a');
        int int45 = heapNode44.getKey();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[3]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
    }

    @Test
    public void test4916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4916");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.findMin();
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap15.insert(1);
        boolean boolean18 = fibonacciHeap15.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap23.insert(0);
        fibonacciHeap20.delete(heapNode26);
        heapNode26.key = (short) 1;
        fibonacciHeap15.delete(heapNode26);
        int int31 = fibonacciHeap15.potential();
        boolean boolean32 = fibonacciHeap15.empty();
        fibonacciHeap15.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap15.findMin();
        int int35 = fibonacciHeap15.potential();
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap9.new HeapNode(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap9.insert((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(heapNode40);
    }

    @Test
    public void test4917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4917");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap18.countersRep();
        boolean boolean25 = fibonacciHeap18.empty();
        fibonacciHeap1.meld(fibonacciHeap18);
        boolean boolean27 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap29.findMin();
        int[] intArray32 = fibonacciHeap29.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap29.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap29.insert((int) (byte) 1);
        int int37 = heapNode36.getKey();
        fibonacciHeap1.delete(heapNode36);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1]");
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test4918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4918");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        fibonacciHeap10.deleteMin();
        int[] intArray14 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap10.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap10.findMin();
        boolean boolean17 = fibonacciHeap10.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNull(heapNode15);
        org.junit.Assert.assertNull(heapNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test4919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4919");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        fibonacciHeap1.delete(heapNode14);
        int[] intArray18 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        fibonacciHeap33.delete(heapNode39);
        fibonacciHeap23.meld(fibonacciHeap33);
        int[] intArray42 = fibonacciHeap23.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap46.insert(1);
        int int49 = heapNode48.key;
        int int50 = heapNode48.key;
        heapNode48.key = (-1);
        int int53 = heapNode48.getKey();
        fibonacciHeap44.delete(heapNode48);
        int int55 = fibonacciHeap44.size();
        boolean boolean56 = fibonacciHeap44.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap44.findMin();
        fibonacciHeap23.meld(fibonacciHeap44);
        fibonacciHeap1.meld(fibonacciHeap44);
        int int60 = fibonacciHeap44.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(heapNode57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test4920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4920");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int int15 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        fibonacciHeap17.delete(heapNode27);
        boolean boolean30 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap17.insert(3);
        int int33 = heapNode32.getKey();
        fibonacciHeap1.delete(heapNode32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap39.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap51.meld(fibonacciHeap57);
        fibonacciHeap39.meld(fibonacciHeap51);
        fibonacciHeap1.meld(fibonacciHeap51);
        boolean boolean61 = fibonacciHeap1.empty();
        int[] intArray62 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[7, 0, 0]");
    }

    @Test
    public void test4921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4921");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode(0);
        int int13 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap15.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        fibonacciHeap27.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap27.new HeapNode(0);
        fibonacciHeap15.meld(fibonacciHeap27);
        int[] intArray33 = fibonacciHeap15.countersRep();
        int int34 = fibonacciHeap15.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap36.delete(heapNode42);
        fibonacciHeap15.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap36.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap36.findMin();
        fibonacciHeap1.meld(fibonacciHeap36);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNull(heapNode47);
    }

    @Test
    public void test4922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4922");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap6.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap6.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        boolean boolean46 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap39.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap50.findMin();
        int int52 = heapNode51.key;
        fibonacciHeap39.delete(heapNode51);
        fibonacciHeap6.delete(heapNode51);
        fibonacciHeap1.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap57.new HeapNode((int) (short) 0);
        fibonacciHeap57.deleteMin();
        boolean boolean65 = fibonacciHeap57.empty();
        int[] intArray66 = fibonacciHeap57.countersRep();
        fibonacciHeap6.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap57.new HeapNode(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1]");
    }

    @Test
    public void test4923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4923");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert((int) ' ');
        int int28 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.new HeapNode((int) (byte) -1);
        int int31 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap45.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap45.new HeapNode(0);
        fibonacciHeap33.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        fibonacciHeap45.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap56.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap65.meld(fibonacciHeap68);
        fibonacciHeap68.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap68.new HeapNode(0);
        fibonacciHeap56.meld(fibonacciHeap68);
        fibonacciHeap52.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap56.insert((int) (byte) 10);
        fibonacciHeap4.meld(fibonacciHeap56);
        int int78 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap80 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap80.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap80.new HeapNode(10);
        int int85 = heapNode84.key;
        fibonacciHeap4.delete(heapNode84);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(heapNode76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 8 + "'", int78 == 8);
        org.junit.Assert.assertNotNull(heapNode82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
    }

    @Test
    public void test4924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4924");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert((int) ' ');
        int int28 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.insert((int) (byte) -1);
        int int31 = heapNode30.getKey();
        heapNode30.key = (short) 0;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test4925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4925");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        int int7 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap4.new HeapNode(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
    }

    @Test
    public void test4926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4926");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap26.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap30.findMin();
        int int33 = fibonacciHeap30.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap34.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode((int) (short) 100);
        boolean boolean39 = fibonacciHeap34.empty();
        fibonacciHeap30.meld(fibonacciHeap34);
        boolean boolean41 = fibonacciHeap34.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap34.new HeapNode(2);
        heapNode43.key = 35;
        fibonacciHeap26.delete(heapNode43);
        fibonacciHeap13.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap26.new HeapNode((int) ' ');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test4927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4927");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert((int) (byte) 10);
        boolean boolean45 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap24.insert((int) (short) -1);
        int int48 = heapNode47.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test4928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4928");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        int int36 = fibonacciHeap31.size();
        fibonacciHeap31.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap31);
        int int39 = fibonacciHeap31.potential();
        java.lang.Class<?> wildcardClass40 = fibonacciHeap31.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test4929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4929");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        int int29 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap5.insert((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(heapNode31);
    }

    @Test
    public void test4930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4930");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap13.findMin();
        int[] intArray21 = fibonacciHeap13.countersRep();
        int[] intArray22 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap24.findMin();
        int[] intArray43 = fibonacciHeap24.countersRep();
        int[] intArray44 = fibonacciHeap24.countersRep();
        fibonacciHeap13.meld(fibonacciHeap24);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNull(heapNode20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3, 0, 0]");
    }

    @Test
    public void test4931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4931");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        int int35 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap24.new HeapNode((int) '#');
        int int38 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap24.insert(2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(heapNode41);
    }

    @Test
    public void test4932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4932");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        fibonacciHeap1.deleteMin();
        int int23 = fibonacciHeap1.potential();
        int[] intArray24 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
    }

    @Test
    public void test4933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4933");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int[] intArray9 = fibonacciHeap1.countersRep();
        int[] intArray10 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap35.meld(fibonacciHeap41);
        fibonacciHeap24.meld(fibonacciHeap35);
        int[] intArray44 = fibonacciHeap24.countersRep();
        boolean boolean45 = fibonacciHeap24.empty();
        boolean boolean46 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test4934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4934");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        fibonacciHeap46.meld(fibonacciHeap53);
        fibonacciHeap24.meld(fibonacciHeap53);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap59.insert(1);
        int int62 = heapNode61.key;
        heapNode61.key = '4';
        heapNode61.key = 1;
        fibonacciHeap24.delete(heapNode61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap69.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap69.new HeapNode(10);
        fibonacciHeap69.deleteMin();
        int int75 = fibonacciHeap69.size();
        fibonacciHeap69.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap69.insert((int) (byte) 10);
        int int79 = fibonacciHeap69.potential();
        fibonacciHeap24.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap69.findMin();
        fibonacciHeap69.deleteMin();
        int int83 = fibonacciHeap69.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(heapNode78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(heapNode81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test4935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4935");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert(0);
        int int11 = heapNode10.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4936");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.insert(4);
        int int28 = fibonacciHeap20.potential();
        boolean boolean29 = fibonacciHeap20.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test4937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4937");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.new HeapNode((int) (short) 10);
        int int43 = fibonacciHeap32.potential();
        fibonacciHeap24.meld(fibonacciHeap32);
        int int45 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap32.insert(52);
        int int48 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap32.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(heapNode49);
    }

    @Test
    public void test4938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4938");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        boolean boolean5 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        int int16 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap18.meld(fibonacciHeap30);
        int[] intArray36 = fibonacciHeap30.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap30.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap30.new HeapNode(32);
        fibonacciHeap13.delete(heapNode39);
        int int41 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap13.findMin();
        boolean boolean43 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap13.insert(7);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap13.insert(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(heapNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode48);
    }

    @Test
    public void test4939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4939");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.insert(1);
        int int26 = heapNode25.key;
        int int27 = heapNode25.key;
        fibonacciHeap17.delete(heapNode25);
        int int29 = heapNode25.key;
        int int30 = heapNode25.key;
        fibonacciHeap4.delete(heapNode25);
        int int32 = heapNode25.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test4940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4940");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap11.meld(fibonacciHeap17);
        int int19 = fibonacciHeap17.potential();
        int int20 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap34.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap34.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap34.new HeapNode(32);
        fibonacciHeap17.delete(heapNode43);
        boolean boolean45 = fibonacciHeap17.empty();
        fibonacciHeap17.deleteMin();
        boolean boolean47 = fibonacciHeap17.empty();
        int[] intArray48 = fibonacciHeap17.countersRep();
        fibonacciHeap4.meld(fibonacciHeap17);
        int int50 = fibonacciHeap4.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(heapNode41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test4941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4941");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        boolean boolean23 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode((-1));
        int int26 = fibonacciHeap20.size();
        int int27 = fibonacciHeap20.size();
        int int28 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap20.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap20.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode30);
    }

    @Test
    public void test4942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4942");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int int21 = fibonacciHeap1.size();
        int int22 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.insert((-1));
        int[] intArray25 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap28.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap35.insert(0);
        fibonacciHeap32.delete(heapNode38);
        fibonacciHeap28.delete(heapNode38);
        boolean boolean41 = fibonacciHeap28.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap28.insert(3);
        boolean boolean44 = fibonacciHeap28.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap28.insert((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap28.new HeapNode(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap50.insert(0);
        int int54 = heapNode53.getKey();
        heapNode53.key = (byte) -1;
        int int57 = heapNode53.getKey();
        fibonacciHeap28.delete(heapNode53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap28.insert(10);
        fibonacciHeap1.delete(heapNode60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap1.insert((int) (byte) 10);
        int[] intArray64 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[2, 0]");
    }

    @Test
    public void test4943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4943");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap2 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int3 = fibonacciHeap2.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap2.meld(fibonacciHeap5);
        int int7 = fibonacciHeap2.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap2.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        int[] intArray31 = fibonacciHeap13.countersRep();
        fibonacciHeap9.meld(fibonacciHeap13);
        fibonacciHeap2.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap35.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(0);
        fibonacciHeap35.meld(fibonacciHeap47);
        int[] intArray53 = fibonacciHeap35.countersRep();
        fibonacciHeap9.meld(fibonacciHeap35);
        fibonacciHeap0.meld(fibonacciHeap9);
        int int56 = fibonacciHeap0.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
    }

    @Test
    public void test4944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4944");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        int int21 = fibonacciHeap1.size();
        int int22 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test4945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4945");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.insert(8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(heapNode11);
    }

    @Test
    public void test4946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4946");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        int int15 = fibonacciHeap10.size();
        int[] intArray16 = fibonacciHeap10.countersRep();
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap10.new HeapNode(0);
        int int20 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap10.findMin();
        boolean boolean22 = fibonacciHeap10.empty();
        int int23 = fibonacciHeap10.potential();
        int int24 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap10.insert(8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(heapNode26);
    }

    @Test
    public void test4947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4947");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        int int9 = heapNode8.getKey();
        int int10 = heapNode8.key;
        int int11 = heapNode8.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4948");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        java.lang.Class<?> wildcardClass8 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test4949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4949");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        fibonacciHeap0.deleteMin();
        fibonacciHeap0.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap30.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap43.insert(0);
        fibonacciHeap40.delete(heapNode46);
        fibonacciHeap30.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap40.new HeapNode(32);
        int int51 = heapNode50.getKey();
        int int52 = heapNode50.key;
        fibonacciHeap0.delete(heapNode50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 32 + "'", int52 == 32);
    }

    @Test
    public void test4950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4950");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.new HeapNode((int) '#');
        int int12 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap26.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.delete(heapNode38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap14.findMin();
        fibonacciHeap7.delete(heapNode40);
        boolean boolean42 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap7.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap7.findMin();
        int int46 = fibonacciHeap7.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(heapNode45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test4951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4951");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        boolean boolean15 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap1.insert((int) (short) 100);
        int int18 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test4952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4952");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(1);
        int[] intArray11 = fibonacciHeap4.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
    }

    @Test
    public void test4953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4953");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        boolean boolean22 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        boolean boolean27 = fibonacciHeap24.empty();
        int int28 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap29.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap45.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap45.new HeapNode(0);
        fibonacciHeap33.meld(fibonacciHeap45);
        int[] intArray51 = fibonacciHeap33.countersRep();
        fibonacciHeap29.meld(fibonacciHeap33);
        fibonacciHeap24.meld(fibonacciHeap33);
        fibonacciHeap24.deleteMin();
        int int55 = fibonacciHeap24.potential();
        int[] intArray56 = fibonacciHeap24.countersRep();
        int[] intArray57 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap24.new HeapNode((int) (byte) 10);
        fibonacciHeap3.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap3.insert(3);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(heapNode62);
    }

    @Test
    public void test4954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4954");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        int int7 = fibonacciHeap1.size();
        int[] intArray8 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(heapNode10);
    }

    @Test
    public void test4955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4955");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        fibonacciHeap32.meld(fibonacciHeap39);
        fibonacciHeap1.meld(fibonacciHeap39);
        int[] intArray43 = fibonacciHeap39.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[3]");
    }

    @Test
    public void test4956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4956");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap9.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap9);
        boolean boolean15 = fibonacciHeap9.empty();
        int int16 = fibonacciHeap9.size();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4957");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert(3);
        boolean boolean17 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap1.insert((int) (short) 1);
        int[] intArray20 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode23);
    }

    @Test
    public void test4958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4958");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int24 = fibonacciHeap23.size();
        fibonacciHeap4.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap30.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap37.insert(0);
        fibonacciHeap34.delete(heapNode40);
        fibonacciHeap30.delete(heapNode40);
        fibonacciHeap27.delete(heapNode40);
        fibonacciHeap4.delete(heapNode40);
        fibonacciHeap1.delete(heapNode40);
        int int46 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(heapNode47);
    }

    @Test
    public void test4959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4959");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        boolean boolean23 = fibonacciHeap17.empty();
        fibonacciHeap1.meld(fibonacciHeap17);
        int[] intArray25 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap1.insert(52);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1]");
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
    }

    @Test
    public void test4960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4960");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.findMin();
        boolean boolean24 = fibonacciHeap20.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4961");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int[] intArray4 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNull(heapNode5);
    }

    @Test
    public void test4962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4962");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode2);
    }

    @Test
    public void test4963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4963");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.findMin();
        int int22 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.new HeapNode(3);
        heapNode24.key = (short) -1;
        heapNode24.key = 52;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test4964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4964");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        heapNode27.key = (short) 1;
        int int31 = heapNode27.key;
        fibonacciHeap1.delete(heapNode27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap1.insert((int) (short) 1);
        boolean boolean35 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.potential();
        fibonacciHeap37.deleteMin();
        int[] intArray40 = fibonacciHeap37.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap37.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap37.new HeapNode(4);
        fibonacciHeap1.delete(heapNode44);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
    }

    @Test
    public void test4965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4965");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap10.new HeapNode((int) (short) 100);
        int int33 = heapNode32.key;
        int int34 = heapNode32.key;
        heapNode32.key = 8;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
    }

    @Test
    public void test4966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4966");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int24 = fibonacciHeap23.size();
        fibonacciHeap4.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap30.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap37.insert(0);
        fibonacciHeap34.delete(heapNode40);
        fibonacciHeap30.delete(heapNode40);
        fibonacciHeap27.delete(heapNode40);
        fibonacciHeap4.delete(heapNode40);
        fibonacciHeap1.delete(heapNode40);
        int int46 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap1.new HeapNode(2);
        boolean boolean49 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap1.insert(0);
        int[] intArray52 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1]");
    }

    @Test
    public void test4967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4967");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) ' ');
        int[] intArray6 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert(32);
        int int10 = heapNode9.getKey();
        int int11 = heapNode9.key;
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1]");
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
    }

    @Test
    public void test4968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4968");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.findMin();
        int int7 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap11.insert(1);
        int int14 = heapNode13.key;
        int int15 = heapNode13.key;
        heapNode13.key = (-1);
        int int18 = heapNode13.getKey();
        fibonacciHeap9.delete(heapNode13);
        int int20 = fibonacciHeap9.size();
        boolean boolean21 = fibonacciHeap9.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap9.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap9.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap9.findMin();
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap28.insert(1);
        boolean boolean31 = fibonacciHeap28.empty();
        int int32 = fibonacciHeap28.size();
        int int33 = fibonacciHeap28.size();
        boolean boolean34 = fibonacciHeap28.empty();
        int int35 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap28.insert((int) (byte) 10);
        fibonacciHeap9.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap9.insert((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(heapNode40);
    }

    @Test
    public void test4969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4969");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        int int24 = fibonacciHeap13.potential();
        int int25 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap13.new HeapNode((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap13.delete(heapNode28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode.getKey()\" because \"x\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test4970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4970");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap9.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap9.insert(52);
        boolean boolean17 = fibonacciHeap9.empty();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4971");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap23.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap23.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap23.findMin();
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        boolean boolean32 = fibonacciHeap23.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap23.insert((-1));
        int int35 = heapNode34.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test4972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4972");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        int[] intArray52 = fibonacciHeap34.countersRep();
        fibonacciHeap8.meld(fibonacciHeap34);
        int int54 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap34.findMin();
        int int56 = heapNode55.key;
        heapNode55.key = (byte) 100;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test4973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4973");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap4.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.findMin();
        int int14 = heapNode13.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test4974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4974");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.insert((int) (byte) 100);
        java.lang.Class<?> wildcardClass14 = fibonacciHeap1.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4975");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(0);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int[] intArray15 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap17.new HeapNode((int) (short) 0);
        int int24 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap17.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap17.insert((int) (byte) 1);
        fibonacciHeap1.meld(fibonacciHeap17);
        boolean boolean30 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap17.findMin();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[2, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(heapNode31);
    }

    @Test
    public void test4976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4976");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        fibonacciHeap13.meld(fibonacciHeap24);
        int[] intArray33 = fibonacciHeap13.countersRep();
        int[] intArray34 = fibonacciHeap13.countersRep();
        fibonacciHeap13.deleteMin();
        fibonacciHeap13.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[4, 0, 0]");
    }

    @Test
    public void test4977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4977");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap34.countersRep();
        boolean boolean41 = fibonacciHeap34.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap34.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap45.findMin();
        int int47 = heapNode46.key;
        fibonacciHeap34.delete(heapNode46);
        fibonacciHeap1.delete(heapNode46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap1.findMin();
        int int52 = heapNode51.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
    }

    @Test
    public void test4978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4978");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap3.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap3.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        boolean boolean16 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap13.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap13.new HeapNode((int) '#');
        fibonacciHeap3.delete(heapNode20);
        fibonacciHeap1.delete(heapNode20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.insert(10);
        java.lang.Class<?> wildcardClass25 = heapNode24.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test4979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4979");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        heapNode4.key = 97;
        heapNode4.key = 32;
        heapNode4.key = 'a';
        int int11 = heapNode4.getKey();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test4980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4980");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap14.insert(0);
        int int18 = heapNode17.getKey();
        heapNode17.key = (byte) -1;
        fibonacciHeap10.delete(heapNode17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap10.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap10.findMin();
        fibonacciHeap10.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(heapNode22);
        org.junit.Assert.assertNull(heapNode23);
    }

    @Test
    public void test4981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4981");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap13.potential();
        int int20 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) '4');
        int int23 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap25.new HeapNode((int) (short) 0);
        int int32 = fibonacciHeap25.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap44.insert(0);
        fibonacciHeap41.delete(heapNode47);
        fibonacciHeap37.delete(heapNode47);
        fibonacciHeap34.delete(heapNode47);
        fibonacciHeap25.delete(heapNode47);
        fibonacciHeap13.delete(heapNode47);
        int int53 = heapNode47.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test4982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4982");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        int[] intArray23 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.findMin();
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap13.insert(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap29.insert(0);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap35.insert(1);
        int int38 = heapNode37.key;
        int int39 = heapNode37.key;
        fibonacciHeap29.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        int int47 = fibonacciHeap42.size();
        fibonacciHeap29.meld(fibonacciHeap42);
        int int49 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap29.insert(3);
        heapNode51.key = 100;
        int int54 = heapNode51.getKey();
        fibonacciHeap13.delete(heapNode51);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1]");
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
    }

    @Test
    public void test4983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4983");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap18.countersRep();
        boolean boolean25 = fibonacciHeap18.empty();
        fibonacciHeap1.meld(fibonacciHeap18);
        boolean boolean27 = fibonacciHeap18.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap18.new HeapNode(97);
        heapNode29.key = (short) 100;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test4984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4984");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap36.delete(heapNode42);
        fibonacciHeap32.delete(heapNode42);
        fibonacciHeap22.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap32.new HeapNode(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap32.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap51.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap51.insert((int) (short) 0);
        fibonacciHeap32.delete(heapNode54);
        int int56 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap58.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        fibonacciHeap70.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap70.new HeapNode(0);
        fibonacciHeap58.meld(fibonacciHeap70);
        int[] intArray76 = fibonacciHeap70.countersRep();
        boolean boolean77 = fibonacciHeap70.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap70.insert((int) (byte) 100);
        int[] intArray80 = fibonacciHeap70.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap70.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap70.findMin();
        int int83 = fibonacciHeap70.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap70.findMin();
        fibonacciHeap32.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode86 = fibonacciHeap32.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(heapNode79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1]");
        org.junit.Assert.assertNotNull(heapNode81);
        org.junit.Assert.assertNotNull(heapNode82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(heapNode84);
        org.junit.Assert.assertNotNull(heapNode86);
    }

    @Test
    public void test4985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4985");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        int int12 = fibonacciHeap9.potential();
        int[] intArray13 = fibonacciHeap9.countersRep();
        int int14 = fibonacciHeap9.size();
        int int15 = fibonacciHeap9.potential();
        fibonacciHeap1.meld(fibonacciHeap9);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4986");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.new HeapNode((int) (short) 10);
        int int43 = fibonacciHeap32.potential();
        fibonacciHeap24.meld(fibonacciHeap32);
        int int45 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap32.insert(52);
        int int48 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap50.deleteMin();
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        int int59 = fibonacciHeap54.size();
        fibonacciHeap50.meld(fibonacciHeap54);
        int[] intArray61 = fibonacciHeap50.countersRep();
        int int62 = fibonacciHeap50.potential();
        int int63 = fibonacciHeap50.potential();
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap50.findMin();
        fibonacciHeap32.meld(fibonacciHeap50);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(heapNode65);
    }

    @Test
    public void test4987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4987");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        fibonacciHeap20.meld(fibonacciHeap27);
        int int30 = fibonacciHeap27.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap27.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap27.insert(4);
        fibonacciHeap1.delete(heapNode34);
        boolean boolean36 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap1.insert((int) 'a');
        int int39 = heapNode38.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
    }

    @Test
    public void test4988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4988");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        int[] intArray5 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
    }

    @Test
    public void test4989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4989");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.insert(0);
        fibonacciHeap20.deleteMin();
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap20.insert((int) (byte) 1);
        fibonacciHeap20.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode28);
    }

    @Test
    public void test4990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4990");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        int int6 = fibonacciHeap1.size();
        boolean boolean7 = fibonacciHeap1.empty();
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode(9);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap1.meld(fibonacciHeap14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap.empty()\" because \"heap2\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(heapNode10);
    }

    @Test
    public void test4991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4991");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        fibonacciHeap1.delete(heapNode14);
        int[] intArray18 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.new HeapNode((int) (short) 1);
        fibonacciHeap1.meld(fibonacciHeap20);
        boolean boolean24 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(heapNode25);
    }

    @Test
    public void test4992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4992");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.size();
        boolean boolean20 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap22.insert(0);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        fibonacciHeap40.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap28.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap28.insert((-1));
        fibonacciHeap22.meld(fibonacciHeap28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap54.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int62 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap61.insert(0);
        fibonacciHeap58.delete(heapNode64);
        fibonacciHeap54.delete(heapNode64);
        heapNode64.key = ' ';
        int int69 = heapNode64.getKey();
        fibonacciHeap51.delete(heapNode64);
        int int71 = fibonacciHeap51.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap51.insert(10);
        int int74 = heapNode73.getKey();
        fibonacciHeap22.delete(heapNode73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap22.insert((int) '#');
        int int78 = heapNode77.key;
        int int79 = heapNode77.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 32 + "'", int69 == 32);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(heapNode77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
    }

    @Test
    public void test4993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4993");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap24.findMin();
        int[] intArray36 = fibonacciHeap24.countersRep();
        int int37 = fibonacciHeap24.potential();
        int int38 = fibonacciHeap24.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[6, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test4994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4994");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap28.findMin();
        int int30 = heapNode29.getKey();
        fibonacciHeap13.delete(heapNode29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap13.insert((int) (byte) 100);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap13.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNull(heapNode35);
    }

    @Test
    public void test4995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4995");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        int[] intArray3 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        fibonacciHeap17.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap17.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        int int35 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap30.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap41.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        fibonacciHeap53.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap53.new HeapNode(0);
        fibonacciHeap41.meld(fibonacciHeap53);
        int[] intArray59 = fibonacciHeap41.countersRep();
        fibonacciHeap37.meld(fibonacciHeap41);
        fibonacciHeap30.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap63.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap63.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap72.meld(fibonacciHeap75);
        fibonacciHeap75.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap75.new HeapNode(0);
        fibonacciHeap63.meld(fibonacciHeap75);
        int[] intArray81 = fibonacciHeap63.countersRep();
        fibonacciHeap37.meld(fibonacciHeap63);
        fibonacciHeap17.meld(fibonacciHeap37);
        fibonacciHeap1.meld(fibonacciHeap37);
        int int85 = fibonacciHeap37.potential();
        int int86 = fibonacciHeap37.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode88 = fibonacciHeap37.insert(10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 6 + "'", int86 == 6);
        org.junit.Assert.assertNotNull(heapNode88);
    }

    @Test
    public void test4996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4996");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        int int35 = fibonacciHeap24.size();
        int int36 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap46.meld(fibonacciHeap52);
        int int55 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap46.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap58.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap58.new HeapNode((int) (short) 100);
        int int67 = heapNode66.key;
        fibonacciHeap46.delete(heapNode66);
        fibonacciHeap38.meld(fibonacciHeap46);
        fibonacciHeap24.meld(fibonacciHeap46);
        int[] intArray71 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int74 = fibonacciHeap73.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap73.meld(fibonacciHeap76);
        fibonacciHeap76.deleteMin();
        int[] intArray79 = fibonacciHeap76.countersRep();
        int int80 = fibonacciHeap76.potential();
        int[] intArray81 = fibonacciHeap76.countersRep();
        int[] intArray82 = fibonacciHeap76.countersRep();
        fibonacciHeap24.meld(fibonacciHeap76);
        int int84 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode86 = fibonacciHeap24.new HeapNode(8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[8, 0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
    }

    @Test
    public void test4997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4997");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.new HeapNode(10);
        int int12 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray15 = fibonacciHeap14.countersRep();
        fibonacciHeap7.meld(fibonacciHeap14);
        fibonacciHeap14.deleteMin();
        fibonacciHeap14.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap14.new HeapNode(35);
        fibonacciHeap1.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap14.insert((int) (byte) 1);
        int int24 = heapNode23.key;
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test4998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4998");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (byte) 10);
        int int4 = heapNode3.key;
        heapNode3.key = 0;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test4999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4999");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap1.new HeapNode(0);
        int int32 = heapNode31.key;
        int int33 = heapNode31.getKey();
        heapNode31.key = 2;
        heapNode31.key = 9;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test5000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test5000");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap23.insert((-1));
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap23.findMin();
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        java.lang.Class<?> wildcardClass47 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }
}


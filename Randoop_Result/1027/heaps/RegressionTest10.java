package heaps;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test5001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5001");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.insert(4);
        fibonacciHeap1.deleteMin();
        int[] intArray23 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        fibonacciHeap25.deleteMin();
        int int27 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap29.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        fibonacciHeap33.delete(heapNode39);
        fibonacciHeap29.delete(heapNode39);
        boolean boolean42 = fibonacciHeap29.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap29.insert(3);
        boolean boolean45 = fibonacciHeap29.empty();
        fibonacciHeap25.meld(fibonacciHeap29);
        fibonacciHeap1.meld(fibonacciHeap25);
        boolean boolean48 = fibonacciHeap25.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test5002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5002");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap6.insert(0);
        int int10 = heapNode9.key;
        fibonacciHeap4.delete(heapNode9);
        boolean boolean12 = fibonacciHeap4.empty();
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.new HeapNode(6);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test5003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5003");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode(7);
        int int4 = heapNode3.getKey();
        int int5 = heapNode3.key;
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
    }

    @Test
    public void test5004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5004");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        int int89 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap24.new HeapNode(97);
        fibonacciHeap24.deleteMin();
        int[] intArray94 = fibonacciHeap24.countersRep();
        int int95 = fibonacciHeap24.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test5005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5005");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        int int89 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode91 = fibonacciHeap24.findMin();
        int int92 = heapNode91.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test5006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5006");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        boolean boolean4 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test5007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5007");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode(0);
        int int13 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap15.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        fibonacciHeap27.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap27.new HeapNode(0);
        fibonacciHeap15.meld(fibonacciHeap27);
        int[] intArray33 = fibonacciHeap15.countersRep();
        int int34 = fibonacciHeap15.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap36.delete(heapNode42);
        fibonacciHeap15.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap36.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap36.findMin();
        fibonacciHeap1.meld(fibonacciHeap36);
        int int49 = fibonacciHeap36.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap36.meld(fibonacciHeap50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap.empty()\" because \"heap2\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test5008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5008");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.new HeapNode((int) (short) 10);
        int int43 = fibonacciHeap32.potential();
        fibonacciHeap24.meld(fibonacciHeap32);
        int int45 = fibonacciHeap32.size();
        int int46 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap32.findMin();
        java.lang.Class<?> wildcardClass48 = heapNode47.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test5009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5009");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.insert(4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(heapNode8);
    }

    @Test
    public void test5010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5010");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.insert((int) (byte) 0);
        int int12 = fibonacciHeap7.potential();
        int int13 = fibonacciHeap7.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test5011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5011");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap3.new HeapNode(10);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        fibonacciHeap26.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap26.new HeapNode(0);
        fibonacciHeap14.meld(fibonacciHeap26);
        int[] intArray32 = fibonacciHeap26.countersRep();
        boolean boolean33 = fibonacciHeap26.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap26.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap37.findMin();
        int int39 = heapNode38.key;
        fibonacciHeap26.delete(heapNode38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap42.new HeapNode((int) (short) 0);
        fibonacciHeap26.meld(fibonacciHeap42);
        int[] intArray50 = fibonacciHeap26.countersRep();
        int int51 = fibonacciHeap26.potential();
        fibonacciHeap1.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap60.meld(fibonacciHeap63);
        fibonacciHeap57.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap57.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap57.new HeapNode(0);
        int int70 = heapNode69.key;
        fibonacciHeap1.delete(heapNode69);
        int int72 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap1.findMin();
        boolean boolean74 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test5012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5012");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        int int7 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap4.new HeapNode(100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test5013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5013");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int int43 = fibonacciHeap24.size();
        int int44 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap24.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap24.insert((int) '#');
        heapNode48.key = 8;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(heapNode48);
    }

    @Test
    public void test5014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5014");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap10.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode(10);
        fibonacciHeap10.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap17.new HeapNode((int) (short) 0);
        heapNode23.key = (byte) 100;
        heapNode23.key = (-1);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap10.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test5015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5015");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap10.new HeapNode((int) '#');
        int int18 = fibonacciHeap10.potential();
        int int19 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap10.insert((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
    }

    @Test
    public void test5016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5016");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        boolean boolean2 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(10);
        fibonacciHeap4.deleteMin();
        int int10 = fibonacciHeap4.size();
        boolean boolean11 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap4.insert(4);
        int[] intArray16 = fibonacciHeap4.countersRep();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1]");
    }

    @Test
    public void test5017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5017");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        int[] intArray52 = fibonacciHeap34.countersRep();
        fibonacciHeap8.meld(fibonacciHeap34);
        int int54 = fibonacciHeap34.size();
        int int55 = fibonacciHeap34.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test5018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5018");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        int int6 = fibonacciHeap1.size();
        boolean boolean7 = fibonacciHeap1.empty();
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap1.new HeapNode(10);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNotNull(heapNode12);
    }

    @Test
    public void test5019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5019");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap34.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap34.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        boolean boolean47 = fibonacciHeap44.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap44.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap44.new HeapNode((int) '#');
        fibonacciHeap34.delete(heapNode51);
        fibonacciHeap1.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap34.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap34.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap34.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap60.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap60.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int70 = fibonacciHeap69.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap69.meld(fibonacciHeap72);
        fibonacciHeap72.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap72.new HeapNode(0);
        fibonacciHeap60.meld(fibonacciHeap72);
        int[] intArray78 = fibonacciHeap72.countersRep();
        int int79 = fibonacciHeap72.size();
        int int80 = fibonacciHeap72.size();
        fibonacciHeap72.deleteMin();
        int[] intArray82 = fibonacciHeap72.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap72.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap72.new HeapNode(1);
        fibonacciHeap72.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode88 = fibonacciHeap72.insert((int) (byte) 10);
        fibonacciHeap34.meld(fibonacciHeap72);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNull(heapNode83);
        org.junit.Assert.assertNotNull(heapNode88);
    }

    @Test
    public void test5020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5020");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        int[] intArray5 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        fibonacciHeap25.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap36.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        fibonacciHeap48.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode(0);
        fibonacciHeap36.meld(fibonacciHeap48);
        fibonacciHeap32.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap36.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap36.new HeapNode(7);
        fibonacciHeap9.meld(fibonacciHeap36);
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap1.new HeapNode((int) 'a');
        int int63 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap65.meld(fibonacciHeap68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int72 = fibonacciHeap71.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap74 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap71.meld(fibonacciHeap74);
        fibonacciHeap68.meld(fibonacciHeap74);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap74.insert((int) (short) 100);
        fibonacciHeap1.delete(heapNode78);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(heapNode78);
    }

    @Test
    public void test5021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5021");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap18.insert(1);
        int int21 = heapNode20.key;
        int int22 = heapNode20.key;
        heapNode20.key = (-1);
        int int25 = heapNode20.key;
        fibonacciHeap1.delete(heapNode20);
        int[] intArray27 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap29.new HeapNode((-1));
        fibonacciHeap1.delete(heapNode32);
        int[] intArray34 = fibonacciHeap1.countersRep();
        int[] intArray35 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNull(heapNode37);
    }

    @Test
    public void test5022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5022");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        int[] intArray33 = fibonacciHeap30.countersRep();
        int int34 = fibonacciHeap30.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap24.delete(heapNode36);
        fibonacciHeap24.deleteMin();
        int int39 = fibonacciHeap24.potential();
        int int40 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap42.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        fibonacciHeap54.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap54.new HeapNode(0);
        fibonacciHeap42.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int62 = fibonacciHeap61.size();
        fibonacciHeap42.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap42.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap42.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int70 = fibonacciHeap69.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap69.meld(fibonacciHeap72);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap69.meld(fibonacciHeap75);
        int int77 = fibonacciHeap75.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap75.new HeapNode((int) '#');
        int[] intArray80 = fibonacciHeap75.countersRep();
        fibonacciHeap42.meld(fibonacciHeap75);
        fibonacciHeap24.meld(fibonacciHeap75);
        int int83 = fibonacciHeap24.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[3]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test5023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5023");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        int int15 = fibonacciHeap10.size();
        int[] intArray16 = fibonacciHeap10.countersRep();
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap10.new HeapNode(0);
        int int20 = fibonacciHeap10.potential();
        int[] intArray21 = fibonacciHeap10.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[3, 0]");
    }

    @Test
    public void test5024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5024");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert(7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
    }

    @Test
    public void test5025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5025");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        int int33 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap35.insert(1);
        boolean boolean38 = fibonacciHeap35.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap43.insert(0);
        fibonacciHeap40.delete(heapNode46);
        heapNode46.key = (short) 1;
        fibonacciHeap35.delete(heapNode46);
        int int51 = fibonacciHeap35.potential();
        fibonacciHeap24.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        fibonacciHeap57.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap57.new HeapNode(0);
        int[] intArray62 = fibonacciHeap57.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap57.findMin();
        fibonacciHeap24.meld(fibonacciHeap57);
        int[] intArray65 = fibonacciHeap57.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNull(heapNode63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
    }

    @Test
    public void test5026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5026");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap8.new HeapNode((int) (short) 0);
        heapNode14.key = (byte) 100;
        heapNode14.key = (-1);
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(heapNode20);
    }

    @Test
    public void test5027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5027");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap18.countersRep();
        boolean boolean25 = fibonacciHeap18.empty();
        fibonacciHeap1.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap18.insert((int) 'a');
        int int31 = fibonacciHeap18.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test5028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5028");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        int int49 = fibonacciHeap39.potential();
        boolean boolean50 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap39.insert(6);
        int[] intArray53 = fibonacciHeap39.countersRep();
        java.lang.Class<?> wildcardClass54 = fibonacciHeap39.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test5029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5029");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        fibonacciHeap21.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(0);
        fibonacciHeap9.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        fibonacciHeap21.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        fibonacciHeap28.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap52.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap59.insert(0);
        fibonacciHeap56.delete(heapNode62);
        fibonacciHeap52.delete(heapNode62);
        boolean boolean65 = fibonacciHeap52.empty();
        fibonacciHeap28.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap28.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap28.new HeapNode((-1));
        fibonacciHeap1.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap28.findMin();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertNotNull(heapNode72);
    }

    @Test
    public void test5030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5030");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        boolean boolean9 = fibonacciHeap1.empty();
        int[] intArray10 = fibonacciHeap1.countersRep();
        int int11 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        int int31 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        fibonacciHeap33.delete(heapNode39);
        heapNode39.key = (short) 1;
        int int43 = heapNode39.key;
        fibonacciHeap13.delete(heapNode39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap13.insert((int) (short) 1);
        boolean boolean47 = fibonacciHeap13.empty();
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray49 = fibonacciHeap13.countersRep();
        int int50 = fibonacciHeap13.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test5031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5031");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap24.insert(0);
        int int37 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap24.insert((int) (byte) 10);
        int int41 = fibonacciHeap24.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
    }

    @Test
    public void test5032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5032");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        fibonacciHeap1.deleteMin();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap12.insert(0);
        fibonacciHeap9.delete(heapNode15);
        fibonacciHeap5.delete(heapNode15);
        boolean boolean18 = fibonacciHeap5.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap5.insert(3);
        boolean boolean21 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(heapNode23);
    }

    @Test
    public void test5033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5033");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        fibonacciHeap1.delete(heapNode14);
        int int18 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.new HeapNode((int) (short) -1);
        int int21 = heapNode20.key;
        int int22 = heapNode20.key;
        int int23 = heapNode20.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test5034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5034");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.findMin();
        fibonacciHeap1.meld(fibonacciHeap9);
        boolean boolean14 = fibonacciHeap9.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap16.deleteMin();
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        int int25 = fibonacciHeap20.size();
        fibonacciHeap16.meld(fibonacciHeap20);
        int[] intArray27 = fibonacciHeap16.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap16.insert(2);
        int int30 = heapNode29.key;
        fibonacciHeap9.delete(heapNode29);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test5035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5035");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap23.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap45.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap45.new HeapNode(0);
        fibonacciHeap33.meld(fibonacciHeap45);
        int[] intArray51 = fibonacciHeap33.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap33.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap54.insert(1);
        boolean boolean57 = fibonacciHeap54.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap62.insert(0);
        fibonacciHeap59.delete(heapNode65);
        heapNode65.key = (short) 1;
        fibonacciHeap54.delete(heapNode65);
        int int70 = fibonacciHeap54.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap54.insert(3);
        fibonacciHeap33.delete(heapNode72);
        fibonacciHeap23.meld(fibonacciHeap33);
        fibonacciHeap1.meld(fibonacciHeap23);
        int int76 = fibonacciHeap1.size();
        boolean boolean77 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(heapNode72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test5036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5036");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.insert((int) (byte) 0);
        java.lang.Class<?> wildcardClass27 = heapNode26.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test5037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5037");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap28.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap28.findMin();
        int[] intArray31 = fibonacciHeap28.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap28.insert((int) '4');
        int int34 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap28.findMin();
        int int36 = fibonacciHeap28.potential();
        fibonacciHeap13.meld(fibonacciHeap28);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1]");
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test5038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5038");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap3.insert(0);
        int int7 = heapNode6.key;
        fibonacciHeap1.delete(heapNode6);
        boolean boolean9 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test5039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5039");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(32);
        heapNode13.key = (short) 100;
        int int16 = heapNode13.key;
        heapNode13.key = 8;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test5040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5040");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap4.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap19.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap26.insert(0);
        fibonacciHeap23.delete(heapNode29);
        fibonacciHeap19.delete(heapNode29);
        boolean boolean32 = fibonacciHeap19.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap19.insert(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap41.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        fibonacciHeap53.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap53.new HeapNode(0);
        fibonacciHeap41.meld(fibonacciHeap53);
        int[] intArray59 = fibonacciHeap53.countersRep();
        boolean boolean60 = fibonacciHeap53.empty();
        fibonacciHeap36.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap36.findMin();
        fibonacciHeap19.delete(heapNode62);
        fibonacciHeap4.delete(heapNode62);
        int int65 = fibonacciHeap4.potential();
        boolean boolean66 = fibonacciHeap4.empty();
        int int67 = fibonacciHeap4.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test5041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5041");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.insert(1);
        boolean boolean9 = fibonacciHeap6.empty();
        fibonacciHeap6.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        int int15 = heapNode14.getKey();
        int int16 = heapNode14.key;
        heapNode14.key = (byte) -1;
        int int19 = heapNode14.key;
        fibonacciHeap6.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        int int30 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap28.new HeapNode((int) '#');
        int int33 = fibonacciHeap28.potential();
        fibonacciHeap6.meld(fibonacciHeap28);
        int int35 = fibonacciHeap28.potential();
        fibonacciHeap1.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        int[] intArray40 = fibonacciHeap38.countersRep();
        int int41 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap38.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap38.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(10);
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap54.new HeapNode((int) (short) 0);
        heapNode60.key = (byte) 100;
        heapNode60.key = (-1);
        fibonacciHeap47.delete(heapNode60);
        fibonacciHeap47.deleteMin();
        fibonacciHeap38.meld(fibonacciHeap47);
        int[] intArray68 = fibonacciHeap47.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap47.insert(32);
        fibonacciHeap1.meld(fibonacciHeap47);
        int[] intArray72 = fibonacciHeap1.countersRep();
        int int73 = fibonacciHeap1.size();
        boolean boolean74 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(heapNode70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[5, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test5042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5042");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.potential();
        int[] intArray12 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
    }

    @Test
    public void test5043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5043");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        int[] intArray34 = fibonacciHeap24.countersRep();
        fibonacciHeap4.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.findMin();
        fibonacciHeap37.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.insert(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap24.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap24.insert((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int50 = fibonacciHeap49.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap52.meld(fibonacciHeap55);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        fibonacciHeap55.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int69 = fibonacciHeap68.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap68.insert(0);
        fibonacciHeap65.delete(heapNode71);
        fibonacciHeap55.meld(fibonacciHeap65);
        fibonacciHeap65.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap65.insert(100);
        fibonacciHeap49.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap49.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap81 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap81.deleteMin();
        fibonacciHeap81.deleteMin();
        fibonacciHeap81.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap81.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap81.new HeapNode((int) (byte) 1);
        fibonacciHeap49.meld(fibonacciHeap81);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap49.insert((int) (short) 1);
        fibonacciHeap24.meld(fibonacciHeap49);
        int int92 = fibonacciHeap24.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertNotNull(heapNode76);
        org.junit.Assert.assertNull(heapNode85);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 7 + "'", int92 == 7);
    }

    @Test
    public void test5044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5044");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        int[] intArray8 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int30 = fibonacciHeap29.size();
        fibonacciHeap10.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap10.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap33.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        fibonacciHeap41.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap41.new HeapNode((int) (short) 10);
        int int52 = fibonacciHeap41.potential();
        fibonacciHeap33.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap41.new HeapNode((int) (byte) 0);
        fibonacciHeap1.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap41.insert((int) (byte) 0);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(heapNode58);
    }

    @Test
    public void test5045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5045");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap6.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        fibonacciHeap6.meld(fibonacciHeap18);
        int int27 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap6.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap6.findMin();
        fibonacciHeap1.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap1.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.insert(1);
        int int42 = heapNode41.key;
        fibonacciHeap35.delete(heapNode41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap35.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap35.insert((int) '4');
        fibonacciHeap1.meld(fibonacciHeap35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
    }

    @Test
    public void test5046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5046");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap11.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap18.insert(0);
        fibonacciHeap15.delete(heapNode21);
        fibonacciHeap11.delete(heapNode21);
        int int24 = heapNode21.key;
        fibonacciHeap1.delete(heapNode21);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test5047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5047");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.insert((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode9);
    }

    @Test
    public void test5048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5048");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap6.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        fibonacciHeap6.meld(fibonacciHeap18);
        int int27 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap6.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap6.findMin();
        fibonacciHeap1.meld(fibonacciHeap6);
        boolean boolean32 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap1.new HeapNode(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        int[] intArray42 = fibonacciHeap39.countersRep();
        int int43 = fibonacciHeap39.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap39.new HeapNode(0);
        int int46 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap39.insert((int) (short) 1);
        int int49 = fibonacciHeap39.size();
        int[] intArray50 = fibonacciHeap39.countersRep();
        boolean boolean51 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap39.insert((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap57.insert(1);
        boolean boolean60 = fibonacciHeap57.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap62.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int67 = fibonacciHeap66.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int70 = fibonacciHeap69.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap69.insert(0);
        fibonacciHeap66.delete(heapNode72);
        fibonacciHeap62.delete(heapNode72);
        fibonacciHeap57.delete(heapNode72);
        fibonacciHeap55.delete(heapNode72);
        fibonacciHeap39.delete(heapNode72);
        fibonacciHeap1.delete(heapNode72);
        boolean boolean79 = fibonacciHeap1.empty();
        int int80 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(heapNode72);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
    }

    @Test
    public void test5049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5049");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode(100);
        int[] intArray4 = fibonacciHeap1.countersRep();
        int int5 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test5050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5050");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        int int20 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap34.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap34.findMin();
        fibonacciHeap15.meld(fibonacciHeap34);
        fibonacciHeap1.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap54.insert(0);
        fibonacciHeap51.delete(heapNode57);
        fibonacciHeap47.delete(heapNode57);
        boolean boolean60 = fibonacciHeap47.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        fibonacciHeap47.meld(fibonacciHeap62);
        fibonacciHeap45.meld(fibonacciHeap47);
        boolean boolean66 = fibonacciHeap45.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int69 = fibonacciHeap68.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap68.meld(fibonacciHeap71);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap74 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap68.meld(fibonacciHeap74);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap77 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int78 = fibonacciHeap77.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap80 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap77.meld(fibonacciHeap80);
        fibonacciHeap80.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap80.new HeapNode(0);
        fibonacciHeap68.meld(fibonacciHeap80);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap68.insert((-1));
        fibonacciHeap45.delete(heapNode87);
        int int89 = heapNode87.key;
        fibonacciHeap1.delete(heapNode87);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap1.new HeapNode((int) (short) 1);
        int int93 = heapNode92.getKey();
        int int94 = heapNode92.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(heapNode41);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test5051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5051");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        int int36 = fibonacciHeap31.size();
        fibonacciHeap31.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap52.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap52.new HeapNode(0);
        fibonacciHeap40.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int60 = fibonacciHeap59.size();
        fibonacciHeap40.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap40.meld(fibonacciHeap63);
        int int65 = fibonacciHeap63.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap63.new HeapNode(0);
        boolean boolean68 = fibonacciHeap63.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap63.insert(3);
        fibonacciHeap31.meld(fibonacciHeap63);
        int[] intArray72 = fibonacciHeap63.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(heapNode70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[6, 0]");
    }

    @Test
    public void test5052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5052");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap34.countersRep();
        boolean boolean41 = fibonacciHeap34.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap34.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap45.findMin();
        int int47 = heapNode46.key;
        fibonacciHeap34.delete(heapNode46);
        fibonacciHeap1.delete(heapNode46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap1.findMin();
        int int52 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test5053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5053");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        boolean boolean2 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(10);
        fibonacciHeap4.deleteMin();
        int int10 = fibonacciHeap4.size();
        boolean boolean11 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        int[] intArray21 = fibonacciHeap18.countersRep();
        boolean boolean22 = fibonacciHeap18.empty();
        fibonacciHeap4.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode(32);
        int[] intArray26 = fibonacciHeap4.countersRep();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
    }

    @Test
    public void test5054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5054");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        int int26 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode28);
    }

    @Test
    public void test5055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5055");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        int[] intArray12 = fibonacciHeap9.countersRep();
        int int13 = fibonacciHeap9.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap9.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap9.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.insert(2);
        fibonacciHeap1.delete(heapNode19);
        int[] intArray21 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
    }

    @Test
    public void test5056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5056");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (byte) 10);
        int int4 = heapNode3.key;
        int int5 = heapNode3.key;
        heapNode3.key = (-1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test5057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5057");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.potential();
        int[] intArray12 = fibonacciHeap4.countersRep();
        int int13 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap4.findMin();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap4.insert((int) 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(heapNode14);
        org.junit.Assert.assertNull(heapNode15);
        org.junit.Assert.assertNotNull(heapNode18);
    }

    @Test
    public void test5058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5058");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        boolean boolean31 = fibonacciHeap22.empty();
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap22.findMin();
        int int34 = fibonacciHeap22.size();
        boolean boolean35 = fibonacciHeap22.empty();
        int int36 = fibonacciHeap22.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test5059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5059");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        boolean boolean5 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        int int16 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap18.meld(fibonacciHeap30);
        int[] intArray36 = fibonacciHeap30.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap30.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap30.new HeapNode(32);
        fibonacciHeap13.delete(heapNode39);
        int int41 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap13.findMin();
        boolean boolean43 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap13.insert(7);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap13.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap13.new HeapNode(100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(heapNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(heapNode45);
    }

    @Test
    public void test5060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5060");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.findMin();
        int int12 = fibonacciHeap9.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode((int) (short) 100);
        boolean boolean18 = fibonacciHeap13.empty();
        fibonacciHeap9.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap9.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap9.findMin();
        fibonacciHeap1.delete(heapNode21);
        int[] intArray23 = fibonacciHeap1.countersRep();
        int[] intArray24 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1]");
    }

    @Test
    public void test5061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5061");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.insert(6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap4.findMin();
        fibonacciHeap4.deleteMin();
        int[] intArray33 = fibonacciHeap4.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 1, 0]");
    }

    @Test
    public void test5062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5062");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap92 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode94 = fibonacciHeap92.new HeapNode((int) (short) 1);
        int int95 = heapNode94.getKey();
        int int96 = heapNode94.getKey();
        fibonacciHeap24.delete(heapNode94);
        int int98 = heapNode94.key;
        int int99 = heapNode94.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test5063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5063");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int int3 = fibonacciHeap1.potential();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        fibonacciHeap9.meld(fibonacciHeap21);
        fibonacciHeap1.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.new HeapNode(100);
        fibonacciHeap1.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode(0);
        fibonacciHeap38.meld(fibonacciHeap50);
        int[] intArray56 = fibonacciHeap50.countersRep();
        boolean boolean57 = fibonacciHeap50.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap50.insert((int) (byte) 100);
        int[] intArray60 = fibonacciHeap50.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap50.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap50.findMin();
        boolean boolean63 = fibonacciHeap50.empty();
        fibonacciHeap32.meld(fibonacciHeap50);
        boolean boolean65 = fibonacciHeap32.empty();
        int[] intArray66 = fibonacciHeap32.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1]");
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 0]");
    }

    @Test
    public void test5064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5064");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.insert(1);
        boolean boolean9 = fibonacciHeap6.empty();
        fibonacciHeap6.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        int int15 = heapNode14.getKey();
        int int16 = heapNode14.key;
        heapNode14.key = (byte) -1;
        int int19 = heapNode14.key;
        fibonacciHeap6.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        int int30 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap28.new HeapNode((int) '#');
        int int33 = fibonacciHeap28.potential();
        fibonacciHeap6.meld(fibonacciHeap28);
        int int35 = fibonacciHeap28.potential();
        fibonacciHeap1.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        int[] intArray40 = fibonacciHeap38.countersRep();
        int int41 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap38.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap38.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(10);
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap54.new HeapNode((int) (short) 0);
        heapNode60.key = (byte) 100;
        heapNode60.key = (-1);
        fibonacciHeap47.delete(heapNode60);
        fibonacciHeap47.deleteMin();
        fibonacciHeap38.meld(fibonacciHeap47);
        int[] intArray68 = fibonacciHeap47.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap47.insert(32);
        fibonacciHeap1.meld(fibonacciHeap47);
        int int72 = fibonacciHeap47.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap47.insert(6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap47.insert(2);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(heapNode70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(heapNode74);
        org.junit.Assert.assertNotNull(heapNode76);
    }

    @Test
    public void test5065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5065");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        fibonacciHeap10.deleteMin();
        int[] intArray14 = fibonacciHeap10.countersRep();
        int int15 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap10.findMin();
        int int17 = fibonacciHeap10.size();
        int[] intArray18 = fibonacciHeap10.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
    }

    @Test
    public void test5066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5066");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int12 = fibonacciHeap11.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap14.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap21.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode(0);
        fibonacciHeap25.meld(fibonacciHeap37);
        int[] intArray43 = fibonacciHeap25.countersRep();
        fibonacciHeap21.meld(fibonacciHeap25);
        fibonacciHeap14.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap47.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        fibonacciHeap59.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap59.new HeapNode(0);
        fibonacciHeap47.meld(fibonacciHeap59);
        int[] intArray65 = fibonacciHeap59.countersRep();
        boolean boolean66 = fibonacciHeap59.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap59.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap70.findMin();
        int int72 = heapNode71.key;
        fibonacciHeap59.delete(heapNode71);
        fibonacciHeap14.delete(heapNode71);
        fibonacciHeap11.delete(heapNode71);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap11.new HeapNode(35);
        fibonacciHeap1.delete(heapNode77);
        int int79 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test5067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5067");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        int int12 = heapNode11.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test5068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5068");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        fibonacciHeap46.meld(fibonacciHeap53);
        fibonacciHeap24.meld(fibonacciHeap53);
        int int57 = fibonacciHeap24.potential();
        fibonacciHeap24.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
    }

    @Test
    public void test5069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5069");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        int int3 = heapNode2.getKey();
        heapNode2.key = 35;
        int int6 = heapNode2.key;
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test5070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5070");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        int[] intArray28 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap1.insert(5);
        int int31 = heapNode30.getKey();
        int int32 = heapNode30.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
    }

    @Test
    public void test5071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5071");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.insert(1);
        boolean boolean26 = fibonacciHeap23.empty();
        int int27 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap28.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        int[] intArray50 = fibonacciHeap32.countersRep();
        fibonacciHeap28.meld(fibonacciHeap32);
        fibonacciHeap23.meld(fibonacciHeap32);
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap1.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap59.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap59.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap59.findMin();
        fibonacciHeap1.delete(heapNode65);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertNotNull(heapNode65);
    }

    @Test
    public void test5072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5072");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap26.insert(0);
        fibonacciHeap23.delete(heapNode29);
        fibonacciHeap13.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap23.new HeapNode(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap23.insert(7);
        fibonacciHeap1.meld(fibonacciHeap23);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode35);
    }

    @Test
    public void test5073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5073");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode((int) (short) 100);
        fibonacciHeap4.delete(heapNode21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap27.countersRep();
        fibonacciHeap23.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap23.new HeapNode((int) 'a');
        int int49 = heapNode48.key;
        int int50 = heapNode48.getKey();
        fibonacciHeap4.delete(heapNode48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap4.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap4.insert((int) (short) 1);
        fibonacciHeap4.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(heapNode55);
    }

    @Test
    public void test5074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5074");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        fibonacciHeap16.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        fibonacciHeap23.meld(fibonacciHeap27);
        int[] intArray46 = fibonacciHeap27.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap27.findMin();
        int int48 = fibonacciHeap27.potential();
        fibonacciHeap1.meld(fibonacciHeap27);
        int int50 = fibonacciHeap1.size();
        boolean boolean51 = fibonacciHeap1.empty();
        int[] intArray52 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap60.meld(fibonacciHeap63);
        fibonacciHeap57.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap57.new HeapNode((int) (short) 10);
        int int68 = fibonacciHeap57.size();
        int[] intArray69 = fibonacciHeap57.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap57.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap57.insert(0);
        int int74 = heapNode73.key;
        int int75 = heapNode73.key;
        fibonacciHeap1.delete(heapNode73);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[5, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test5075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5075");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap8.new HeapNode((int) (short) 0);
        heapNode14.key = (byte) 100;
        heapNode14.key = (-1);
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.new HeapNode((int) '4');
        int int22 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test5076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5076");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap10);
        int int22 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap10.insert(0);
        java.lang.Class<?> wildcardClass25 = fibonacciHeap10.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test5077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5077");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap16.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        int[] intArray38 = fibonacciHeap20.countersRep();
        fibonacciHeap16.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap16.new HeapNode((int) 'a');
        fibonacciHeap10.delete(heapNode41);
        fibonacciHeap10.deleteMin();
        int[] intArray44 = fibonacciHeap10.countersRep();
        int[] intArray45 = fibonacciHeap10.countersRep();
        int[] intArray46 = fibonacciHeap10.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
    }

    @Test
    public void test5078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5078");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        int int36 = fibonacciHeap34.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode((int) '#');
        int[] intArray39 = fibonacciHeap34.countersRep();
        fibonacciHeap1.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap34.new HeapNode(52);
        int[] intArray44 = fibonacciHeap34.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[3]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
    }

    @Test
    public void test5079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5079");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap3.insert(0);
        int int7 = heapNode6.key;
        fibonacciHeap1.delete(heapNode6);
        int int9 = heapNode6.key;
        int int10 = heapNode6.getKey();
        int int11 = heapNode6.key;
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test5080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5080");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.new HeapNode((int) (short) 10);
        int int43 = fibonacciHeap32.potential();
        fibonacciHeap24.meld(fibonacciHeap32);
        int int45 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap32.new HeapNode((int) '4');
        heapNode47.key = 1;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test5081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5081");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        int[] intArray52 = fibonacciHeap34.countersRep();
        fibonacciHeap8.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap55.new HeapNode((int) (short) 0);
        int int62 = fibonacciHeap55.size();
        int[] intArray63 = fibonacciHeap55.countersRep();
        fibonacciHeap8.meld(fibonacciHeap55);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 10);
        fibonacciHeap8.meld(fibonacciHeap66);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[2, 0]");
    }

    @Test
    public void test5082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5082");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray9 = fibonacciHeap8.countersRep();
        fibonacciHeap1.meld(fibonacciHeap8);
        fibonacciHeap8.deleteMin();
        fibonacciHeap8.deleteMin();
        int int13 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        fibonacciHeap17.delete(heapNode27);
        boolean boolean30 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        fibonacciHeap17.meld(fibonacciHeap32);
        fibonacciHeap15.meld(fibonacciHeap17);
        boolean boolean36 = fibonacciHeap15.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode(0);
        fibonacciHeap38.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap38.insert((-1));
        fibonacciHeap15.delete(heapNode57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap15.findMin();
        int[] intArray60 = fibonacciHeap15.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap62.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap62.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap62.insert(7);
        fibonacciHeap15.delete(heapNode67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap15.findMin();
        fibonacciHeap15.deleteMin();
        fibonacciHeap8.meld(fibonacciHeap15);
        int int72 = fibonacciHeap8.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 1]");
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertNotNull(heapNode69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test5083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5083");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap7.new HeapNode(0);
        int int13 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray16 = fibonacciHeap15.countersRep();
        boolean boolean17 = fibonacciHeap15.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap15.new HeapNode((int) ' ');
        int[] intArray20 = fibonacciHeap15.countersRep();
        fibonacciHeap7.meld(fibonacciHeap15);
        int[] intArray22 = fibonacciHeap15.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap15.insert(5);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[4]");
        org.junit.Assert.assertNotNull(heapNode24);
    }

    @Test
    public void test5084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5084");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        boolean boolean23 = fibonacciHeap13.empty();
        int[] intArray24 = fibonacciHeap13.countersRep();
        int int25 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap28.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap28.findMin();
        int int31 = heapNode30.key;
        int int32 = heapNode30.getKey();
        int int33 = heapNode30.key;
        fibonacciHeap13.delete(heapNode30);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test5085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5085");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        boolean boolean37 = fibonacciHeap13.empty();
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap40.insert(1);
        boolean boolean43 = fibonacciHeap40.empty();
        int int44 = fibonacciHeap40.size();
        int int45 = fibonacciHeap40.size();
        boolean boolean46 = fibonacciHeap40.empty();
        int int47 = fibonacciHeap40.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap40.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap51.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap51.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap61.insert(1);
        boolean boolean64 = fibonacciHeap61.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap61.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap61.new HeapNode((int) '#');
        fibonacciHeap51.delete(heapNode68);
        fibonacciHeap40.delete(heapNode68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap40.new HeapNode(10);
        int int73 = fibonacciHeap40.size();
        boolean boolean74 = fibonacciHeap40.empty();
        fibonacciHeap13.meld(fibonacciHeap40);
        int int76 = fibonacciHeap40.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test5086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5086");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        boolean boolean10 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test5087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5087");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        heapNode4.key = 97;
        heapNode4.key = 9;
        int int9 = heapNode4.getKey();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test5088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5088");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.insert((int) (byte) 0);
        int int27 = fibonacciHeap20.size();
        int[] intArray28 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.insert(0);
        fibonacciHeap43.delete(heapNode49);
        fibonacciHeap33.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap43.new HeapNode(32);
        int int54 = heapNode53.getKey();
        fibonacciHeap20.delete(heapNode53);
        int[] intArray56 = fibonacciHeap20.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 32 + "'", int54 == 32);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
    }

    @Test
    public void test5089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5089");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        heapNode2.key = 52;
        heapNode2.key = (byte) 0;
        int int7 = heapNode2.key;
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test5090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5090");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        boolean boolean7 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        int int9 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap11.findMin();
        fibonacciHeap4.meld(fibonacciHeap11);
        fibonacciHeap4.deleteMin();
        int int15 = fibonacciHeap4.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test5091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5091");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.getKey();
        int int11 = heapNode9.key;
        heapNode9.key = (byte) -1;
        int int14 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        int int25 = fibonacciHeap23.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap23.new HeapNode((int) '#');
        int int28 = fibonacciHeap23.potential();
        fibonacciHeap1.meld(fibonacciHeap23);
        int int30 = fibonacciHeap23.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap23.findMin();
        int int32 = heapNode31.getKey();
        int int33 = heapNode31.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test5092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5092");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        boolean boolean7 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode((int) (byte) 100);
        int[] intArray23 = fibonacciHeap18.countersRep();
        int int24 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap18.new HeapNode((-1));
        fibonacciHeap1.meld(fibonacciHeap18);
        int int28 = fibonacciHeap18.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap29.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap45.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap45.new HeapNode(0);
        fibonacciHeap33.meld(fibonacciHeap45);
        int[] intArray51 = fibonacciHeap33.countersRep();
        fibonacciHeap29.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap33.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap56.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap65.meld(fibonacciHeap68);
        fibonacciHeap68.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap68.new HeapNode(0);
        fibonacciHeap56.meld(fibonacciHeap68);
        int[] intArray74 = fibonacciHeap68.countersRep();
        int int75 = fibonacciHeap68.size();
        int int76 = fibonacciHeap68.size();
        fibonacciHeap33.meld(fibonacciHeap68);
        fibonacciHeap33.deleteMin();
        int int79 = fibonacciHeap33.size();
        fibonacciHeap18.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap18.new HeapNode(1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test5093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5093");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        int int29 = fibonacciHeap5.size();
        int int30 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap5.findMin();
        boolean boolean32 = fibonacciHeap5.empty();
        int int33 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap34.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode(0);
        fibonacciHeap38.meld(fibonacciHeap50);
        int[] intArray56 = fibonacciHeap38.countersRep();
        fibonacciHeap34.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap34.new HeapNode((int) 'a');
        int int60 = heapNode59.key;
        fibonacciHeap5.delete(heapNode59);
        heapNode59.key = 'a';
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
    }

    @Test
    public void test5094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5094");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (byte) 1);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.findMin();
        int[] intArray10 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(heapNode9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
    }

    @Test
    public void test5095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5095");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        int int4 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        int[] intArray12 = fibonacciHeap9.countersRep();
        int int13 = fibonacciHeap9.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap9.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap9.new HeapNode(97);
        heapNode17.key = 100;
        int int20 = heapNode17.getKey();
        fibonacciHeap1.delete(heapNode17);
        java.lang.Class<?> wildcardClass22 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test5096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5096");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.findMin();
        int[] intArray24 = fibonacciHeap1.countersRep();
        int[] intArray25 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[4, 0, 0]");
    }

    @Test
    public void test5097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5097");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        fibonacciHeap9.meld(fibonacciHeap21);
        int int30 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap9.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap9.findMin();
        fibonacciHeap4.meld(fibonacciHeap9);
        fibonacciHeap1.meld(fibonacciHeap9);
        int[] intArray36 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap1.new HeapNode(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.findMin();
        boolean boolean40 = fibonacciHeap1.empty();
        int int41 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
    }

    @Test
    public void test5098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5098");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        boolean boolean23 = fibonacciHeap17.empty();
        fibonacciHeap1.meld(fibonacciHeap17);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap27.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        fibonacciHeap27.meld(fibonacciHeap33);
        int int36 = fibonacciHeap33.potential();
        fibonacciHeap33.deleteMin();
        fibonacciHeap33.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap33);
        int int40 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test5099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5099");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        int int20 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap34.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap34.findMin();
        fibonacciHeap15.meld(fibonacciHeap34);
        fibonacciHeap1.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap34.new HeapNode(100);
        int int46 = heapNode45.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
    }

    @Test
    public void test5100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5100");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) '#');
        int[] intArray4 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 0]");
    }

    @Test
    public void test5101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5101");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap8.new HeapNode((int) (short) 0);
        heapNode14.key = (byte) 100;
        heapNode14.key = (-1);
        fibonacciHeap1.delete(heapNode14);
        int int20 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap25.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap45.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap45.new HeapNode(0);
        fibonacciHeap33.meld(fibonacciHeap45);
        int[] intArray51 = fibonacciHeap45.countersRep();
        boolean boolean52 = fibonacciHeap45.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap45.insert((int) (byte) 100);
        int[] intArray55 = fibonacciHeap45.countersRep();
        fibonacciHeap25.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap58.findMin();
        fibonacciHeap58.deleteMin();
        fibonacciHeap45.meld(fibonacciHeap58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap45.insert(7);
        fibonacciHeap1.meld(fibonacciHeap45);
        int[] intArray66 = fibonacciHeap45.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap45.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[3, 0]");
        org.junit.Assert.assertNotNull(heapNode67);
    }

    @Test
    public void test5102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5102");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap13.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass28 = heapNode27.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(heapNode27);
    }

    @Test
    public void test5103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5103");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap34.insert(0);
        fibonacciHeap31.delete(heapNode37);
        fibonacciHeap27.delete(heapNode37);
        fibonacciHeap24.delete(heapNode37);
        fibonacciHeap1.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap42.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap46.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        fibonacciHeap58.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap58.new HeapNode(0);
        fibonacciHeap46.meld(fibonacciHeap58);
        int[] intArray64 = fibonacciHeap46.countersRep();
        fibonacciHeap42.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap46.new HeapNode((-1));
        int int68 = heapNode67.getKey();
        fibonacciHeap1.delete(heapNode67);
        int int70 = fibonacciHeap1.potential();
        int int71 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap1.findMin();
        int int73 = heapNode72.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(heapNode72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test5104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5104");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        int int10 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap35.meld(fibonacciHeap41);
        fibonacciHeap24.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode((int) (short) 100);
        int int49 = fibonacciHeap44.size();
        fibonacciHeap24.meld(fibonacciHeap44);
        fibonacciHeap1.meld(fibonacciHeap44);
        boolean boolean52 = fibonacciHeap44.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap44.insert((int) (short) 0);
        int[] intArray55 = fibonacciHeap44.countersRep();
        java.lang.Class<?> wildcardClass56 = fibonacciHeap44.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test5105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5105");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        int int22 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.potential();
        fibonacciHeap24.deleteMin();
        int[] intArray27 = fibonacciHeap24.countersRep();
        int int28 = fibonacciHeap24.potential();
        fibonacciHeap3.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap24.new HeapNode(9);
        boolean boolean33 = fibonacciHeap24.empty();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test5106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5106");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.insert((int) (byte) 0);
        int int27 = fibonacciHeap20.size();
        int int28 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap20.findMin();
        int int30 = fibonacciHeap20.size();
        fibonacciHeap20.deleteMin();
        int int32 = fibonacciHeap20.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test5107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5107");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap23.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap23.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap23.findMin();
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        boolean boolean32 = fibonacciHeap23.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap23.insert((-1));
        int int35 = fibonacciHeap23.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test5108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5108");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        int int89 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode91 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode93 = fibonacciHeap24.insert(6);
        heapNode93.key = (short) 100;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode91);
        org.junit.Assert.assertNotNull(heapNode93);
    }

    @Test
    public void test5109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5109");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.insert(1);
        int int26 = heapNode25.key;
        int int27 = heapNode25.key;
        fibonacciHeap17.delete(heapNode25);
        int int29 = heapNode25.key;
        int int30 = heapNode25.key;
        fibonacciHeap4.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap33.findMin();
        heapNode34.key = (byte) 0;
        int int37 = heapNode34.key;
        fibonacciHeap4.delete(heapNode34);
        int int39 = fibonacciHeap4.potential();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap4.insert((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(heapNode42);
    }

    @Test
    public void test5110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5110");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap1.deleteMin();
        int int32 = fibonacciHeap1.potential();
        int[] intArray33 = fibonacciHeap1.countersRep();
        int[] intArray34 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        heapNode36.key = (byte) 1;
        heapNode36.key = 6;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 1]");
    }

    @Test
    public void test5111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5111");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int[] intArray21 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.findMin();
        int int23 = fibonacciHeap13.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test5112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5112");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        fibonacciHeap1.deleteMin();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        int int23 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap28.insert(0);
        fibonacciHeap25.delete(heapNode31);
        heapNode31.key = (short) 1;
        int int35 = heapNode31.key;
        fibonacciHeap5.delete(heapNode31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap5.insert((int) (short) 1);
        boolean boolean39 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap1.insert((int) (short) 100);
        int int43 = heapNode42.key;
        int int44 = heapNode42.getKey();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
    }

    @Test
    public void test5113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5113");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap23.insert((-1));
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap23.findMin();
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        int int47 = fibonacciHeap23.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test5114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5114");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        fibonacciHeap32.meld(fibonacciHeap39);
        fibonacciHeap1.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap1.new HeapNode(2);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int47 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test5115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5115");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert(3);
        boolean boolean17 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap1.insert((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.new HeapNode(7);
        heapNode21.key = 100;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(heapNode19);
    }

    @Test
    public void test5116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5116");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.insert(1);
        boolean boolean8 = fibonacciHeap5.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap5.new HeapNode(3);
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(heapNode12);
    }

    @Test
    public void test5117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5117");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        boolean boolean31 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap22.findMin();
        int[] intArray33 = fibonacciHeap22.countersRep();
        int int34 = fibonacciHeap22.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int37 = fibonacciHeap36.size();
        int int38 = fibonacciHeap36.potential();
        int int39 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode((int) (byte) 100);
        int[] intArray55 = fibonacciHeap50.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap50.new HeapNode(35);
        fibonacciHeap36.delete(heapNode57);
        fibonacciHeap22.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap61.insert(1);
        boolean boolean64 = fibonacciHeap61.empty();
        int int65 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap66.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int71 = fibonacciHeap70.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap70.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap70.meld(fibonacciHeap76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int80 = fibonacciHeap79.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap79.meld(fibonacciHeap82);
        fibonacciHeap82.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode86 = fibonacciHeap82.new HeapNode(0);
        fibonacciHeap70.meld(fibonacciHeap82);
        int[] intArray88 = fibonacciHeap70.countersRep();
        fibonacciHeap66.meld(fibonacciHeap70);
        fibonacciHeap61.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap70.insert((int) (byte) 0);
        int[] intArray93 = fibonacciHeap70.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode95 = fibonacciHeap70.new HeapNode((int) (byte) 0);
        fibonacciHeap36.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode97 = fibonacciHeap36.findMin();
        int int98 = heapNode97.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(heapNode32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[4]");
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[6, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test5118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5118");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        fibonacciHeap6.deleteMin();
        int[] intArray9 = fibonacciHeap6.countersRep();
        int int10 = fibonacciHeap6.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap6.new HeapNode(0);
        int int13 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap6.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap6.findMin();
        int int17 = heapNode16.key;
        int int18 = heapNode16.key;
        fibonacciHeap1.delete(heapNode16);
        boolean boolean20 = fibonacciHeap1.empty();
        int[] intArray21 = fibonacciHeap1.countersRep();
        boolean boolean22 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test5119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5119");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.new HeapNode((int) (byte) 100);
        fibonacciHeap13.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(heapNode20);
    }

    @Test
    public void test5120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5120");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap90 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 0);
        fibonacciHeap67.meld(fibonacciHeap90);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode93 = fibonacciHeap67.insert((int) (byte) 1);
        heapNode93.key = 6;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(heapNode93);
    }

    @Test
    public void test5121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5121");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) ' ');
        int[] intArray6 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert(32);
        int[] intArray10 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap1.meld(fibonacciHeap12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.thealgorithms.datastructures.heaps.FibonacciHeap.empty()\" because \"heap2\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1]");
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode11);
    }

    @Test
    public void test5122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5122");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap16.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap29.insert(0);
        fibonacciHeap26.delete(heapNode32);
        fibonacciHeap16.meld(fibonacciHeap26);
        int[] intArray35 = fibonacciHeap16.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.insert(1);
        int int42 = heapNode41.key;
        int int43 = heapNode41.key;
        heapNode41.key = (-1);
        int int46 = heapNode41.getKey();
        fibonacciHeap37.delete(heapNode41);
        int int48 = fibonacciHeap37.size();
        boolean boolean49 = fibonacciHeap37.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap37.findMin();
        fibonacciHeap16.meld(fibonacciHeap37);
        fibonacciHeap1.meld(fibonacciHeap37);
        boolean boolean53 = fibonacciHeap37.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap37.findMin();
        fibonacciHeap37.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(heapNode50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(heapNode54);
    }

    @Test
    public void test5123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5123");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int[] intArray43 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.findMin();
        int int45 = fibonacciHeap24.potential();
        int int46 = fibonacciHeap24.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
    }

    @Test
    public void test5124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5124");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.new HeapNode(32);
        fibonacciHeap7.delete(heapNode33);
        boolean boolean35 = fibonacciHeap7.empty();
        boolean boolean36 = fibonacciHeap7.empty();
        fibonacciHeap7.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap7.new HeapNode(4);
        int int40 = heapNode39.key;
        java.lang.Class<?> wildcardClass41 = heapNode39.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(heapNode31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test5125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5125");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap4.new HeapNode(97);
        int int13 = fibonacciHeap4.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test5126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5126");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        int int22 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.potential();
        fibonacciHeap24.deleteMin();
        int[] intArray27 = fibonacciHeap24.countersRep();
        int int28 = fibonacciHeap24.potential();
        fibonacciHeap3.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap24.new HeapNode(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode(3);
        int[] intArray35 = fibonacciHeap24.countersRep();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(heapNode30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
    }

    @Test
    public void test5127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5127");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.insert((int) (byte) 10);
        org.junit.Assert.assertNotNull(heapNode7);
    }

    @Test
    public void test5128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5128");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        fibonacciHeap13.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap33.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode((int) (short) 100);
        int int38 = fibonacciHeap33.size();
        fibonacciHeap13.meld(fibonacciHeap33);
        int[] intArray40 = fibonacciHeap13.countersRep();
        int int41 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap13.new HeapNode((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
    }

    @Test
    public void test5129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5129");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        fibonacciHeap4.deleteMin();
        java.lang.Class<?> wildcardClass50 = fibonacciHeap4.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test5130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5130");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.new HeapNode((int) (short) 10);
        fibonacciHeap1.deleteMin();
        int int17 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap1.insert((int) ' ');
        int int20 = heapNode19.getKey();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
    }

    @Test
    public void test5131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5131");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(97);
        fibonacciHeap1.deleteMin();
        int int3 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode(10);
        boolean boolean10 = fibonacciHeap5.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap5.new HeapNode(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap5.new HeapNode(7);
        fibonacciHeap1.meld(fibonacciHeap5);
        int int16 = fibonacciHeap5.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test5132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5132");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap7.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap17.insert(100);
        fibonacciHeap1.meld(fibonacciHeap17);
        boolean boolean30 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap32.insert(0);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        int int41 = heapNode40.key;
        int int42 = heapNode40.key;
        fibonacciHeap32.delete(heapNode40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        int int50 = fibonacciHeap45.size();
        fibonacciHeap32.meld(fibonacciHeap45);
        int[] intArray52 = fibonacciHeap32.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap54.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap63.meld(fibonacciHeap66);
        fibonacciHeap66.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap66.new HeapNode(0);
        fibonacciHeap54.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap54.insert((-1));
        fibonacciHeap54.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap54.findMin();
        fibonacciHeap54.deleteMin();
        fibonacciHeap32.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(5);
        fibonacciHeap54.meld(fibonacciHeap79);
        fibonacciHeap1.meld(fibonacciHeap79);
        boolean boolean82 = fibonacciHeap79.empty();
        int int83 = fibonacciHeap79.potential();
        int int84 = fibonacciHeap79.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertNotNull(heapNode75);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test5133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5133");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        int int35 = fibonacciHeap24.size();
        int int36 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(10);
        int int43 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray46 = fibonacciHeap45.countersRep();
        fibonacciHeap38.meld(fibonacciHeap45);
        int int48 = fibonacciHeap45.potential();
        fibonacciHeap24.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap54.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int62 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap61.insert(0);
        fibonacciHeap58.delete(heapNode64);
        fibonacciHeap54.delete(heapNode64);
        heapNode64.key = ' ';
        int int69 = heapNode64.getKey();
        fibonacciHeap51.delete(heapNode64);
        int int71 = fibonacciHeap51.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap51.insert(10);
        int int74 = heapNode73.getKey();
        int int75 = heapNode73.getKey();
        int int76 = heapNode73.key;
        int int77 = heapNode73.getKey();
        fibonacciHeap45.delete(heapNode73);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 32 + "'", int69 == 32);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
    }

    @Test
    public void test5134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5134");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap6.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        fibonacciHeap6.meld(fibonacciHeap18);
        int int27 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap6.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap6.findMin();
        fibonacciHeap1.meld(fibonacciHeap6);
        int int32 = fibonacciHeap6.potential();
        boolean boolean33 = fibonacciHeap6.empty();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test5135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5135");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        int int20 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap34.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap34.findMin();
        fibonacciHeap15.meld(fibonacciHeap34);
        fibonacciHeap1.meld(fibonacciHeap34);
        int[] intArray44 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap1.insert(4);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int49 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(heapNode41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1]");
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test5136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5136");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap22.insert(1);
        boolean boolean25 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap30.insert(0);
        fibonacciHeap27.delete(heapNode33);
        heapNode33.key = (short) 1;
        fibonacciHeap22.delete(heapNode33);
        int int38 = fibonacciHeap22.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap22.insert(3);
        fibonacciHeap1.delete(heapNode40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap1.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.new HeapNode(6);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertNotNull(heapNode43);
    }

    @Test
    public void test5137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5137");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.insert(6);
        boolean boolean31 = fibonacciHeap4.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test5138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5138");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int int15 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap1.new HeapNode((int) (byte) 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test5139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5139");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        boolean boolean7 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        int int9 = fibonacciHeap4.potential();
        java.lang.Class<?> wildcardClass10 = fibonacciHeap4.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test5140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5140");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        int int10 = fibonacciHeap7.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.findMin();
        heapNode11.key = 32;
        int int14 = heapNode11.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
    }

    @Test
    public void test5141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5141");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int[] intArray4 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap8.new HeapNode((int) (short) 0);
        fibonacciHeap8.deleteMin();
        boolean boolean16 = fibonacciHeap8.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap8.findMin();
        fibonacciHeap1.meld(fibonacciHeap8);
        boolean boolean19 = fibonacciHeap1.empty();
        int int20 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1]");
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test5142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5142");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.findMin();
        boolean boolean23 = fibonacciHeap1.empty();
        boolean boolean24 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test5143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5143");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        int int26 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        boolean boolean29 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        int int39 = fibonacciHeap34.size();
        fibonacciHeap24.meld(fibonacciHeap34);
        int int41 = fibonacciHeap24.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test5144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5144");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap3.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap15.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap15.new HeapNode(0);
        fibonacciHeap3.meld(fibonacciHeap15);
        int[] intArray21 = fibonacciHeap3.countersRep();
        int int22 = fibonacciHeap3.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap24.delete(heapNode30);
        fibonacciHeap3.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap34.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap41.insert(0);
        fibonacciHeap38.delete(heapNode44);
        fibonacciHeap34.delete(heapNode44);
        fibonacciHeap24.meld(fibonacciHeap34);
        fibonacciHeap1.meld(fibonacciHeap34);
        int int49 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap1.insert(7);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(heapNode51);
    }

    @Test
    public void test5145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5145");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap10.findMin();
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap10.deleteMin();
        int int14 = fibonacciHeap10.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test5146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5146");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap34.countersRep();
        boolean boolean41 = fibonacciHeap34.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap34.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap45.findMin();
        int int47 = heapNode46.key;
        fibonacciHeap34.delete(heapNode46);
        fibonacciHeap1.delete(heapNode46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray52 = fibonacciHeap51.countersRep();
        fibonacciHeap1.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap55.deleteMin();
        fibonacciHeap55.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        int int64 = fibonacciHeap59.size();
        fibonacciHeap55.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap55.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap55.new HeapNode((int) (short) 10);
        int[] intArray70 = fibonacciHeap55.countersRep();
        fibonacciHeap51.meld(fibonacciHeap55);
        java.lang.Class<?> wildcardClass72 = fibonacciHeap55.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2, 0]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test5147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5147");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert(3);
        boolean boolean17 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap1.insert((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.new HeapNode(7);
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.insert((int) (byte) 0);
        int int35 = heapNode34.getKey();
        int int36 = heapNode34.getKey();
        fibonacciHeap1.delete(heapNode34);
        heapNode34.key = (byte) 100;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test5148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5148");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        int int22 = fibonacciHeap3.size();
        int[] intArray23 = fibonacciHeap3.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap3.insert((int) (short) 100);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[3, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
    }

    @Test
    public void test5149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5149");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        fibonacciHeap48.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap48.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap56.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap65.meld(fibonacciHeap68);
        fibonacciHeap68.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap68.new HeapNode(0);
        fibonacciHeap56.meld(fibonacciHeap68);
        int[] intArray74 = fibonacciHeap68.countersRep();
        boolean boolean75 = fibonacciHeap68.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap68.insert((int) (byte) 100);
        int[] intArray78 = fibonacciHeap68.countersRep();
        fibonacciHeap48.meld(fibonacciHeap68);
        fibonacciHeap24.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int83 = fibonacciHeap82.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap85 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap82.meld(fibonacciHeap85);
        fibonacciHeap85.deleteMin();
        int[] intArray88 = fibonacciHeap85.countersRep();
        int int89 = fibonacciHeap85.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode91 = fibonacciHeap85.new HeapNode(0);
        int int92 = fibonacciHeap85.size();
        int int93 = fibonacciHeap85.size();
        int[] intArray94 = fibonacciHeap85.countersRep();
        fibonacciHeap24.meld(fibonacciHeap85);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode97 = fibonacciHeap24.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode99 = fibonacciHeap24.insert((int) '4');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(heapNode77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(heapNode99);
    }

    @Test
    public void test5150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5150");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.new HeapNode(100);
        int int23 = fibonacciHeap13.size();
        boolean boolean24 = fibonacciHeap13.empty();
        java.lang.Class<?> wildcardClass25 = fibonacciHeap13.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test5151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5151");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        int[] intArray34 = fibonacciHeap24.countersRep();
        fibonacciHeap4.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap53.insert(0);
        fibonacciHeap50.delete(heapNode56);
        fibonacciHeap40.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap50.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap63.insert(1);
        int int66 = heapNode65.key;
        int int67 = heapNode65.key;
        fibonacciHeap50.delete(heapNode65);
        fibonacciHeap24.meld(fibonacciHeap50);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap24.insert((int) (byte) 10);
        int int73 = heapNode72.key;
        int int74 = heapNode72.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(heapNode72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
    }

    @Test
    public void test5152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5152");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap16.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        int[] intArray50 = fibonacciHeap44.countersRep();
        boolean boolean51 = fibonacciHeap44.empty();
        fibonacciHeap27.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap27.findMin();
        fibonacciHeap16.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap16.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap16.insert((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap16.new HeapNode((int) 'a');
        int int61 = fibonacciHeap16.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
    }

    @Test
    public void test5153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5153");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int[] intArray15 = fibonacciHeap1.countersRep();
        int int16 = fibonacciHeap1.size();
        int int17 = fibonacciHeap1.potential();
        int int18 = fibonacciHeap1.potential();
        boolean boolean19 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test5154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5154");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        int[] intArray13 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        heapNode28.key = 2;
        int int31 = heapNode28.getKey();
        int int32 = heapNode28.key;
        heapNode28.key = (-1);
        heapNode28.key = '4';
        fibonacciHeap1.delete(heapNode28);
        int int38 = heapNode28.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test5155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5155");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int16 = fibonacciHeap15.size();
        int int17 = fibonacciHeap15.potential();
        int int18 = fibonacciHeap15.size();
        fibonacciHeap1.meld(fibonacciHeap15);
        int int20 = fibonacciHeap1.size();
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap26.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap33.insert(0);
        fibonacciHeap30.delete(heapNode36);
        fibonacciHeap26.delete(heapNode36);
        heapNode36.key = ' ';
        int int41 = heapNode36.getKey();
        fibonacciHeap23.delete(heapNode36);
        int int43 = fibonacciHeap23.potential();
        boolean boolean44 = fibonacciHeap23.empty();
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap23.insert((int) 'a');
        fibonacciHeap1.delete(heapNode47);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 32 + "'", int41 == 32);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(heapNode47);
    }

    @Test
    public void test5156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5156");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        int int36 = fibonacciHeap31.size();
        fibonacciHeap31.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.findMin();
        int[] intArray40 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap1.insert((-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 1]");
        org.junit.Assert.assertNotNull(heapNode42);
    }

    @Test
    public void test5157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5157");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        int int16 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap10.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap10.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(heapNode21);
    }

    @Test
    public void test5158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5158");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        int[] intArray13 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        heapNode28.key = 2;
        int int31 = heapNode28.getKey();
        int int32 = heapNode28.key;
        heapNode28.key = (-1);
        heapNode28.key = '4';
        fibonacciHeap1.delete(heapNode28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        int int46 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap41.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap41.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap51.deleteMin();
        fibonacciHeap51.deleteMin();
        fibonacciHeap51.deleteMin();
        int int55 = fibonacciHeap51.potential();
        int[] intArray56 = fibonacciHeap51.countersRep();
        int int57 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap59.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int69 = fibonacciHeap68.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap68.meld(fibonacciHeap71);
        fibonacciHeap71.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap71.new HeapNode(0);
        fibonacciHeap59.meld(fibonacciHeap71);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap78 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int79 = fibonacciHeap78.size();
        fibonacciHeap59.meld(fibonacciHeap78);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap59.meld(fibonacciHeap82);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap85 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int86 = fibonacciHeap85.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode88 = fibonacciHeap85.insert(0);
        fibonacciHeap85.deleteMin();
        fibonacciHeap82.meld(fibonacciHeap85);
        fibonacciHeap51.meld(fibonacciHeap82);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode93 = fibonacciHeap82.insert(10);
        int int94 = fibonacciHeap82.size();
        fibonacciHeap41.meld(fibonacciHeap82);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode97 = fibonacciHeap82.insert(10);
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap1.delete(heapNode97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(heapNode88);
        org.junit.Assert.assertNotNull(heapNode93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
        org.junit.Assert.assertNotNull(heapNode97);
    }

    @Test
    public void test5159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5159");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) ' ');
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.new HeapNode(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(32);
        int int7 = fibonacciHeap6.size();
        fibonacciHeap1.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        int int15 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap10.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap21.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        fibonacciHeap33.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode(0);
        fibonacciHeap21.meld(fibonacciHeap33);
        int[] intArray39 = fibonacciHeap21.countersRep();
        fibonacciHeap17.meld(fibonacciHeap21);
        fibonacciHeap10.meld(fibonacciHeap17);
        fibonacciHeap10.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.insert(0);
        int int50 = heapNode49.key;
        fibonacciHeap44.delete(heapNode49);
        heapNode49.key = (short) -1;
        fibonacciHeap10.delete(heapNode49);
        heapNode49.key = 10;
        int int57 = heapNode49.key;
        heapNode49.key = 5;
        int int60 = heapNode49.key;
        fibonacciHeap1.delete(heapNode49);
        int int62 = heapNode49.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test5160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5160");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int28 = fibonacciHeap27.size();
        fibonacciHeap8.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap8.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap31.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap40.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap31.delete(heapNode52);
        fibonacciHeap1.delete(heapNode52);
        int int55 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test5161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5161");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        int int4 = fibonacciHeap1.size();
        boolean boolean5 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test5162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5162");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(52);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertNotNull(heapNode8);
    }

    @Test
    public void test5163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5163");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        int int14 = fibonacciHeap4.size();
        int[] intArray15 = fibonacciHeap4.countersRep();
        int[] intArray16 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap18.meld(fibonacciHeap30);
        int[] intArray36 = fibonacciHeap30.countersRep();
        boolean boolean37 = fibonacciHeap30.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap30.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap41.findMin();
        int int43 = heapNode42.key;
        fibonacciHeap30.delete(heapNode42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap46.new HeapNode((int) (short) 0);
        fibonacciHeap30.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int56 = fibonacciHeap55.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap55.findMin();
        int int58 = fibonacciHeap55.potential();
        fibonacciHeap30.meld(fibonacciHeap55);
        fibonacciHeap4.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(heapNode61);
    }

    @Test
    public void test5164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5164");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        boolean boolean9 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap1.insert(5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNotNull(heapNode14);
    }

    @Test
    public void test5165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5165");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        int int7 = fibonacciHeap1.size();
        int[] intArray8 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
    }

    @Test
    public void test5166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5166");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int[] intArray15 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap1.insert((int) (byte) 1);
        boolean boolean19 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test5167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5167");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        fibonacciHeap46.meld(fibonacciHeap53);
        fibonacciHeap24.meld(fibonacciHeap53);
        fibonacciHeap24.deleteMin();
        fibonacciHeap24.deleteMin();
        int int59 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap60.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int65 = fibonacciHeap64.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap64.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap64.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int74 = fibonacciHeap73.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap73.meld(fibonacciHeap76);
        fibonacciHeap76.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode80 = fibonacciHeap76.new HeapNode(0);
        fibonacciHeap64.meld(fibonacciHeap76);
        int[] intArray82 = fibonacciHeap64.countersRep();
        fibonacciHeap60.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap64.new HeapNode((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap87 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int88 = fibonacciHeap87.size();
        int[] intArray89 = fibonacciHeap87.countersRep();
        int int90 = fibonacciHeap87.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap87.insert(0);
        fibonacciHeap87.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode95 = fibonacciHeap87.new HeapNode((int) (short) 10);
        int int96 = heapNode95.getKey();
        fibonacciHeap64.delete(heapNode95);
        fibonacciHeap64.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap64);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(heapNode92);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
    }

    @Test
    public void test5168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5168");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        int int35 = fibonacciHeap24.size();
        int int36 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(10);
        int int43 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray46 = fibonacciHeap45.countersRep();
        fibonacciHeap38.meld(fibonacciHeap45);
        int int48 = fibonacciHeap45.potential();
        fibonacciHeap24.meld(fibonacciHeap45);
        int int50 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap24.new HeapNode((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
    }

    @Test
    public void test5169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5169");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int[] intArray15 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.findMin();
        int int17 = fibonacciHeap1.potential();
        int[] intArray18 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1]");
        org.junit.Assert.assertNotNull(heapNode19);
    }

    @Test
    public void test5170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5170");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap34.insert(0);
        fibonacciHeap31.delete(heapNode37);
        fibonacciHeap27.delete(heapNode37);
        fibonacciHeap24.delete(heapNode37);
        fibonacciHeap1.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap42.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap46.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        fibonacciHeap58.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap58.new HeapNode(0);
        fibonacciHeap46.meld(fibonacciHeap58);
        int[] intArray64 = fibonacciHeap46.countersRep();
        fibonacciHeap42.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap46.new HeapNode((-1));
        int int68 = heapNode67.getKey();
        fibonacciHeap1.delete(heapNode67);
        int int70 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap1.findMin();
        boolean boolean72 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap1.findMin();
        heapNode75.key = (-1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(heapNode75);
    }

    @Test
    public void test5171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5171");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int[] intArray11 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.new HeapNode((int) '#');
        int int14 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        int int21 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap16.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap27.countersRep();
        fibonacciHeap23.meld(fibonacciHeap27);
        fibonacciHeap16.meld(fibonacciHeap23);
        fibonacciHeap4.meld(fibonacciHeap23);
        int[] intArray49 = fibonacciHeap4.countersRep();
        boolean boolean50 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap4.insert((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[5, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(heapNode52);
    }

    @Test
    public void test5172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5172");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap23.new HeapNode((int) (short) 0);
        heapNode29.key = (byte) 100;
        heapNode29.key = (-1);
        int int34 = heapNode29.getKey();
        fibonacciHeap1.delete(heapNode29);
        int int36 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test5173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5173");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap51.insert(0);
        fibonacciHeap48.delete(heapNode54);
        fibonacciHeap44.delete(heapNode54);
        boolean boolean57 = fibonacciHeap44.empty();
        fibonacciHeap20.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap44.findMin();
        fibonacciHeap44.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(heapNode59);
    }

    @Test
    public void test5174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5174");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode5);
    }

    @Test
    public void test5175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5175");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        int[] intArray7 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap8.findMin();
        boolean boolean10 = fibonacciHeap8.empty();
        fibonacciHeap1.meld(fibonacciHeap8);
        int[] intArray12 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertNull(heapNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2, 0]");
    }

    @Test
    public void test5176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5176");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.insert(4);
        int[] intArray22 = fibonacciHeap1.countersRep();
        int[] intArray23 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap1.new HeapNode(0);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1]");
    }

    @Test
    public void test5177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5177");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        int[] intArray7 = fibonacciHeap5.countersRep();
        int int8 = fibonacciHeap5.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap5.insert(0);
        fibonacciHeap1.delete(heapNode10);
        int int12 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(heapNode13);
    }

    @Test
    public void test5178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5178");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.findMin();
        java.lang.Class<?> wildcardClass14 = heapNode13.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test5179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5179");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        int int11 = fibonacciHeap6.size();
        boolean boolean12 = fibonacciHeap6.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap23.new HeapNode((int) (byte) 100);
        int[] intArray28 = fibonacciHeap23.countersRep();
        int int29 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap23.new HeapNode((-1));
        fibonacciHeap6.meld(fibonacciHeap23);
        int int33 = fibonacciHeap23.potential();
        fibonacciHeap1.meld(fibonacciHeap23);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test5180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5180");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap1.insert((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap1.new HeapNode(0);
        int int30 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
    }

    @Test
    public void test5181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5181");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode((int) (byte) 10);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.new HeapNode((int) (byte) 100);
        int int28 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap20.new HeapNode(8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test5182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5182");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        boolean boolean11 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.insert(1);
        int int20 = heapNode19.key;
        int int21 = heapNode19.key;
        heapNode19.key = (-1);
        int int24 = heapNode19.getKey();
        fibonacciHeap15.delete(heapNode19);
        int int26 = fibonacciHeap15.size();
        int int27 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        fibonacciHeap41.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode(0);
        fibonacciHeap29.meld(fibonacciHeap41);
        int[] intArray47 = fibonacciHeap29.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap29.findMin();
        boolean boolean50 = fibonacciHeap29.empty();
        fibonacciHeap15.meld(fibonacciHeap29);
        fibonacciHeap7.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap15.new HeapNode((-1));
        int[] intArray55 = fibonacciHeap15.countersRep();
        java.lang.Class<?> wildcardClass56 = intArray55.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[6, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test5183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5183");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        int int7 = heapNode6.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test5184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5184");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (byte) 1);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.findMin();
        int int10 = fibonacciHeap1.potential();
        org.junit.Assert.assertNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test5185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5185");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert((int) ' ');
        int int28 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.new HeapNode((int) (byte) -1);
        boolean boolean31 = fibonacciHeap4.empty();
        int int32 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap4.new HeapNode((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
    }

    @Test
    public void test5186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5186");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.size();
        boolean boolean20 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap22.insert(0);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        fibonacciHeap40.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap28.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap28.insert((-1));
        fibonacciHeap22.meld(fibonacciHeap28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap51.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
    }

    @Test
    public void test5187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5187");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode4);
    }

    @Test
    public void test5188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5188");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        int int16 = fibonacciHeap14.potential();
        int int17 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap19.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap31.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap31.new HeapNode(32);
        fibonacciHeap14.delete(heapNode40);
        int int42 = heapNode40.key;
        fibonacciHeap1.delete(heapNode40);
        int[] intArray44 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap46.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        fibonacciHeap58.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap58.new HeapNode(0);
        fibonacciHeap46.meld(fibonacciHeap58);
        int[] intArray64 = fibonacciHeap58.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap58.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap58.insert((int) (short) 10);
        int int68 = fibonacciHeap58.size();
        fibonacciHeap58.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap58);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNull(heapNode65);
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test5189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5189");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (byte) 10);
        int int4 = heapNode3.key;
        int int5 = heapNode3.key;
        heapNode3.key = 10;
        int int8 = heapNode3.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test5190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5190");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        int int35 = fibonacciHeap24.size();
        int int36 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.insert(1);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap46.meld(fibonacciHeap52);
        int int55 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap46.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap58.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap58.new HeapNode((int) (short) 100);
        int int67 = heapNode66.key;
        fibonacciHeap46.delete(heapNode66);
        fibonacciHeap38.meld(fibonacciHeap46);
        fibonacciHeap24.meld(fibonacciHeap46);
        int int71 = fibonacciHeap24.potential();
        int int72 = fibonacciHeap24.size();
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap24.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
    }

    @Test
    public void test5191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5191");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        int[] intArray44 = fibonacciHeap26.countersRep();
        int int45 = fibonacciHeap26.potential();
        fibonacciHeap13.meld(fibonacciHeap26);
        int int47 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap13.new HeapNode((int) (short) 1);
        int[] intArray50 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[5, 0, 0, 0]");
    }

    @Test
    public void test5192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5192");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int[] intArray43 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.insert(0);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap52.insert(1);
        int int55 = heapNode54.key;
        int int56 = heapNode54.key;
        fibonacciHeap46.delete(heapNode54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int60 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap59.meld(fibonacciHeap62);
        int int64 = fibonacciHeap59.size();
        fibonacciHeap46.meld(fibonacciHeap59);
        fibonacciHeap24.meld(fibonacciHeap59);
        int int67 = fibonacciHeap59.potential();
        int int68 = fibonacciHeap59.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap59.insert(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap72.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap72.findMin();
        int int75 = fibonacciHeap72.size();
        int int76 = fibonacciHeap72.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap72.new HeapNode(4);
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap59.delete(heapNode78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(heapNode70);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertNotNull(heapNode74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test5193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5193");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(100);
        int int9 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test5194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5194");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        heapNode5.key = '#';
        int int14 = heapNode5.getKey();
        heapNode5.key = 0;
        heapNode5.key = (byte) 100;
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test5195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5195");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) '#');
        int int4 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test5196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5196");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        boolean boolean34 = fibonacciHeap31.empty();
        fibonacciHeap31.deleteMin();
        int int36 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap38.findMin();
        fibonacciHeap31.meld(fibonacciHeap38);
        fibonacciHeap1.meld(fibonacciHeap31);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray42 = fibonacciHeap31.countersRep();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(heapNode39);
    }

    @Test
    public void test5197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5197");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(7);
        int int25 = heapNode24.getKey();
        heapNode24.key = (byte) 100;
        heapNode24.key = 3;
        heapNode24.key = 100;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
    }

    @Test
    public void test5198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5198");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert(9);
        int int23 = fibonacciHeap13.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test5199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5199");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        heapNode4.key = 97;
        heapNode4.key = 4;
        heapNode4.key = (short) 10;
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
    }

    @Test
    public void test5200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5200");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap29.new HeapNode(0);
        fibonacciHeap17.meld(fibonacciHeap29);
        int[] intArray35 = fibonacciHeap29.countersRep();
        boolean boolean36 = fibonacciHeap29.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap29.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap29.insert(100);
        fibonacciHeap10.meld(fibonacciHeap29);
        int int42 = fibonacciHeap10.potential();
        int int43 = fibonacciHeap10.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
    }

    @Test
    public void test5201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5201");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        int[] intArray23 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.findMin();
        fibonacciHeap13.deleteMin();
        fibonacciHeap13.deleteMin();
        int int27 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap13.new HeapNode(6);
        heapNode29.key = '4';
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1]");
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test5202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5202");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.insert((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap26.insert(1);
        boolean boolean29 = fibonacciHeap26.empty();
        int int30 = fibonacciHeap26.size();
        int int31 = fibonacciHeap26.size();
        boolean boolean32 = fibonacciHeap26.empty();
        int int33 = fibonacciHeap26.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap26.insert((int) (byte) 10);
        fibonacciHeap1.meld(fibonacciHeap26);
        boolean boolean37 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test5203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5203");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int[] intArray4 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) '4');
        int int7 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.findMin();
        int int9 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1]");
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test5204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5204");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.new HeapNode(100);
        heapNode15.key = ' ';
        heapNode15.key = (byte) 0;
        int int20 = heapNode15.key;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test5205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5205");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        fibonacciHeap0.deleteMin();
        fibonacciHeap0.deleteMin();
        fibonacciHeap0.deleteMin();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
    }

    @Test
    public void test5206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5206");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode((int) ' ');
        heapNode22.key = 100;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
    }

    @Test
    public void test5207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5207");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        int int36 = fibonacciHeap31.size();
        fibonacciHeap31.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap31.new HeapNode(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap31.insert((int) (byte) 10);
        heapNode42.key = '#';
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(heapNode42);
    }

    @Test
    public void test5208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5208");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.insert((int) (byte) 0);
        int int27 = fibonacciHeap20.size();
        int int28 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap20.findMin();
        heapNode29.key = 'a';
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(heapNode29);
    }

    @Test
    public void test5209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5209");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        int[] intArray23 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.findMin();
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap13.insert(2);
        int int28 = fibonacciHeap13.potential();
        int int29 = fibonacciHeap13.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1]");
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test5210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5210");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.insert((-1));
        fibonacciHeap1.delete(heapNode43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.findMin();
        int[] intArray46 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap1.insert(1);
        int int49 = heapNode48.key;
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 1]");
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test5211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5211");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        int int15 = fibonacciHeap10.size();
        int[] intArray16 = fibonacciHeap10.countersRep();
        fibonacciHeap1.meld(fibonacciHeap10);
        boolean boolean18 = fibonacciHeap1.empty();
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        int int27 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap22.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap29.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap45.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap45.new HeapNode(0);
        fibonacciHeap33.meld(fibonacciHeap45);
        int[] intArray51 = fibonacciHeap33.countersRep();
        fibonacciHeap29.meld(fibonacciHeap33);
        fibonacciHeap22.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap55.insert(1);
        boolean boolean58 = fibonacciHeap55.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap55.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap55.new HeapNode((int) '#');
        fibonacciHeap22.delete(heapNode62);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap22.insert((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap1.delete(heapNode67);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(heapNode65);
    }

    @Test
    public void test5212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5212");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        boolean boolean11 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.insert(100);
        int int14 = heapNode13.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test5213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5213");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        heapNode27.key = (short) 1;
        int int31 = heapNode27.key;
        fibonacciHeap1.delete(heapNode27);
        int int33 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap1.insert((int) (byte) 1);
        int int36 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap38.findMin();
        fibonacciHeap1.delete(heapNode41);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(heapNode41);
    }

    @Test
    public void test5214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5214");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(0);
        int int14 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test5215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5215");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap24.new HeapNode(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap48.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        fibonacciHeap60.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap60.new HeapNode(0);
        fibonacciHeap48.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int68 = fibonacciHeap67.size();
        fibonacciHeap48.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap71 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap48.meld(fibonacciHeap71);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap71.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap82 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int83 = fibonacciHeap82.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap85 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap82.meld(fibonacciHeap85);
        fibonacciHeap79.meld(fibonacciHeap85);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode89 = fibonacciHeap79.new HeapNode((int) (short) 10);
        int int90 = fibonacciHeap79.potential();
        fibonacciHeap71.meld(fibonacciHeap79);
        fibonacciHeap24.meld(fibonacciHeap79);
        fibonacciHeap24.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test5216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5216");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        boolean boolean10 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test5217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5217");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap36.delete(heapNode42);
        fibonacciHeap32.delete(heapNode42);
        fibonacciHeap22.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap50.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode((int) (byte) 100);
        int[] intArray61 = fibonacciHeap56.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap63.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap63.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap72.meld(fibonacciHeap75);
        fibonacciHeap75.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap75.new HeapNode(0);
        fibonacciHeap63.meld(fibonacciHeap75);
        int[] intArray81 = fibonacciHeap75.countersRep();
        boolean boolean82 = fibonacciHeap75.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap75.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode86 = fibonacciHeap75.insert(100);
        fibonacciHeap56.meld(fibonacciHeap75);
        fibonacciHeap22.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode89 = fibonacciHeap22.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode91 = fibonacciHeap22.insert(4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(heapNode84);
        org.junit.Assert.assertNotNull(heapNode86);
        org.junit.Assert.assertNotNull(heapNode89);
        org.junit.Assert.assertNotNull(heapNode91);
    }

    @Test
    public void test5218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5218");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap34.insert(0);
        fibonacciHeap31.delete(heapNode37);
        fibonacciHeap27.delete(heapNode37);
        fibonacciHeap24.delete(heapNode37);
        fibonacciHeap1.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap42.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap46.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        fibonacciHeap58.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap58.new HeapNode(0);
        fibonacciHeap46.meld(fibonacciHeap58);
        int[] intArray64 = fibonacciHeap46.countersRep();
        fibonacciHeap42.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap46.new HeapNode((-1));
        int int68 = heapNode67.getKey();
        fibonacciHeap1.delete(heapNode67);
        int int70 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap1.findMin();
        boolean boolean72 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        int int75 = fibonacciHeap1.potential();
        int[] intArray76 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap1.new HeapNode(0);
        int int79 = heapNode78.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test5219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5219");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.new HeapNode((int) (short) 10);
        int int43 = fibonacciHeap32.potential();
        fibonacciHeap24.meld(fibonacciHeap32);
        int int45 = fibonacciHeap32.size();
        int int46 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap48.insert(1);
        boolean boolean51 = fibonacciHeap48.empty();
        int int52 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap53.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap57.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int67 = fibonacciHeap66.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap66.meld(fibonacciHeap69);
        fibonacciHeap69.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap69.new HeapNode(0);
        fibonacciHeap57.meld(fibonacciHeap69);
        int[] intArray75 = fibonacciHeap57.countersRep();
        fibonacciHeap53.meld(fibonacciHeap57);
        fibonacciHeap48.meld(fibonacciHeap57);
        fibonacciHeap48.deleteMin();
        int int79 = fibonacciHeap48.potential();
        fibonacciHeap48.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode81 = fibonacciHeap48.findMin();
        heapNode81.key = 6;
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap32.delete(heapNode81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(heapNode81);
    }

    @Test
    public void test5220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5220");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode(0);
        fibonacciHeap38.meld(fibonacciHeap50);
        int int56 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int62 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap61.insert(0);
        fibonacciHeap58.delete(heapNode64);
        heapNode64.key = (short) 1;
        int int68 = heapNode64.key;
        fibonacciHeap38.delete(heapNode64);
        fibonacciHeap13.delete(heapNode64);
        int int71 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap13.new HeapNode((int) (short) 0);
        heapNode73.key = 7;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test5221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5221");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap10.insert((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap44.insert(0);
        fibonacciHeap41.delete(heapNode47);
        fibonacciHeap37.delete(heapNode47);
        fibonacciHeap34.delete(heapNode47);
        fibonacciHeap10.delete(heapNode47);
        int int52 = heapNode47.getKey();
        heapNode47.key = 0;
        int int55 = heapNode47.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test5222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5222");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray9 = fibonacciHeap8.countersRep();
        fibonacciHeap1.meld(fibonacciHeap8);
        fibonacciHeap8.deleteMin();
        fibonacciHeap8.deleteMin();
        int int13 = fibonacciHeap8.size();
        int[] intArray14 = fibonacciHeap8.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap8.insert(97);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(heapNode16);
    }

    @Test
    public void test5223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5223");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap5.new HeapNode((int) (byte) 0);
        int[] intArray31 = fibonacciHeap5.countersRep();
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap44.insert(0);
        fibonacciHeap41.delete(heapNode47);
        fibonacciHeap37.delete(heapNode47);
        int[] intArray50 = fibonacciHeap37.countersRep();
        int int51 = fibonacciHeap37.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap37.findMin();
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap5.meld(fibonacciHeap37);
        java.lang.Class<?> wildcardClass55 = fibonacciHeap37.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test5224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5224");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        int[] intArray5 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        fibonacciHeap25.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap36.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        fibonacciHeap48.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode(0);
        fibonacciHeap36.meld(fibonacciHeap48);
        fibonacciHeap32.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap36.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap36.new HeapNode(7);
        fibonacciHeap9.meld(fibonacciHeap36);
        fibonacciHeap1.meld(fibonacciHeap9);
        int[] intArray61 = fibonacciHeap9.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[7, 0, 0, 0]");
    }

    @Test
    public void test5225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5225");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        heapNode7.key = (short) 1;
        int int11 = heapNode7.getKey();
        int int12 = heapNode7.key;
        heapNode7.key = 7;
        int int15 = heapNode7.getKey();
        heapNode7.key = 2;
        int int18 = heapNode7.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test5226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5226");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.insert((-1));
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.findMin();
        boolean boolean23 = fibonacciHeap1.empty();
        int[] intArray24 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 0]");
    }

    @Test
    public void test5227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5227");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        int[] intArray5 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        fibonacciHeap25.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap36.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        fibonacciHeap48.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode(0);
        fibonacciHeap36.meld(fibonacciHeap48);
        fibonacciHeap32.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap36.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap36.new HeapNode(7);
        fibonacciHeap9.meld(fibonacciHeap36);
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap1.insert(100);
        int[] intArray63 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[8, 0, 0, 0, 0]");
    }

    @Test
    public void test5228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5228");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        int[] intArray6 = fibonacciHeap1.countersRep();
        int int7 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode8);
    }

    @Test
    public void test5229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5229");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        int int3 = heapNode2.key;
        int int4 = heapNode2.getKey();
        int int5 = heapNode2.getKey();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test5230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5230");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.insert((int) (short) 100);
        int int15 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap10.new HeapNode(100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test5231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5231");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.insert((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap7.new HeapNode(32);
        java.lang.Class<?> wildcardClass14 = fibonacciHeap7.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test5232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5232");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        int int89 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode91 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode93 = fibonacciHeap24.insert(6);
        int int94 = heapNode93.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode91);
        org.junit.Assert.assertNotNull(heapNode93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 6 + "'", int94 == 6);
    }

    @Test
    public void test5233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5233");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap4.findMin();
        heapNode11.key = 'a';
        int int14 = heapNode11.getKey();
        java.lang.Class<?> wildcardClass15 = heapNode11.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test5234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5234");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap31.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap31.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        int int46 = fibonacciHeap44.potential();
        int int47 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap49.meld(fibonacciHeap55);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        fibonacciHeap61.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap61.new HeapNode(0);
        fibonacciHeap49.meld(fibonacciHeap61);
        int[] intArray67 = fibonacciHeap61.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap61.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap61.new HeapNode(32);
        fibonacciHeap44.delete(heapNode70);
        int int72 = heapNode70.key;
        fibonacciHeap31.delete(heapNode70);
        int[] intArray74 = fibonacciHeap31.countersRep();
        boolean boolean75 = fibonacciHeap31.empty();
        fibonacciHeap1.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        int int78 = fibonacciHeap31.potential();
        boolean boolean79 = fibonacciHeap31.empty();
        int int80 = fibonacciHeap31.potential();
        fibonacciHeap31.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test5235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5235");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        fibonacciHeap13.deleteMin();
        int int22 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(heapNode24);
    }

    @Test
    public void test5236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5236");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        int int21 = fibonacciHeap1.potential();
        boolean boolean22 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int[] intArray25 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap1.insert((int) (byte) -1);
        int int28 = heapNode27.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test5237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5237");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode((int) (short) 100);
        fibonacciHeap4.delete(heapNode21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap25.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap25.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap25.new HeapNode(32);
        fibonacciHeap4.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        fibonacciHeap43.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap43.new HeapNode((int) (short) 10);
        heapNode53.key = 2;
        int int56 = heapNode53.getKey();
        fibonacciHeap4.delete(heapNode53);
        heapNode53.key = (byte) 1;
        int int60 = heapNode53.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test5238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5238");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        fibonacciHeap1.deleteMin();
        boolean boolean9 = fibonacciHeap1.empty();
        int[] intArray10 = fibonacciHeap1.countersRep();
        int int11 = fibonacciHeap1.size();
        int[] intArray12 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        java.lang.Class<?> wildcardClass14 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test5239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5239");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        int int13 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.findMin();
        heapNode14.key = 5;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(heapNode14);
    }

    @Test
    public void test5240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5240");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode1 = fibonacciHeap0.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap3.new HeapNode((int) (short) 0);
        int int10 = fibonacciHeap3.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap15.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap22.insert(0);
        fibonacciHeap19.delete(heapNode25);
        fibonacciHeap15.delete(heapNode25);
        fibonacciHeap12.delete(heapNode25);
        fibonacciHeap3.delete(heapNode25);
        int[] intArray30 = fibonacciHeap3.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap3.insert(5);
        boolean boolean33 = fibonacciHeap3.empty();
        fibonacciHeap0.meld(fibonacciHeap3);
        java.lang.Class<?> wildcardClass35 = fibonacciHeap0.getClass();
        org.junit.Assert.assertNull(heapNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1]");
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test5241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5241");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        int int13 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap15.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        fibonacciHeap27.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap27.new HeapNode(0);
        fibonacciHeap15.meld(fibonacciHeap27);
        int[] intArray33 = fibonacciHeap15.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap15.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap15.findMin();
        boolean boolean36 = fibonacciHeap15.empty();
        fibonacciHeap1.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int40 = fibonacciHeap39.potential();
        int int41 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(97);
        fibonacciHeap1.meld(fibonacciHeap39);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test5242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5242");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        int int25 = heapNode24.key;
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test5243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5243");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        int int4 = heapNode3.key;
        heapNode3.key = 10;
        int int7 = heapNode3.key;
        heapNode3.key = (byte) 1;
        int int10 = heapNode3.key;
        heapNode3.key = (byte) 100;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test5244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5244");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap14.delete(heapNode20);
        fibonacciHeap4.meld(fibonacciHeap14);
        int[] intArray23 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int[] intArray26 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap28.deleteMin();
        fibonacciHeap28.deleteMin();
        fibonacciHeap28.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap28.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap28.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap28.new HeapNode(10);
        int int37 = fibonacciHeap28.potential();
        int int38 = fibonacciHeap28.potential();
        int[] intArray39 = fibonacciHeap28.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap28.insert((int) 'a');
        fibonacciHeap4.delete(heapNode41);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[4, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[4, 0]");
        org.junit.Assert.assertNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(heapNode41);
    }

    @Test
    public void test5245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5245");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        fibonacciHeap1.delete(heapNode14);
        int[] intArray18 = fibonacciHeap1.countersRep();
        boolean boolean19 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.new HeapNode((int) ' ');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test5246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5246");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode((int) (byte) 100);
        fibonacciHeap1.delete(heapNode22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap25.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.new HeapNode((-1));
        int int29 = fibonacciHeap25.size();
        fibonacciHeap1.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap35.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap42.insert(0);
        fibonacciHeap39.delete(heapNode45);
        fibonacciHeap35.delete(heapNode45);
        fibonacciHeap32.delete(heapNode45);
        int[] intArray49 = fibonacciHeap32.countersRep();
        boolean boolean50 = fibonacciHeap32.empty();
        boolean boolean51 = fibonacciHeap32.empty();
        fibonacciHeap25.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap25.findMin();
        java.lang.Class<?> wildcardClass54 = heapNode53.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test5247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5247");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        int int7 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap4.new HeapNode(5);
        int int10 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap12.insert(0);
        fibonacciHeap12.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap18.insert(1);
        int int21 = heapNode20.key;
        int int22 = heapNode20.key;
        fibonacciHeap12.delete(heapNode20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        int int30 = fibonacciHeap25.size();
        fibonacciHeap12.meld(fibonacciHeap25);
        int int32 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap12.insert(3);
        fibonacciHeap4.delete(heapNode34);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(heapNode34);
    }

    @Test
    public void test5248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5248");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        int int16 = fibonacciHeap14.potential();
        int int17 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap19.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap31.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap31.new HeapNode(32);
        fibonacciHeap14.delete(heapNode40);
        int int42 = heapNode40.key;
        fibonacciHeap1.delete(heapNode40);
        int[] intArray44 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap1.insert(0);
        heapNode47.key = 4;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode47);
    }

    @Test
    public void test5249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5249");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (byte) 10);
        int int4 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap13.insert(0);
        fibonacciHeap10.delete(heapNode16);
        fibonacciHeap6.delete(heapNode16);
        boolean boolean19 = fibonacciHeap6.empty();
        fibonacciHeap1.meld(fibonacciHeap6);
        fibonacciHeap6.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap6.insert(0);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(heapNode23);
    }

    @Test
    public void test5250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5250");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap7.new HeapNode(0);
        int int13 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(32);
        boolean boolean16 = fibonacciHeap15.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap15.new HeapNode((int) (byte) -1);
        fibonacciHeap7.delete(heapNode18);
        int[] intArray20 = fibonacciHeap7.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
    }

    @Test
    public void test5251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5251");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        fibonacciHeap1.delete(heapNode14);
        int[] intArray18 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.new HeapNode((int) (short) 1);
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        fibonacciHeap37.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode(0);
        fibonacciHeap25.meld(fibonacciHeap37);
        int int43 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap48.insert(0);
        fibonacciHeap45.delete(heapNode51);
        heapNode51.key = (short) 1;
        int int55 = heapNode51.key;
        fibonacciHeap25.delete(heapNode51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap25.insert((int) (short) 1);
        int int59 = heapNode58.getKey();
        fibonacciHeap20.delete(heapNode58);
        heapNode58.key = 8;
        int int63 = heapNode58.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8 + "'", int63 == 8);
    }

    @Test
    public void test5252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5252");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(35);
        fibonacciHeap1.deleteMin();
        int[] intArray10 = fibonacciHeap1.countersRep();
        int int11 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test5253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5253");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap7.findMin();
        heapNode10.key = (byte) 100;
        heapNode10.key = (byte) 100;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
    }

    @Test
    public void test5254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5254");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.findMin();
        fibonacciHeap1.meld(fibonacciHeap9);
        boolean boolean14 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test5255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5255");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        fibonacciHeap1.delete(heapNode14);
        int[] intArray18 = fibonacciHeap1.countersRep();
        int int19 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.insert((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.new HeapNode((int) ' ');
        heapNode24.key = (short) 10;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
    }

    @Test
    public void test5256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5256");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap28.findMin();
        int int30 = heapNode29.getKey();
        fibonacciHeap13.delete(heapNode29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap35.new HeapNode((int) (short) 0);
        int int42 = fibonacciHeap35.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap54.insert(0);
        fibonacciHeap51.delete(heapNode57);
        fibonacciHeap47.delete(heapNode57);
        fibonacciHeap44.delete(heapNode57);
        fibonacciHeap35.delete(heapNode57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap35.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap35.insert(52);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertNotNull(heapNode68);
    }

    @Test
    public void test5257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5257");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap0.insert(2);
        int int26 = fibonacciHeap0.size();
        int int27 = fibonacciHeap0.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap0.new HeapNode(9);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test5258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5258");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        int int3 = fibonacciHeap1.size();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode8);
    }

    @Test
    public void test5259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5259");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        int[] intArray3 = fibonacciHeap1.countersRep();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap15.insert(0);
        fibonacciHeap12.delete(heapNode18);
        fibonacciHeap8.delete(heapNode18);
        boolean boolean21 = fibonacciHeap8.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        fibonacciHeap8.meld(fibonacciHeap23);
        fibonacciHeap6.meld(fibonacciHeap8);
        boolean boolean27 = fibonacciHeap6.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap6.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap6.insert(35);
        fibonacciHeap1.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap6.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap6.insert(8);
        fibonacciHeap6.deleteMin();
        int int37 = fibonacciHeap6.size();
        int int38 = fibonacciHeap6.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test5260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5260");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.new HeapNode((int) (short) 10);
        int int43 = fibonacciHeap32.potential();
        fibonacciHeap24.meld(fibonacciHeap32);
        int int45 = fibonacciHeap32.size();
        int int46 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap32.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap32.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(heapNode48);
    }

    @Test
    public void test5261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5261");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.new HeapNode((int) (byte) 100);
        int int12 = fibonacciHeap7.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test5262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5262");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        boolean boolean7 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap4.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap11.insert(1);
        int int14 = heapNode13.key;
        heapNode13.key = '4';
        heapNode13.key = 1;
        fibonacciHeap4.delete(heapNode13);
        java.lang.Class<?> wildcardClass20 = heapNode13.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test5263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5263");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.findMin();
        int int22 = heapNode21.getKey();
        heapNode21.key = (byte) 1;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test5264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5264");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        boolean boolean13 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap18);
        int[] intArray30 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int52 = fibonacciHeap51.size();
        fibonacciHeap32.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap32.meld(fibonacciHeap55);
        int int57 = fibonacciHeap55.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap55.new HeapNode(0);
        fibonacciHeap1.delete(heapNode59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap1.findMin();
        int int62 = heapNode61.getKey();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[4, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test5265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5265");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        int[] intArray24 = fibonacciHeap0.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap0.findMin();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
    }

    @Test
    public void test5266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5266");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode(100);
        int[] intArray4 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1]");
    }

    @Test
    public void test5267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5267");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode((int) (short) 100);
        fibonacciHeap24.delete(heapNode41);
        fibonacciHeap1.meld(fibonacciHeap24);
        int[] intArray44 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap1.findMin();
        int[] intArray47 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1]");
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1]");
    }

    @Test
    public void test5268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5268");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        boolean boolean2 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(10);
        fibonacciHeap4.deleteMin();
        int int10 = fibonacciHeap4.size();
        boolean boolean11 = fibonacciHeap4.empty();
        fibonacciHeap4.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        int[] intArray21 = fibonacciHeap18.countersRep();
        boolean boolean22 = fibonacciHeap18.empty();
        fibonacciHeap4.meld(fibonacciHeap18);
        java.lang.Class<?> wildcardClass24 = fibonacciHeap4.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test5269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5269");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(5);
        int int8 = heapNode7.key;
        int int9 = heapNode7.getKey();
        int int10 = heapNode7.key;
        java.lang.Class<?> wildcardClass11 = heapNode7.getClass();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test5270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5270");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap34.insert(0);
        fibonacciHeap31.delete(heapNode37);
        fibonacciHeap27.delete(heapNode37);
        fibonacciHeap24.delete(heapNode37);
        fibonacciHeap1.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap51.insert(0);
        fibonacciHeap48.delete(heapNode54);
        fibonacciHeap44.delete(heapNode54);
        heapNode54.key = ' ';
        int int59 = heapNode54.getKey();
        int int60 = heapNode54.key;
        heapNode54.key = 0;
        int int63 = heapNode54.key;
        fibonacciHeap1.delete(heapNode54);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test5271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5271");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.size();
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap20.new HeapNode((int) (short) -1);
        int int27 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap20.findMin();
        fibonacciHeap20.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(heapNode28);
    }

    @Test
    public void test5272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5272");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(1);
        int int7 = heapNode6.key;
        int int8 = heapNode6.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test5273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5273");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap29.new HeapNode(0);
        fibonacciHeap17.meld(fibonacciHeap29);
        int[] intArray35 = fibonacciHeap29.countersRep();
        boolean boolean36 = fibonacciHeap29.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap29.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap29.insert(100);
        fibonacciHeap10.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap43.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap43.new HeapNode(10);
        heapNode47.key = 100;
        int int50 = heapNode47.getKey();
        fibonacciHeap10.delete(heapNode47);
        int[] intArray52 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap10.insert(4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 0]");
        org.junit.Assert.assertNotNull(heapNode54);
    }

    @Test
    public void test5274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5274");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        boolean boolean22 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.insert((-1));
        fibonacciHeap1.delete(heapNode43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.findMin();
        int[] intArray46 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap48.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap48.insert((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap48.insert(7);
        fibonacciHeap1.delete(heapNode53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap1.findMin();
        int[] intArray56 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 1]");
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1]");
    }

    @Test
    public void test5275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5275");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap1.deleteMin();
        int int32 = fibonacciHeap1.potential();
        int[] intArray33 = fibonacciHeap1.countersRep();
        int[] intArray34 = fibonacciHeap1.countersRep();
        int int35 = fibonacciHeap1.size();
        int int36 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap1.insert((int) (byte) 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
    }

    @Test
    public void test5276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5276");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap10.insert(1);
        int int13 = heapNode12.key;
        int int14 = heapNode12.key;
        fibonacciHeap4.delete(heapNode12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        int int22 = fibonacciHeap17.size();
        fibonacciHeap4.meld(fibonacciHeap17);
        int[] intArray24 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap4.insert((-1));
        fibonacciHeap1.delete(heapNode26);
        int int28 = heapNode26.key;
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test5277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5277");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.new HeapNode(6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap1.new HeapNode(0);
        heapNode25.key = 100;
        int int28 = heapNode25.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
    }

    @Test
    public void test5278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5278");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int24 = fibonacciHeap23.size();
        fibonacciHeap4.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap30.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap37.insert(0);
        fibonacciHeap34.delete(heapNode40);
        fibonacciHeap30.delete(heapNode40);
        fibonacciHeap27.delete(heapNode40);
        fibonacciHeap4.delete(heapNode40);
        fibonacciHeap1.delete(heapNode40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
    }

    @Test
    public void test5279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5279");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int5 = fibonacciHeap1.potential();
        int[] intArray6 = fibonacciHeap1.countersRep();
        int int7 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        fibonacciHeap21.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(0);
        fibonacciHeap9.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int29 = fibonacciHeap28.size();
        fibonacciHeap9.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap9.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap35.insert(0);
        fibonacciHeap35.deleteMin();
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap1.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap43.insert(1);
        boolean boolean46 = fibonacciHeap43.empty();
        int int47 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap48.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap52.meld(fibonacciHeap55);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap52.meld(fibonacciHeap58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int62 = fibonacciHeap61.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap61.meld(fibonacciHeap64);
        fibonacciHeap64.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap64.new HeapNode(0);
        fibonacciHeap52.meld(fibonacciHeap64);
        int[] intArray70 = fibonacciHeap52.countersRep();
        fibonacciHeap48.meld(fibonacciHeap52);
        fibonacciHeap43.meld(fibonacciHeap52);
        fibonacciHeap43.deleteMin();
        int int74 = fibonacciHeap43.potential();
        int[] intArray75 = fibonacciHeap43.countersRep();
        int[] intArray76 = fibonacciHeap43.countersRep();
        fibonacciHeap1.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 1]");
    }

    @Test
    public void test5280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5280");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        int[] intArray12 = fibonacciHeap1.countersRep();
        int int13 = fibonacciHeap1.potential();
        int int14 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.findMin();
        boolean boolean17 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(1);
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int42 = fibonacciHeap41.size();
        fibonacciHeap22.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap48.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap55.insert(0);
        fibonacciHeap52.delete(heapNode58);
        fibonacciHeap48.delete(heapNode58);
        fibonacciHeap45.delete(heapNode58);
        fibonacciHeap22.delete(heapNode58);
        fibonacciHeap19.delete(heapNode58);
        fibonacciHeap1.meld(fibonacciHeap19);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(heapNode58);
    }

    @Test
    public void test5281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5281");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int2 = fibonacciHeap1.size();
        boolean boolean3 = fibonacciHeap1.empty();
        boolean boolean4 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test5282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5282");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap23.new HeapNode((int) (short) 0);
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        int int37 = fibonacciHeap32.size();
        int[] intArray38 = fibonacciHeap32.countersRep();
        fibonacciHeap23.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap32.new HeapNode(0);
        int int42 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap32.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap32.new HeapNode(1);
        fibonacciHeap1.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap1.new HeapNode(5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(heapNode43);
    }

    @Test
    public void test5283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5283");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(32);
        int int11 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap15.deleteMin();
        fibonacciHeap15.deleteMin();
        fibonacciHeap15.deleteMin();
        int int19 = fibonacciHeap15.potential();
        int[] intArray20 = fibonacciHeap15.countersRep();
        int int21 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int43 = fibonacciHeap42.size();
        fibonacciHeap23.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap23.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap49.insert(0);
        fibonacciHeap49.deleteMin();
        fibonacciHeap46.meld(fibonacciHeap49);
        fibonacciHeap15.meld(fibonacciHeap46);
        fibonacciHeap4.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap58.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap58.findMin();
        int[] intArray61 = fibonacciHeap58.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap58.insert((int) '4');
        fibonacciHeap4.meld(fibonacciHeap58);
        int[] intArray65 = fibonacciHeap4.countersRep();
        int int66 = fibonacciHeap4.size();
        boolean boolean67 = fibonacciHeap4.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1]");
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[9, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test5284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5284");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int28 = fibonacciHeap27.size();
        fibonacciHeap8.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap8.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap31.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap40.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap31.delete(heapNode52);
        fibonacciHeap1.delete(heapNode52);
        int int55 = fibonacciHeap1.potential();
        boolean boolean56 = fibonacciHeap1.empty();
        boolean boolean57 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test5285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5285");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.insert(100);
        boolean boolean12 = fibonacciHeap1.empty();
        org.junit.Assert.assertNull(heapNode5);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test5286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5286");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        fibonacciHeap4.deleteMin();
        int int50 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap4.findMin();
        boolean boolean52 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap4.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap4.insert(52);
        int int57 = heapNode56.getKey();
        heapNode56.key = 10;
        int int60 = heapNode56.key;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
    }

    @Test
    public void test5287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5287");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        int int5 = heapNode4.getKey();
        heapNode4.key = 10;
        heapNode4.key = 4;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test5288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5288");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap4.findMin();
        int int12 = fibonacciHeap4.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test5289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5289");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        int int26 = fibonacciHeap4.size();
        int int27 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap31.insert(1);
        int int34 = heapNode33.key;
        int int35 = heapNode33.key;
        heapNode33.key = (-1);
        int int38 = heapNode33.getKey();
        fibonacciHeap29.delete(heapNode33);
        int int40 = fibonacciHeap29.size();
        boolean boolean41 = fibonacciHeap29.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap46.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap46.new HeapNode((int) (short) 10);
        fibonacciHeap29.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap46.new HeapNode((int) '#');
        int int60 = heapNode59.getKey();
        fibonacciHeap4.delete(heapNode59);
        int[] intArray62 = fibonacciHeap4.countersRep();
        int[] intArray63 = fibonacciHeap4.countersRep();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 1]");
    }

    @Test
    public void test5290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5290");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap10.new HeapNode(35);
        int[] intArray24 = fibonacciHeap10.countersRep();
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap10.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[5, 0]");
    }

    @Test
    public void test5291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5291");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap34.insert(0);
        fibonacciHeap31.delete(heapNode37);
        fibonacciHeap27.delete(heapNode37);
        fibonacciHeap24.delete(heapNode37);
        fibonacciHeap1.delete(heapNode37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        int[] intArray62 = fibonacciHeap56.countersRep();
        boolean boolean63 = fibonacciHeap56.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap56.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap67.findMin();
        int int69 = heapNode68.key;
        fibonacciHeap56.delete(heapNode68);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap72.meld(fibonacciHeap75);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap72.new HeapNode((int) (short) 0);
        fibonacciHeap56.meld(fibonacciHeap72);
        boolean boolean80 = fibonacciHeap56.empty();
        fibonacciHeap1.meld(fibonacciHeap56);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap1.findMin();
        int[] intArray84 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(heapNode83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 1]");
    }

    @Test
    public void test5292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5292");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode((int) (byte) 100);
        fibonacciHeap1.delete(heapNode22);
        java.lang.Class<?> wildcardClass24 = heapNode22.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test5293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5293");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        int[] intArray13 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        heapNode28.key = 2;
        int int31 = heapNode28.getKey();
        int int32 = heapNode28.key;
        heapNode28.key = (-1);
        heapNode28.key = '4';
        fibonacciHeap1.delete(heapNode28);
        int int38 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.findMin();
        int int40 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test5294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5294");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.size();
        int int24 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(3);
        int[] intArray27 = fibonacciHeap26.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap29.deleteMin();
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        int int38 = fibonacciHeap33.size();
        fibonacciHeap29.meld(fibonacciHeap33);
        int[] intArray40 = fibonacciHeap29.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap41.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode((int) (short) 100);
        fibonacciHeap29.delete(heapNode45);
        heapNode45.key = 5;
        fibonacciHeap26.delete(heapNode45);
        int int50 = heapNode45.key;
        fibonacciHeap20.delete(heapNode45);
        heapNode45.key = 'a';
        java.lang.Class<?> wildcardClass54 = heapNode45.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test5295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5295");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode((int) (short) 100);
        fibonacciHeap4.delete(heapNode21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap27.countersRep();
        fibonacciHeap23.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap23.new HeapNode((int) 'a');
        int int49 = heapNode48.key;
        int int50 = heapNode48.getKey();
        fibonacciHeap4.delete(heapNode48);
        int int52 = heapNode48.key;
        int int53 = heapNode48.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test5296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5296");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap36.delete(heapNode42);
        fibonacciHeap32.delete(heapNode42);
        fibonacciHeap22.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap22.findMin();
        boolean boolean47 = fibonacciHeap22.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test5297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5297");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.new HeapNode((int) (short) 10);
        int int43 = fibonacciHeap32.potential();
        fibonacciHeap24.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap24.insert((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap24.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertNotNull(heapNode47);
    }

    @Test
    public void test5298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5298");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap13.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap20.insert(0);
        fibonacciHeap17.delete(heapNode23);
        fibonacciHeap13.delete(heapNode23);
        fibonacciHeap10.delete(heapNode23);
        fibonacciHeap1.delete(heapNode23);
        int[] intArray28 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap1.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap1.new HeapNode((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap36.insert(0);
        int int40 = heapNode39.key;
        fibonacciHeap34.delete(heapNode39);
        heapNode39.key = (byte) 10;
        int int44 = heapNode39.key;
        fibonacciHeap1.delete(heapNode39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap47.meld(fibonacciHeap53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        fibonacciHeap59.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap59.new HeapNode(0);
        fibonacciHeap47.meld(fibonacciHeap59);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int67 = fibonacciHeap66.size();
        fibonacciHeap47.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap47.meld(fibonacciHeap70);
        int int72 = fibonacciHeap70.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap70.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap70);
        int int76 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test5299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5299");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        fibonacciHeap32.meld(fibonacciHeap39);
        fibonacciHeap1.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap1.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap1.new HeapNode((int) (short) 0);
        heapNode46.key = (byte) 1;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test5300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5300");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.findMin();
        heapNode40.key = (short) 100;
        int int43 = heapNode40.key;
        fibonacciHeap1.delete(heapNode40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(heapNode45);
    }

    @Test
    public void test5301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5301");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        fibonacciHeap1.deleteMin();
        int int24 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap1.insert((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(heapNode26);
    }

    @Test
    public void test5302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5302");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        fibonacciHeap13.deleteMin();
        int int22 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.findMin();
        fibonacciHeap13.deleteMin();
        int int25 = fibonacciHeap13.size();
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int29 = fibonacciHeap28.size();
        boolean boolean30 = fibonacciHeap28.empty();
        int int31 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int34 = fibonacciHeap33.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap33.findMin();
        int int36 = fibonacciHeap33.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap33.insert(0);
        fibonacciHeap28.delete(heapNode38);
        fibonacciHeap13.meld(fibonacciHeap28);
        int[] intArray41 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
    }

    @Test
    public void test5303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5303");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        fibonacciHeap18.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap18.new HeapNode(0);
        fibonacciHeap6.meld(fibonacciHeap18);
        int[] intArray24 = fibonacciHeap18.countersRep();
        boolean boolean25 = fibonacciHeap18.empty();
        fibonacciHeap1.meld(fibonacciHeap18);
        int[] intArray27 = fibonacciHeap18.countersRep();
        int int28 = fibonacciHeap18.size();
        int[] intArray29 = fibonacciHeap18.countersRep();
        boolean boolean30 = fibonacciHeap18.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.insert(0);
        fibonacciHeap36.delete(heapNode42);
        fibonacciHeap32.delete(heapNode42);
        boolean boolean45 = fibonacciHeap32.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        fibonacciHeap32.meld(fibonacciHeap47);
        int int50 = fibonacciHeap32.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap32.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap32.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap56.meld(fibonacciHeap59);
        fibonacciHeap59.deleteMin();
        int[] intArray62 = fibonacciHeap59.countersRep();
        int int63 = fibonacciHeap59.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap59.new HeapNode(1);
        boolean boolean66 = fibonacciHeap59.empty();
        fibonacciHeap32.meld(fibonacciHeap59);
        fibonacciHeap18.meld(fibonacciHeap59);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test5304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5304");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        boolean boolean9 = fibonacciHeap1.empty();
        int int10 = fibonacciHeap1.size();
        int int11 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test5305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5305");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int int14 = fibonacciHeap1.size();
        int int15 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test5306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5306");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap32.new HeapNode((int) (short) 10);
        int int43 = fibonacciHeap32.potential();
        fibonacciHeap24.meld(fibonacciHeap32);
        int int45 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap32.insert(52);
        int int48 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap50.insert((int) (byte) 10);
        int int53 = heapNode52.key;
        fibonacciHeap32.delete(heapNode52);
        heapNode52.key = 9;
        heapNode52.key = 8;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
    }

    @Test
    public void test5307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5307");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        int[] intArray29 = fibonacciHeap5.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap31.insert(0);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.insert(1);
        int int40 = heapNode39.key;
        int int41 = heapNode39.key;
        fibonacciHeap31.delete(heapNode39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        int int49 = fibonacciHeap44.size();
        fibonacciHeap31.meld(fibonacciHeap44);
        int int51 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap31.insert(3);
        int int54 = heapNode53.key;
        fibonacciHeap5.delete(heapNode53);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap5.insert(8);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(heapNode53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(heapNode57);
    }

    @Test
    public void test5308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5308");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap12.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap29.new HeapNode(0);
        fibonacciHeap17.meld(fibonacciHeap29);
        int[] intArray35 = fibonacciHeap29.countersRep();
        boolean boolean36 = fibonacciHeap29.empty();
        fibonacciHeap12.meld(fibonacciHeap29);
        fibonacciHeap29.deleteMin();
        fibonacciHeap29.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap29);
        int int41 = fibonacciHeap1.potential();
        java.lang.Class<?> wildcardClass42 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test5309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5309");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap1.deleteMin();
        int int32 = fibonacciHeap1.potential();
        int[] intArray33 = fibonacciHeap1.countersRep();
        int[] intArray34 = fibonacciHeap1.countersRep();
        int int35 = fibonacciHeap1.size();
        int int36 = fibonacciHeap1.potential();
        boolean boolean37 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test5310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5310");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        int[] intArray33 = fibonacciHeap30.countersRep();
        int int34 = fibonacciHeap30.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap24.delete(heapNode36);
        fibonacciHeap24.deleteMin();
        boolean boolean39 = fibonacciHeap24.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test5311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5311");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap0.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap0.insert(9);
        int[] intArray7 = fibonacciHeap0.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap0.findMin();
        fibonacciHeap0.deleteMin();
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1]");
        org.junit.Assert.assertNotNull(heapNode8);
    }

    @Test
    public void test5312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5312");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int int15 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap23.insert((-1));
        fibonacciHeap17.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap45.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        fibonacciHeap57.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap57.new HeapNode(0);
        fibonacciHeap45.meld(fibonacciHeap57);
        int[] intArray63 = fibonacciHeap57.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap57.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap57.new HeapNode(32);
        fibonacciHeap17.delete(heapNode66);
        heapNode66.key = '4';
        heapNode66.key = 3;
        fibonacciHeap1.delete(heapNode66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap1.insert((int) '4');
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNull(heapNode64);
        org.junit.Assert.assertNotNull(heapNode74);
    }

    @Test
    public void test5313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5313");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.insert(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap24.new HeapNode((int) (short) 0);
        int int93 = heapNode92.key;
        heapNode92.key = 3;
        int int96 = heapNode92.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
    }

    @Test
    public void test5314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5314");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.new HeapNode(32);
        fibonacciHeap7.delete(heapNode33);
        boolean boolean35 = fibonacciHeap7.empty();
        int[] intArray36 = fibonacciHeap7.countersRep();
        int[] intArray37 = fibonacciHeap7.countersRep();
        fibonacciHeap7.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap7.insert((int) 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(heapNode31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNull(heapNode39);
        org.junit.Assert.assertNotNull(heapNode41);
    }

    @Test
    public void test5315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5315");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        int int2 = fibonacciHeap1.potential();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        int[] intArray26 = fibonacciHeap20.countersRep();
        boolean boolean27 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap20.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap20.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap33.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap42.meld(fibonacciHeap45);
        fibonacciHeap45.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap45.new HeapNode(0);
        fibonacciHeap33.meld(fibonacciHeap45);
        int[] intArray51 = fibonacciHeap33.countersRep();
        int int52 = fibonacciHeap33.potential();
        fibonacciHeap20.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap20.new HeapNode((int) (short) -1);
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap1.findMin();
        int int58 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
    }

    @Test
    public void test5316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5316");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap1.new HeapNode((int) (byte) 100);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
    }

    @Test
    public void test5317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5317");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap27.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap34.insert(0);
        fibonacciHeap31.delete(heapNode37);
        fibonacciHeap27.delete(heapNode37);
        boolean boolean40 = fibonacciHeap27.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        fibonacciHeap27.meld(fibonacciHeap42);
        int int45 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap27.insert((int) (byte) 100);
        fibonacciHeap20.delete(heapNode47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap20.insert((int) (short) 10);
        int int51 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap20.new HeapNode(2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test5318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5318");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        int int13 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap15.findMin();
        int int17 = fibonacciHeap15.size();
        fibonacciHeap4.meld(fibonacciHeap15);
        int int19 = fibonacciHeap4.size();
        int int20 = fibonacciHeap4.potential();
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap4.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test5319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5319");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(32);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
    }

    @Test
    public void test5320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5320");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        int int6 = fibonacciHeap1.size();
        boolean boolean7 = fibonacciHeap1.empty();
        int int8 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap12.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap12.new HeapNode((int) (short) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap22.insert(1);
        boolean boolean25 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap22.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap22.new HeapNode((int) '#');
        fibonacciHeap12.delete(heapNode29);
        fibonacciHeap1.delete(heapNode29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap1.insert(5);
        int int38 = heapNode37.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
    }

    @Test
    public void test5321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5321");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        int[] intArray4 = fibonacciHeap1.countersRep();
        int int5 = fibonacciHeap1.size();
        int[] intArray6 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(3);
        boolean boolean9 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1]");
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test5322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5322");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        int int15 = fibonacciHeap4.size();
        boolean boolean16 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap4.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap24.delete(heapNode30);
        fibonacciHeap20.delete(heapNode30);
        int[] intArray33 = fibonacciHeap20.countersRep();
        int int34 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap20.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap20.findMin();
        int[] intArray37 = fibonacciHeap20.countersRep();
        fibonacciHeap20.deleteMin();
        fibonacciHeap20.deleteMin();
        fibonacciHeap4.meld(fibonacciHeap20);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(heapNode18);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1]");
    }

    @Test
    public void test5323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5323");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        fibonacciHeap1.deleteMin();
        int int5 = fibonacciHeap1.potential();
        int int6 = fibonacciHeap1.potential();
        int int7 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test5324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5324");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray21 = fibonacciHeap20.countersRep();
        fibonacciHeap20.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode((int) 'a');
        int int26 = fibonacciHeap20.size();
        int int27 = fibonacciHeap20.size();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test5325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5325");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(3);
        int[] intArray2 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap4.deleteMin();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        int int13 = fibonacciHeap8.size();
        fibonacciHeap4.meld(fibonacciHeap8);
        int[] intArray15 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap16.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode((int) (short) 100);
        fibonacciHeap4.delete(heapNode20);
        heapNode20.key = 5;
        fibonacciHeap1.delete(heapNode20);
        int int25 = heapNode20.key;
        heapNode20.key = 97;
        heapNode20.key = 52;
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test5326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5326");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int[] intArray19 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.new HeapNode(10);
        int int22 = heapNode21.key;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test5327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5327");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        int int16 = fibonacciHeap14.potential();
        int int17 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap19.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap31.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap31.new HeapNode(32);
        fibonacciHeap14.delete(heapNode40);
        int int42 = heapNode40.key;
        fibonacciHeap1.delete(heapNode40);
        int[] intArray44 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int47 = fibonacciHeap46.potential();
        fibonacciHeap46.deleteMin();
        int int49 = fibonacciHeap46.size();
        fibonacciHeap1.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap1.findMin();
        int int52 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test5328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5328");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        int[] intArray9 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.findMin();
        int int11 = fibonacciHeap4.potential();
        boolean boolean12 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(heapNode13);
    }

    @Test
    public void test5329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5329");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        boolean boolean8 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.insert((int) (byte) -1);
        int int11 = fibonacciHeap1.potential();
        int int12 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap14.meld(fibonacciHeap20);
        int int22 = fibonacciHeap20.potential();
        int int23 = fibonacciHeap20.size();
        boolean boolean24 = fibonacciHeap20.empty();
        int[] intArray25 = fibonacciHeap20.countersRep();
        fibonacciHeap1.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        boolean boolean28 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        fibonacciHeap33.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap33.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap41.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        fibonacciHeap53.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap53.new HeapNode(0);
        fibonacciHeap41.meld(fibonacciHeap53);
        int[] intArray59 = fibonacciHeap53.countersRep();
        boolean boolean60 = fibonacciHeap53.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap53.insert((int) (byte) 100);
        int[] intArray63 = fibonacciHeap53.countersRep();
        fibonacciHeap33.meld(fibonacciHeap53);
        boolean boolean65 = fibonacciHeap53.empty();
        int[] intArray66 = fibonacciHeap53.countersRep();
        int int67 = fibonacciHeap53.size();
        fibonacciHeap20.meld(fibonacciHeap53);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[3]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test5330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5330");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(100);
        int[] intArray2 = fibonacciHeap1.countersRep();
        int int3 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test5331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5331");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap16.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap29.insert(0);
        fibonacciHeap26.delete(heapNode32);
        fibonacciHeap16.meld(fibonacciHeap26);
        int[] intArray35 = fibonacciHeap16.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.insert(1);
        int int42 = heapNode41.key;
        int int43 = heapNode41.key;
        heapNode41.key = (-1);
        int int46 = heapNode41.getKey();
        fibonacciHeap37.delete(heapNode41);
        int int48 = fibonacciHeap37.size();
        boolean boolean49 = fibonacciHeap37.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap37.findMin();
        fibonacciHeap16.meld(fibonacciHeap37);
        fibonacciHeap1.meld(fibonacciHeap37);
        int int53 = fibonacciHeap1.potential();
        boolean boolean54 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test5332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5332");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        int int3 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        int[] intArray12 = fibonacciHeap9.countersRep();
        int int13 = fibonacciHeap9.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap9.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap9.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.insert(2);
        fibonacciHeap1.delete(heapNode19);
        int int21 = heapNode19.getKey();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test5333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5333");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray20 = fibonacciHeap19.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap19.new HeapNode(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap19.new HeapNode((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        int[] intArray44 = fibonacciHeap38.countersRep();
        boolean boolean45 = fibonacciHeap38.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap38.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap49.findMin();
        int int51 = heapNode50.key;
        fibonacciHeap38.delete(heapNode50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap54.new HeapNode((int) (short) 0);
        fibonacciHeap38.meld(fibonacciHeap54);
        int[] intArray62 = fibonacciHeap38.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap64.new HeapNode((int) (short) 1);
        int[] intArray67 = fibonacciHeap64.countersRep();
        fibonacciHeap38.meld(fibonacciHeap64);
        boolean boolean69 = fibonacciHeap38.empty();
        int int70 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap38.findMin();
        fibonacciHeap19.meld(fibonacciHeap38);
        fibonacciHeap1.meld(fibonacciHeap19);
        boolean boolean74 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[2, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test5334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5334");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        heapNode27.key = (short) 1;
        int int31 = heapNode27.key;
        fibonacciHeap1.delete(heapNode27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap1.insert((int) (short) 1);
        boolean boolean35 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap1.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.insert((int) '4');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(heapNode39);
    }

    @Test
    public void test5335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5335");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        boolean boolean11 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap15.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap15.new HeapNode(10);
        fibonacciHeap13.delete(heapNode19);
        int int21 = heapNode19.getKey();
        fibonacciHeap7.delete(heapNode19);
        java.lang.Class<?> wildcardClass23 = fibonacciHeap7.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test5336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5336");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray9 = fibonacciHeap8.countersRep();
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        fibonacciHeap24.meld(fibonacciHeap31);
        int int34 = fibonacciHeap31.size();
        fibonacciHeap1.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap31.new HeapNode((int) (byte) -1);
        int[] intArray38 = fibonacciHeap31.countersRep();
        java.lang.Class<?> wildcardClass39 = fibonacciHeap31.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[4]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test5337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5337");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        int int10 = fibonacciHeap7.potential();
        fibonacciHeap7.deleteMin();
        fibonacciHeap7.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap24.insert(0);
        fibonacciHeap21.delete(heapNode27);
        fibonacciHeap17.delete(heapNode27);
        fibonacciHeap14.delete(heapNode27);
        int[] intArray31 = fibonacciHeap14.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap33.new HeapNode((int) (short) 1);
        fibonacciHeap14.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap14.new HeapNode(0);
        int[] intArray39 = fibonacciHeap14.countersRep();
        fibonacciHeap7.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap7.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1]");
        org.junit.Assert.assertNotNull(heapNode41);
    }

    @Test
    public void test5338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5338");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap9.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
    }

    @Test
    public void test5339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5339");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap22.new HeapNode(2);
        int int33 = fibonacciHeap22.size();
        boolean boolean34 = fibonacciHeap22.empty();
        int int35 = fibonacciHeap22.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test5340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5340");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.new HeapNode((int) (short) 1);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap13.new HeapNode((int) (byte) 10);
        fibonacciHeap13.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test5341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5341");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap13.new HeapNode((int) (short) 10);
        int[] intArray21 = fibonacciHeap13.countersRep();
        int[] intArray22 = fibonacciHeap13.countersRep();
        int int23 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.new HeapNode((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test5342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5342");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        fibonacciHeap13.deleteMin();
        int[] intArray23 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.new HeapNode(1);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap13.findMin();
        int[] intArray29 = fibonacciHeap13.countersRep();
        int int30 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap13.new HeapNode((int) 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNull(heapNode24);
        org.junit.Assert.assertNull(heapNode28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test5343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5343");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int int7 = fibonacciHeap4.potential();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap4.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        int int15 = fibonacciHeap14.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap14.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap14.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap14.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap14.new HeapNode((int) ' ');
        fibonacciHeap4.delete(heapNode22);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertNotNull(heapNode20);
    }

    @Test
    public void test5344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5344");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap3.new HeapNode(10);
        fibonacciHeap1.delete(heapNode7);
        int int9 = heapNode7.getKey();
        int int10 = heapNode7.key;
        int int11 = heapNode7.getKey();
        heapNode7.key = (short) 1;
        heapNode7.key = (short) 100;
        int int16 = heapNode7.getKey();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test5345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5345");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        int[] intArray52 = fibonacciHeap46.countersRep();
        boolean boolean53 = fibonacciHeap46.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap46.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap57.findMin();
        int int59 = heapNode58.key;
        fibonacciHeap46.delete(heapNode58);
        fibonacciHeap1.delete(heapNode58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap63.insert((int) (short) -1);
        fibonacciHeap1.delete(heapNode65);
        heapNode65.key = 7;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(heapNode65);
    }

    @Test
    public void test5346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5346");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        int[] intArray52 = fibonacciHeap46.countersRep();
        boolean boolean53 = fibonacciHeap46.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap46.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap57.findMin();
        int int59 = heapNode58.key;
        fibonacciHeap46.delete(heapNode58);
        fibonacciHeap1.delete(heapNode58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap63.insert((int) (short) -1);
        fibonacciHeap1.delete(heapNode65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap1.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap70.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap70.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        fibonacciHeap70.meld(fibonacciHeap76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode80 = fibonacciHeap70.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap70.insert((int) (short) -1);
        fibonacciHeap1.delete(heapNode82);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertNotNull(heapNode72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode82);
    }

    @Test
    public void test5347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5347");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap6.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        fibonacciHeap6.meld(fibonacciHeap18);
        int int27 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap6.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap6.findMin();
        fibonacciHeap1.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap1.insert((int) (short) 1);
        int int34 = fibonacciHeap1.size();
        int[] intArray35 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 0, 0, 0, 0]");
    }

    @Test
    public void test5348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5348");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        int int24 = fibonacciHeap0.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int46 = fibonacciHeap45.size();
        fibonacciHeap26.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap26.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap52.insert(0);
        fibonacciHeap52.deleteMin();
        fibonacciHeap49.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap49.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap49.insert((int) ' ');
        fibonacciHeap0.delete(heapNode61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap0.new HeapNode(3);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap66.deleteMin();
        fibonacciHeap66.deleteMin();
        boolean boolean69 = fibonacciHeap66.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap66.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap66.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap66.findMin();
        fibonacciHeap0.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap0.insert((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertNotNull(heapNode72);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertNotNull(heapNode76);
    }

    @Test
    public void test5349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5349");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        int int35 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap24.new HeapNode((int) '#');
        int int38 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap24.findMin();
        int int40 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap45.insert(0);
        fibonacciHeap42.delete(heapNode48);
        heapNode48.key = (short) 1;
        int int52 = heapNode48.getKey();
        int int53 = heapNode48.key;
        int int54 = heapNode48.key;
        heapNode48.key = (byte) -1;
        int int57 = heapNode48.getKey();
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap24.delete(heapNode48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test5350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5350");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap0.new HeapNode((int) (short) 100);
        boolean boolean5 = fibonacciHeap0.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap0.insert(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        fibonacciHeap21.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(0);
        fibonacciHeap9.meld(fibonacciHeap21);
        int[] intArray27 = fibonacciHeap9.countersRep();
        int int28 = fibonacciHeap9.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap33.insert(0);
        fibonacciHeap30.delete(heapNode36);
        fibonacciHeap9.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap30.new HeapNode(2);
        heapNode40.key = (byte) 10;
        int int43 = heapNode40.getKey();
        int int44 = heapNode40.getKey();
        fibonacciHeap0.delete(heapNode40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass47 = heapNode46.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNull(heapNode46);
    }

    @Test
    public void test5351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5351");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        int[] intArray9 = fibonacciHeap4.countersRep();
        int[] intArray10 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        int[] intArray14 = fibonacciHeap12.countersRep();
        int int15 = fibonacciHeap12.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap19.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap26.insert(0);
        fibonacciHeap23.delete(heapNode29);
        fibonacciHeap19.delete(heapNode29);
        boolean boolean32 = fibonacciHeap19.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        fibonacciHeap19.meld(fibonacciHeap34);
        fibonacciHeap17.meld(fibonacciHeap19);
        boolean boolean38 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap17.new HeapNode((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap17.insert(35);
        fibonacciHeap12.meld(fibonacciHeap17);
        fibonacciHeap12.deleteMin();
        fibonacciHeap4.meld(fibonacciHeap12);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode47);
    }

    @Test
    public void test5352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5352");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(10);
        heapNode5.key = 1;
        org.junit.Assert.assertNotNull(heapNode5);
    }

    @Test
    public void test5353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5353");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        boolean boolean11 = fibonacciHeap7.empty();
        int int12 = fibonacciHeap7.potential();
        int int13 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap7.findMin();
        int int15 = fibonacciHeap7.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test5354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5354");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        int int16 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap10.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap24.delete(heapNode30);
        fibonacciHeap20.delete(heapNode30);
        boolean boolean33 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        fibonacciHeap20.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap39.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        fibonacciHeap51.meld(fibonacciHeap58);
        fibonacciHeap20.meld(fibonacciHeap58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap20.new HeapNode(2);
        int[] intArray64 = fibonacciHeap20.countersRep();
        fibonacciHeap10.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap20.insert((int) (short) 10);
        java.lang.Class<?> wildcardClass68 = fibonacciHeap20.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test5355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5355");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap10.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap19.new HeapNode((int) (short) 10);
        fibonacciHeap10.meld(fibonacciHeap19);
        fibonacciHeap1.meld(fibonacciHeap10);
        int int32 = fibonacciHeap1.potential();
        java.lang.Class<?> wildcardClass33 = fibonacciHeap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test5356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5356");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.findMin();
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap10.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap10.insert((int) (byte) 1);
        fibonacciHeap1.delete(heapNode15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap18.findMin();
        int int21 = fibonacciHeap18.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap22.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode((int) (short) 100);
        boolean boolean27 = fibonacciHeap22.empty();
        fibonacciHeap18.meld(fibonacciHeap22);
        boolean boolean29 = fibonacciHeap22.empty();
        int int30 = fibonacciHeap22.size();
        fibonacciHeap1.meld(fibonacciHeap22);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test5357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5357");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        fibonacciHeap28.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap28.new HeapNode(0);
        fibonacciHeap16.meld(fibonacciHeap28);
        int[] intArray34 = fibonacciHeap16.countersRep();
        fibonacciHeap12.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap16.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap39.meld(fibonacciHeap51);
        int[] intArray57 = fibonacciHeap51.countersRep();
        int int58 = fibonacciHeap51.size();
        int int59 = fibonacciHeap51.size();
        fibonacciHeap16.meld(fibonacciHeap51);
        int int61 = fibonacciHeap51.potential();
        boolean boolean62 = fibonacciHeap51.empty();
        fibonacciHeap51.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap51);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap51.insert(1);
        int[] intArray67 = fibonacciHeap51.countersRep();
        boolean boolean68 = fibonacciHeap51.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int71 = fibonacciHeap70.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap70.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap70.meld(fibonacciHeap76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap70.findMin();
        fibonacciHeap51.meld(fibonacciHeap70);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(heapNode78);
    }

    @Test
    public void test5358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5358");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap16.insert(35);
        heapNode27.key = 32;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test5359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5359");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        int int22 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.potential();
        fibonacciHeap24.deleteMin();
        int[] intArray27 = fibonacciHeap24.countersRep();
        int int28 = fibonacciHeap24.potential();
        fibonacciHeap3.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap24.new HeapNode(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode(3);
        int int35 = heapNode34.key;
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
    }

    @Test
    public void test5360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5360");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap26.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        fibonacciHeap38.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap38.new HeapNode(0);
        fibonacciHeap26.meld(fibonacciHeap38);
        int[] intArray44 = fibonacciHeap26.countersRep();
        int int45 = fibonacciHeap26.potential();
        fibonacciHeap13.meld(fibonacciHeap26);
        int[] intArray47 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[5, 0, 0, 0]");
    }

    @Test
    public void test5361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5361");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap9.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap9.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap9.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap9.insert((int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(heapNode15);
        org.junit.Assert.assertNotNull(heapNode17);
        org.junit.Assert.assertNotNull(heapNode19);
    }

    @Test
    public void test5362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5362");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int[] intArray6 = fibonacciHeap1.countersRep();
        int int7 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test5363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5363");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap13.new HeapNode((int) (short) 10);
        int[] intArray21 = fibonacciHeap13.countersRep();
        int int22 = fibonacciHeap13.size();
        int int23 = fibonacciHeap13.size();
        int int24 = fibonacciHeap13.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test5364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5364");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        int int20 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap34.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap34.new HeapNode(0);
        fibonacciHeap22.meld(fibonacciHeap34);
        int[] intArray40 = fibonacciHeap34.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap34.findMin();
        fibonacciHeap15.meld(fibonacciHeap34);
        fibonacciHeap1.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(heapNode41);
        org.junit.Assert.assertNotNull(heapNode44);
    }

    @Test
    public void test5365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5365");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        int int13 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap1.new HeapNode((int) '#');
        heapNode15.key = 1;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test5366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5366");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        boolean boolean6 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.insert((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(heapNode8);
    }

    @Test
    public void test5367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5367");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap16.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode((int) (byte) 100);
        int[] intArray27 = fibonacciHeap22.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        fibonacciHeap41.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap41.new HeapNode(0);
        fibonacciHeap29.meld(fibonacciHeap41);
        int[] intArray47 = fibonacciHeap41.countersRep();
        boolean boolean48 = fibonacciHeap41.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap41.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap41.insert(100);
        fibonacciHeap22.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap55.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap55.new HeapNode(10);
        heapNode59.key = 100;
        int int62 = heapNode59.getKey();
        fibonacciHeap22.delete(heapNode59);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap22.findMin();
        heapNode65.key = (byte) 1;
        int int68 = heapNode65.key;
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test5368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5368");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        int int22 = fibonacciHeap1.size();
        boolean boolean23 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap28.new HeapNode((int) (short) 10);
        heapNode38.key = 2;
        int int41 = heapNode38.getKey();
        fibonacciHeap1.delete(heapNode38);
        int[] intArray43 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 1]");
    }

    @Test
    public void test5369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5369");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap24.insert(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap24.insert((int) (short) 0);
        int int93 = fibonacciHeap24.potential();
        boolean boolean94 = fibonacciHeap24.empty();
        int int95 = fibonacciHeap24.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 9 + "'", int93 == 9);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 9 + "'", int95 == 9);
    }

    @Test
    public void test5370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5370");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode(0);
    }

    @Test
    public void test5371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5371");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.new HeapNode(0);
        fibonacciHeap1.delete(heapNode5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        int[] intArray8 = fibonacciHeap1.countersRep();
        int int9 = fibonacciHeap1.size();
        org.junit.Assert.assertNull(heapNode7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test5372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5372");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.new HeapNode(5);
        boolean boolean5 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test5373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5373");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        boolean boolean12 = fibonacciHeap5.empty();
        int int13 = fibonacciHeap5.size();
        int int14 = fibonacciHeap5.potential();
        fibonacciHeap5.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap5.new HeapNode(10);
        heapNode17.key = '4';
        heapNode17.key = (short) 100;
        int int22 = heapNode17.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
    }

    @Test
    public void test5374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5374");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        int int16 = fibonacciHeap14.potential();
        int int17 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap19.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap19.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap31.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap31.new HeapNode(32);
        fibonacciHeap14.delete(heapNode40);
        int int42 = heapNode40.key;
        fibonacciHeap1.delete(heapNode40);
        int[] intArray44 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int47 = fibonacciHeap46.potential();
        fibonacciHeap46.deleteMin();
        int int49 = fibonacciHeap46.size();
        fibonacciHeap1.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap1.findMin();
        int int52 = heapNode51.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNull(heapNode38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test5375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5375");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap23.insert((-1));
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap23.findMin();
        fibonacciHeap23.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(5);
        fibonacciHeap23.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap48.insert((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap48.new HeapNode(97);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(heapNode51);
    }

    @Test
    public void test5376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5376");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        int int11 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap4.insert((int) (short) 1);
        int int14 = fibonacciHeap4.size();
        int[] intArray15 = fibonacciHeap4.countersRep();
        boolean boolean16 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode18 = fibonacciHeap4.insert((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap4.new HeapNode(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(heapNode18);
    }

    @Test
    public void test5377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5377");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap10.insert(0);
        fibonacciHeap7.delete(heapNode13);
        fibonacciHeap3.delete(heapNode13);
        boolean boolean16 = fibonacciHeap3.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        fibonacciHeap3.meld(fibonacciHeap18);
        fibonacciHeap1.meld(fibonacciHeap3);
        int int22 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.potential();
        fibonacciHeap24.deleteMin();
        int[] intArray27 = fibonacciHeap24.countersRep();
        int int28 = fibonacciHeap24.potential();
        fibonacciHeap3.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap3.findMin();
        boolean boolean31 = fibonacciHeap3.empty();
        int int32 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap3.insert((int) ' ');
        fibonacciHeap3.deleteMin();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(heapNode34);
    }

    @Test
    public void test5378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5378");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        boolean boolean5 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode(2);
        int int8 = heapNode7.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test5379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5379");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap24.insert(0);
        int int37 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode((int) (byte) 100);
        int[] intArray55 = fibonacciHeap50.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap57.meld(fibonacciHeap60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap57.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int67 = fibonacciHeap66.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap66.meld(fibonacciHeap69);
        fibonacciHeap69.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap69.new HeapNode(0);
        fibonacciHeap57.meld(fibonacciHeap69);
        int[] intArray75 = fibonacciHeap69.countersRep();
        boolean boolean76 = fibonacciHeap69.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode78 = fibonacciHeap69.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode80 = fibonacciHeap69.insert(100);
        fibonacciHeap50.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap83 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap83.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap83.new HeapNode(10);
        heapNode87.key = 100;
        int int90 = heapNode87.getKey();
        fibonacciHeap50.delete(heapNode87);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode92 = fibonacciHeap50.findMin();
        fibonacciHeap24.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode95 = fibonacciHeap24.new HeapNode((int) (short) 0);
        boolean boolean96 = fibonacciHeap24.empty();
        boolean boolean97 = fibonacciHeap24.empty();
        java.lang.Class<?> wildcardClass98 = fibonacciHeap24.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[4]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(heapNode78);
        org.junit.Assert.assertNotNull(heapNode80);
        org.junit.Assert.assertNotNull(heapNode85);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertNotNull(heapNode92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test5380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5380");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap4.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap11.insert(0);
        fibonacciHeap8.delete(heapNode14);
        fibonacciHeap4.delete(heapNode14);
        heapNode14.key = ' ';
        int int19 = heapNode14.getKey();
        fibonacciHeap1.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap1.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap24.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(10);
        fibonacciHeap24.deleteMin();
        int int30 = fibonacciHeap24.size();
        boolean boolean31 = fibonacciHeap24.empty();
        fibonacciHeap1.meld(fibonacciHeap24);
        int int33 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap35.insert(1);
        boolean boolean38 = fibonacciHeap35.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap43.insert(0);
        fibonacciHeap40.delete(heapNode46);
        heapNode46.key = (short) 1;
        fibonacciHeap35.delete(heapNode46);
        int int51 = fibonacciHeap35.potential();
        fibonacciHeap24.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        fibonacciHeap57.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap57.new HeapNode(0);
        int[] intArray62 = fibonacciHeap57.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap57.findMin();
        fibonacciHeap24.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap57.findMin();
        int int66 = fibonacciHeap57.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNull(heapNode63);
        org.junit.Assert.assertNull(heapNode65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test5381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5381");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.findMin();
        int[] intArray7 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap10.findMin();
        int int12 = fibonacciHeap10.potential();
        int int13 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap10.insert((int) 'a');
        fibonacciHeap10.deleteMin();
        fibonacciHeap10.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1]");
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(heapNode15);
    }

    @Test
    public void test5382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5382");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap10.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int24 = fibonacciHeap23.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap23.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap23.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap35.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap35.new HeapNode(0);
        fibonacciHeap23.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int43 = fibonacciHeap42.size();
        fibonacciHeap23.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap23.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.new HeapNode(0);
        heapNode49.key = 100;
        fibonacciHeap10.delete(heapNode49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap54.new HeapNode((int) (short) 0);
        int int61 = fibonacciHeap54.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap66.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int71 = fibonacciHeap70.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int74 = fibonacciHeap73.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap73.insert(0);
        fibonacciHeap70.delete(heapNode76);
        fibonacciHeap66.delete(heapNode76);
        fibonacciHeap63.delete(heapNode76);
        fibonacciHeap54.delete(heapNode76);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap54.new HeapNode((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode84 = fibonacciHeap54.new HeapNode(0);
        int int85 = heapNode84.key;
        fibonacciHeap10.delete(heapNode84);
        boolean boolean87 = fibonacciHeap10.empty();
        int int88 = fibonacciHeap10.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(heapNode76);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test5383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5383");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        int[] intArray9 = fibonacciHeap1.countersRep();
        int int10 = fibonacciHeap1.size();
        int int11 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test5384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5384");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap56.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap56.new HeapNode(0);
        fibonacciHeap44.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        fibonacciHeap56.meld(fibonacciHeap63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap67.meld(fibonacciHeap73);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        fibonacciHeap79.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode83 = fibonacciHeap79.new HeapNode(0);
        fibonacciHeap67.meld(fibonacciHeap79);
        fibonacciHeap63.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap67.insert((int) (byte) 10);
        fibonacciHeap24.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap67.new HeapNode((int) 'a');
        int int91 = heapNode90.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 97 + "'", int91 == 97);
    }

    @Test
    public void test5385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5385");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        int int8 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int10 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test5386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5386");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(100);
        int int25 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap27.new HeapNode((int) (short) 0);
        int int34 = fibonacciHeap27.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.insert(0);
        fibonacciHeap43.delete(heapNode49);
        fibonacciHeap39.delete(heapNode49);
        fibonacciHeap36.delete(heapNode49);
        fibonacciHeap27.delete(heapNode49);
        int[] intArray54 = fibonacciHeap27.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap27.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap27.new HeapNode((int) (short) -1);
        fibonacciHeap13.delete(heapNode58);
        heapNode58.key = 97;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1]");
        org.junit.Assert.assertNotNull(heapNode56);
    }

    @Test
    public void test5387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5387");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int5 = fibonacciHeap1.potential();
        int[] intArray6 = fibonacciHeap1.countersRep();
        int int7 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.findMin();
        int int9 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test5388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5388");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int[] intArray9 = fibonacciHeap1.countersRep();
        int int10 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.new HeapNode(10);
        int int13 = fibonacciHeap1.potential();
        boolean boolean14 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test5389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5389");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert(3);
        int int17 = heapNode16.getKey();
        heapNode16.key = (byte) 1;
        int int20 = heapNode16.getKey();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test5390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5390");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.insert((int) (short) -1);
        boolean boolean8 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test5391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5391");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap24.new HeapNode(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap24.findMin();
        java.lang.Class<?> wildcardClass48 = fibonacciHeap24.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test5392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5392");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray2 = fibonacciHeap1.countersRep();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(97);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
    }

    @Test
    public void test5393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5393");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode((int) (byte) 10);
        int[] intArray25 = fibonacciHeap20.countersRep();
        int int26 = fibonacciHeap20.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test5394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5394");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap20.meld(fibonacciHeap26);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap32.new HeapNode(0);
        fibonacciHeap20.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        fibonacciHeap32.meld(fibonacciHeap39);
        fibonacciHeap1.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap1.new HeapNode(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap1.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap1.findMin();
        java.lang.Class<?> wildcardClass48 = heapNode47.getClass();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test5395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5395");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap9.meld(fibonacciHeap12);
        fibonacciHeap6.meld(fibonacciHeap12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap6.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        fibonacciHeap6.meld(fibonacciHeap18);
        int int27 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap6.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap6.findMin();
        fibonacciHeap1.meld(fibonacciHeap6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap1.insert((int) (short) 1);
        heapNode33.key = (short) 10;
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode33);
    }

    @Test
    public void test5396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5396");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap7.new HeapNode((int) (byte) 100);
        boolean boolean12 = fibonacciHeap7.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test5397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5397");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap4.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap4.findMin();
        heapNode12.key = (short) 1;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(heapNode12);
    }

    @Test
    public void test5398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5398");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert((int) ' ');
        int int28 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap4.new HeapNode((int) (byte) -1);
        boolean boolean31 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap4.insert(5);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(heapNode33);
    }

    @Test
    public void test5399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5399");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap11.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap23.new HeapNode(0);
        fibonacciHeap11.meld(fibonacciHeap23);
        int[] intArray29 = fibonacciHeap11.countersRep();
        fibonacciHeap7.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap7.new HeapNode((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap7.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap46.insert(0);
        fibonacciHeap43.delete(heapNode49);
        fibonacciHeap39.delete(heapNode49);
        heapNode49.key = ' ';
        int int54 = heapNode49.getKey();
        fibonacciHeap36.delete(heapNode49);
        heapNode49.key = '4';
        fibonacciHeap7.delete(heapNode49);
        int int59 = heapNode49.getKey();
        fibonacciHeap1.delete(heapNode49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap1.new HeapNode(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap1.insert((int) '4');
        int int65 = heapNode64.key;
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 32 + "'", int54 == 32);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
    }

    @Test
    public void test5400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5400");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap5.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap31.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap31.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        fibonacciHeap43.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap43.new HeapNode(0);
        fibonacciHeap31.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        fibonacciHeap43.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap43.insert((int) '4');
        heapNode54.key = 97;
        fibonacciHeap5.delete(heapNode54);
        int int58 = fibonacciHeap5.size();
        boolean boolean59 = fibonacciHeap5.empty();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test5401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5401");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        boolean boolean13 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap18);
        boolean boolean30 = fibonacciHeap18.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap32.insert((-1));
        fibonacciHeap32.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap54.insert(1);
        boolean boolean57 = fibonacciHeap54.empty();
        int int58 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap59 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap59.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap63.meld(fibonacciHeap66);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap63.meld(fibonacciHeap69);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap72 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int73 = fibonacciHeap72.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap75 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap72.meld(fibonacciHeap75);
        fibonacciHeap75.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap75.new HeapNode(0);
        fibonacciHeap63.meld(fibonacciHeap75);
        int[] intArray81 = fibonacciHeap63.countersRep();
        fibonacciHeap59.meld(fibonacciHeap63);
        fibonacciHeap54.meld(fibonacciHeap63);
        fibonacciHeap54.deleteMin();
        fibonacciHeap32.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode86 = fibonacciHeap54.findMin();
        int int87 = heapNode86.getKey();
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap18.delete(heapNode86);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test5402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5402");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        boolean boolean8 = fibonacciHeap1.empty();
        int[] intArray9 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.new HeapNode(35);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode11);
    }

    @Test
    public void test5403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5403");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.insert(5);
        boolean boolean8 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        int int15 = heapNode14.key;
        int int16 = heapNode14.key;
        heapNode14.key = (-1);
        int int19 = heapNode14.getKey();
        fibonacciHeap10.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap25.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap31.new HeapNode((int) (byte) 100);
        int[] intArray36 = fibonacciHeap31.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap38.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap38.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode(0);
        fibonacciHeap38.meld(fibonacciHeap50);
        int[] intArray56 = fibonacciHeap50.countersRep();
        boolean boolean57 = fibonacciHeap50.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap50.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap50.insert(100);
        fibonacciHeap31.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap64.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap64.new HeapNode(10);
        heapNode68.key = 100;
        int int71 = heapNode68.getKey();
        fibonacciHeap31.delete(heapNode68);
        fibonacciHeap10.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode75 = fibonacciHeap10.new HeapNode((int) (short) -1);
        int[] intArray76 = fibonacciHeap10.countersRep();
        int[] intArray77 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap10.insert((int) (short) 0);
        fibonacciHeap10.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap10);
        int int82 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 0]");
        org.junit.Assert.assertNotNull(heapNode79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
    }

    @Test
    public void test5404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5404");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        boolean boolean31 = fibonacciHeap22.empty();
        fibonacciHeap22.deleteMin();
        boolean boolean33 = fibonacciHeap22.empty();
        boolean boolean34 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap22.insert((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(heapNode36);
    }

    @Test
    public void test5405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5405");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        int int9 = fibonacciHeap7.potential();
        int int10 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap24.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.new HeapNode(32);
        fibonacciHeap7.delete(heapNode33);
        int int35 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap7.findMin();
        boolean boolean37 = fibonacciHeap7.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap39.meld(fibonacciHeap51);
        int[] intArray57 = fibonacciHeap39.countersRep();
        int int58 = fibonacciHeap39.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode66 = fibonacciHeap63.insert(0);
        fibonacciHeap60.delete(heapNode66);
        fibonacciHeap39.meld(fibonacciHeap60);
        boolean boolean69 = fibonacciHeap60.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap60.findMin();
        int[] intArray71 = fibonacciHeap60.countersRep();
        fibonacciHeap7.meld(fibonacciHeap60);
        int[] intArray73 = fibonacciHeap60.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(heapNode36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(heapNode66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(heapNode70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
    }

    @Test
    public void test5406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5406");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int39 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.findMin();
        int int41 = fibonacciHeap38.potential();
        fibonacciHeap13.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap13.insert(52);
        int int45 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap49.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int57 = fibonacciHeap56.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap56.insert(0);
        fibonacciHeap53.delete(heapNode59);
        fibonacciHeap49.delete(heapNode59);
        boolean boolean62 = fibonacciHeap49.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int65 = fibonacciHeap64.size();
        fibonacciHeap49.meld(fibonacciHeap64);
        fibonacciHeap47.meld(fibonacciHeap49);
        int int68 = fibonacciHeap47.size();
        boolean boolean69 = fibonacciHeap47.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap47.findMin();
        fibonacciHeap13.delete(heapNode70);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(heapNode59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(heapNode70);
    }

    @Test
    public void test5407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5407");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        int[] intArray43 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.findMin();
        int int45 = fibonacciHeap24.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap56 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap53.meld(fibonacciHeap56);
        fibonacciHeap50.meld(fibonacciHeap56);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap50.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap62 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int63 = fibonacciHeap62.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap62.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap62.meld(fibonacciHeap68);
        fibonacciHeap50.meld(fibonacciHeap62);
        int int71 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap50.insert(10);
        fibonacciHeap24.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int77 = fibonacciHeap76.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap79 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap76.meld(fibonacciHeap79);
        int[] intArray81 = fibonacciHeap76.countersRep();
        fibonacciHeap50.meld(fibonacciHeap76);
        int int83 = fibonacciHeap76.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap76.insert((int) (byte) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap76.new HeapNode(32);
        boolean boolean88 = fibonacciHeap76.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(heapNode73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(heapNode85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test5408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5408");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        fibonacciHeap1.deleteMin();
        int int7 = fibonacciHeap1.size();
        boolean boolean8 = fibonacciHeap1.empty();
        int int9 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
    }

    @Test
    public void test5409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5409");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        fibonacciHeap13.deleteMin();
        int int22 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.findMin();
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.new HeapNode((int) (byte) 10);
        int int27 = heapNode26.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test5410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5410");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap37.insert(0);
        int int41 = heapNode40.key;
        fibonacciHeap35.delete(heapNode40);
        heapNode40.key = (short) -1;
        fibonacciHeap1.delete(heapNode40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap1.insert(52);
        heapNode47.key = 97;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(heapNode47);
    }

    @Test
    public void test5411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5411");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode((int) '#');
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap1.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.findMin();
        boolean boolean22 = fibonacciHeap1.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test5412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5412");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (byte) 10);
        heapNode3.key = (short) 1;
        heapNode3.key = (byte) 100;
        org.junit.Assert.assertNotNull(heapNode3);
    }

    @Test
    public void test5413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5413");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        boolean boolean20 = fibonacciHeap13.empty();
        boolean boolean21 = fibonacciHeap13.empty();
        int int22 = fibonacciHeap13.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test5414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5414");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.insert(35);
        int int9 = fibonacciHeap1.size();
        int[] intArray10 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.insert((int) 'a');
        boolean boolean13 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test5415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5415");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        fibonacciHeap13.deleteMin();
        int[] intArray23 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.new HeapNode(1);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap28.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap32.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        fibonacciHeap44.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap44.new HeapNode(0);
        fibonacciHeap32.meld(fibonacciHeap44);
        int[] intArray50 = fibonacciHeap32.countersRep();
        fibonacciHeap28.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap28.new HeapNode((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap28.insert(10);
        fibonacciHeap13.meld(fibonacciHeap28);
        int int57 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap13.insert(35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(heapNode59);
    }

    @Test
    public void test5416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5416");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) (byte) 1);
        int int12 = heapNode11.key;
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test5417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5417");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap5.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        fibonacciHeap17.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode(0);
        fibonacciHeap5.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int25 = fibonacciHeap24.size();
        fibonacciHeap5.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap5.findMin();
        fibonacciHeap1.meld(fibonacciHeap5);
        int int29 = fibonacciHeap5.size();
        int int30 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap5.findMin();
        int int32 = fibonacciHeap5.potential();
        boolean boolean33 = fibonacciHeap5.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap5.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap5.findMin();
        int int37 = heapNode36.key;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test5418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5418");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 1);
        int int39 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap38.findMin();
        int int41 = fibonacciHeap38.potential();
        fibonacciHeap13.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap13.insert(52);
        int int45 = fibonacciHeap13.size();
        int[] intArray46 = fibonacciHeap13.countersRep();
        java.lang.Class<?> wildcardClass47 = intArray46.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[4, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test5419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5419");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap1.delete(heapNode7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap10.findMin();
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap10.deleteMin();
        boolean boolean14 = fibonacciHeap10.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test5420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5420");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        fibonacciHeap13.meld(fibonacciHeap24);
        int[] intArray33 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap35.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(0);
        fibonacciHeap35.meld(fibonacciHeap47);
        int int53 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap58.insert(0);
        fibonacciHeap55.delete(heapNode61);
        heapNode61.key = (short) 1;
        int int65 = heapNode61.key;
        fibonacciHeap35.delete(heapNode61);
        int int67 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap35.insert((int) (byte) 1);
        int int70 = heapNode69.getKey();
        fibonacciHeap13.delete(heapNode69);
        heapNode69.key = 8;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(heapNode69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test5421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5421");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        int[] intArray33 = fibonacciHeap1.countersRep();
        int int34 = fibonacciHeap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[5, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
    }

    @Test
    public void test5422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5422");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        int[] intArray7 = fibonacciHeap1.countersRep();
        int int8 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap11.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap20.meld(fibonacciHeap23);
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap23.new HeapNode(0);
        fibonacciHeap11.meld(fibonacciHeap23);
        int[] intArray29 = fibonacciHeap23.countersRep();
        boolean boolean30 = fibonacciHeap23.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap23.insert((int) (byte) 100);
        int[] intArray33 = fibonacciHeap23.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap23.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap23.findMin();
        int[] intArray36 = fibonacciHeap23.countersRep();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap39.meld(fibonacciHeap45);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap48.meld(fibonacciHeap51);
        fibonacciHeap51.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap39.meld(fibonacciHeap51);
        int[] intArray57 = fibonacciHeap51.countersRep();
        boolean boolean58 = fibonacciHeap51.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap51.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap51.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int65 = fibonacciHeap64.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap64.meld(fibonacciHeap67);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap64.meld(fibonacciHeap70);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap73 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int74 = fibonacciHeap73.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap76 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap73.meld(fibonacciHeap76);
        fibonacciHeap76.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode80 = fibonacciHeap76.new HeapNode(0);
        fibonacciHeap64.meld(fibonacciHeap76);
        int[] intArray82 = fibonacciHeap64.countersRep();
        int int83 = fibonacciHeap64.potential();
        fibonacciHeap51.meld(fibonacciHeap64);
        int int85 = fibonacciHeap64.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode86 = fibonacciHeap64.findMin();
        int int87 = heapNode86.getKey();
        fibonacciHeap23.delete(heapNode86);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap23.new HeapNode(2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1]");
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(heapNode60);
        org.junit.Assert.assertNotNull(heapNode62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(heapNode86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test5423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5423");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap1.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.findMin();
        int int13 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test5424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5424");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap1.insert((int) (byte) 1);
        int[] intArray14 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        fibonacciHeap28.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap28.new HeapNode(0);
        fibonacciHeap16.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int36 = fibonacciHeap35.size();
        fibonacciHeap16.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap16.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap39.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        fibonacciHeap48.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap48.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap48.new HeapNode(0);
        fibonacciHeap39.delete(heapNode60);
        int int62 = fibonacciHeap39.potential();
        fibonacciHeap1.meld(fibonacciHeap39);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test5425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5425");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap24.new HeapNode(7);
        int int47 = fibonacciHeap24.potential();
        int int48 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap50.meld(fibonacciHeap53);
        fibonacciHeap53.deleteMin();
        int int56 = fibonacciHeap53.potential();
        fibonacciHeap53.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap53.new HeapNode(0);
        fibonacciHeap24.delete(heapNode59);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test5426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5426");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        fibonacciHeap13.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap33.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap33.new HeapNode((int) (short) 100);
        int int38 = fibonacciHeap33.size();
        fibonacciHeap13.meld(fibonacciHeap33);
        int[] intArray40 = fibonacciHeap13.countersRep();
        int int41 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap13.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap13.new HeapNode(6);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap13.new HeapNode((int) '#');
        heapNode47.key = (short) 100;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
    }

    @Test
    public void test5427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5427");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.findMin();
        int int9 = heapNode8.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test5428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5428");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap3.insert(1);
        int int6 = heapNode5.key;
        int int7 = heapNode5.key;
        heapNode5.key = (-1);
        int int10 = heapNode5.getKey();
        fibonacciHeap1.delete(heapNode5);
        int int12 = fibonacciHeap1.size();
        boolean boolean13 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int16 = fibonacciHeap15.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap15.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap18.new HeapNode((int) (short) 10);
        fibonacciHeap1.meld(fibonacciHeap18);
        boolean boolean30 = fibonacciHeap18.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap18.new HeapNode((int) (short) -1);
        int int33 = fibonacciHeap18.potential();
        int int34 = fibonacciHeap18.size();
        int int35 = fibonacciHeap18.size();
        boolean boolean36 = fibonacciHeap18.empty();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test5429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5429");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap4.new HeapNode((-1));
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        int int46 = fibonacciHeap39.size();
        int int47 = fibonacciHeap39.size();
        fibonacciHeap4.meld(fibonacciHeap39);
        fibonacciHeap4.deleteMin();
        int int50 = fibonacciHeap4.potential();
        boolean boolean51 = fibonacciHeap4.empty();
        boolean boolean52 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap4.insert(1);
        int int55 = heapNode54.getKey();
        int int56 = heapNode54.getKey();
        heapNode54.key = (byte) 100;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test5430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5430");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap34.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap34.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap46.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap46.new HeapNode(0);
        fibonacciHeap34.meld(fibonacciHeap46);
        int[] intArray52 = fibonacciHeap34.countersRep();
        fibonacciHeap8.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap55.new HeapNode((int) (short) 0);
        int int62 = fibonacciHeap55.size();
        int[] intArray63 = fibonacciHeap55.countersRep();
        fibonacciHeap8.meld(fibonacciHeap55);
        // The following exception was thrown during execution in test generation
        try {
            fibonacciHeap55.deleteMin();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[2, 0]");
    }

    @Test
    public void test5431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5431");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap1.insert(3);
        boolean boolean17 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap1.insert((int) (short) 1);
        int[] intArray20 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.insert(1);
        boolean boolean26 = fibonacciHeap23.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int32 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap31.insert(0);
        fibonacciHeap28.delete(heapNode34);
        heapNode34.key = (short) 1;
        fibonacciHeap23.delete(heapNode34);
        int int39 = fibonacciHeap23.potential();
        boolean boolean40 = fibonacciHeap23.empty();
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap23.insert(4);
        fibonacciHeap23.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int47 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap46.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap46.meld(fibonacciHeap52);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap55.meld(fibonacciHeap58);
        fibonacciHeap58.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap58.new HeapNode(0);
        fibonacciHeap46.meld(fibonacciHeap58);
        int int64 = fibonacciHeap46.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int67 = fibonacciHeap66.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap69 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int70 = fibonacciHeap69.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap69.insert(0);
        fibonacciHeap66.delete(heapNode72);
        heapNode72.key = (short) 1;
        int int76 = heapNode72.key;
        fibonacciHeap46.delete(heapNode72);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap46.insert((int) (short) 1);
        boolean boolean80 = fibonacciHeap46.empty();
        fibonacciHeap23.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap23.findMin();
        fibonacciHeap1.meld(fibonacciHeap23);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap85 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap85.insert(1);
        int int88 = heapNode87.key;
        heapNode87.key = 10;
        int int91 = heapNode87.key;
        int int92 = heapNode87.getKey();
        fibonacciHeap23.delete(heapNode87);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(heapNode19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(heapNode34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(heapNode72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(heapNode79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(heapNode82);
        org.junit.Assert.assertNotNull(heapNode87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
    }

    @Test
    public void test5432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5432");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(0);
        int[] intArray2 = fibonacciHeap1.countersRep();
        boolean boolean3 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode((int) ' ');
        int[] intArray6 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.insert(32);
        int int10 = fibonacciHeap1.size();
        int int11 = fibonacciHeap1.size();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1]");
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test5433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5433");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap0.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap0.findMin();
        fibonacciHeap0.deleteMin();
        int int6 = fibonacciHeap0.size();
        org.junit.Assert.assertNull(heapNode3);
        org.junit.Assert.assertNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test5434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5434");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap24.findMin();
        int int26 = heapNode25.key;
        fibonacciHeap13.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.new HeapNode((int) (short) 0);
        fibonacciHeap13.meld(fibonacciHeap29);
        int[] intArray37 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.new HeapNode((int) (short) 1);
        int[] intArray42 = fibonacciHeap39.countersRep();
        fibonacciHeap13.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        int int50 = fibonacciHeap45.size();
        int[] intArray51 = fibonacciHeap45.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap53.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int58 = fibonacciHeap57.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int61 = fibonacciHeap60.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap60.insert(0);
        fibonacciHeap57.delete(heapNode63);
        fibonacciHeap53.delete(heapNode63);
        heapNode63.key = ' ';
        fibonacciHeap45.delete(heapNode63);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap45.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap45.new HeapNode(10);
        fibonacciHeap13.delete(heapNode72);
        int int74 = heapNode72.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(heapNode63);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test5435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5435");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        int[] intArray14 = fibonacciHeap1.countersRep();
        int[] intArray15 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 0);
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap20.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap24.delete(heapNode30);
        fibonacciHeap20.delete(heapNode30);
        heapNode30.key = ' ';
        int int35 = heapNode30.getKey();
        fibonacciHeap17.delete(heapNode30);
        int int37 = fibonacciHeap17.potential();
        boolean boolean38 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap17.insert((int) (short) 100);
        fibonacciHeap1.meld(fibonacciHeap17);
        int int42 = fibonacciHeap17.size();
        boolean boolean43 = fibonacciHeap17.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(heapNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test5436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5436");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap8.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap12.countersRep();
        fibonacciHeap8.meld(fibonacciHeap12);
        fibonacciHeap1.meld(fibonacciHeap8);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap34.insert(1);
        boolean boolean37 = fibonacciHeap34.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap34.new HeapNode((int) ' ');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap34.new HeapNode((int) '#');
        fibonacciHeap1.delete(heapNode41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap1.insert((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap1.new HeapNode(0);
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(heapNode44);
    }

    @Test
    public void test5437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5437");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        int[] intArray34 = fibonacciHeap24.countersRep();
        fibonacciHeap4.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.findMin();
        fibonacciHeap37.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap37);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap24.insert(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap24.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap24.insert((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int int50 = fibonacciHeap49.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int53 = fibonacciHeap52.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap52.meld(fibonacciHeap55);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        fibonacciHeap55.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap68 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int69 = fibonacciHeap68.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap68.insert(0);
        fibonacciHeap65.delete(heapNode71);
        fibonacciHeap55.meld(fibonacciHeap65);
        fibonacciHeap65.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode76 = fibonacciHeap65.insert(100);
        fibonacciHeap49.meld(fibonacciHeap65);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap49.new HeapNode(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap81 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap81.deleteMin();
        fibonacciHeap81.deleteMin();
        fibonacciHeap81.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode85 = fibonacciHeap81.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode87 = fibonacciHeap81.new HeapNode((int) (byte) 1);
        fibonacciHeap49.meld(fibonacciHeap81);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode90 = fibonacciHeap49.insert((int) (short) 1);
        fibonacciHeap24.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode93 = fibonacciHeap24.insert((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertNotNull(heapNode76);
        org.junit.Assert.assertNull(heapNode85);
        org.junit.Assert.assertNotNull(heapNode90);
        org.junit.Assert.assertNotNull(heapNode93);
    }

    @Test
    public void test5438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5438");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap10.new HeapNode((int) (byte) 100);
        int[] intArray15 = fibonacciHeap10.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap10.new HeapNode(35);
        int int18 = fibonacciHeap10.potential();
        int int19 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        int int23 = fibonacciHeap21.potential();
        int int24 = fibonacciHeap21.potential();
        fibonacciHeap10.meld(fibonacciHeap21);
        int int26 = fibonacciHeap10.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap10.insert((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(heapNode28);
    }

    @Test
    public void test5439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5439");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        int int5 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap10.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap19.meld(fibonacciHeap22);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap22.new HeapNode(0);
        fibonacciHeap10.meld(fibonacciHeap22);
        int[] intArray28 = fibonacciHeap10.countersRep();
        fibonacciHeap6.meld(fibonacciHeap10);
        fibonacciHeap1.meld(fibonacciHeap10);
        fibonacciHeap1.deleteMin();
        int int32 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap1.new HeapNode((int) (byte) -1);
        int int36 = fibonacciHeap1.size();
        int int37 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap1.insert(2);
        boolean boolean40 = fibonacciHeap1.empty();
        int[] intArray41 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2, 1, 0]");
    }

    @Test
    public void test5440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5440");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.delete(heapNode25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        fibonacciHeap31.deleteMin();
        boolean boolean34 = fibonacciHeap31.empty();
        fibonacciHeap31.deleteMin();
        int int36 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap38.findMin();
        fibonacciHeap31.meld(fibonacciHeap38);
        fibonacciHeap1.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap1.insert((-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(heapNode39);
        org.junit.Assert.assertNotNull(heapNode43);
    }

    @Test
    public void test5441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5441");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        int int9 = fibonacciHeap4.size();
        int int10 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        boolean boolean12 = fibonacciHeap4.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.insert(32);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(heapNode14);
    }

    @Test
    public void test5442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5442");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        fibonacciHeap1.deleteMin();
        int[] intArray4 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.new HeapNode((-1));
        int int7 = heapNode6.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test5443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5443");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(9);
        int int2 = fibonacciHeap1.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test5444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5444");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        int[] intArray21 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap1.insert((-1));
        int int24 = fibonacciHeap1.size();
        int int25 = fibonacciHeap1.size();
        boolean boolean26 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap28.new HeapNode((int) (short) 0);
        int int35 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap40.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap47.insert(0);
        fibonacciHeap44.delete(heapNode50);
        fibonacciHeap40.delete(heapNode50);
        fibonacciHeap37.delete(heapNode50);
        fibonacciHeap28.delete(heapNode50);
        int[] intArray55 = fibonacciHeap28.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap28.insert(5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode59 = fibonacciHeap28.new HeapNode((int) (short) -1);
        fibonacciHeap1.delete(heapNode59);
        int[] intArray61 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int64 = fibonacciHeap63.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap66 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int67 = fibonacciHeap66.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode69 = fibonacciHeap66.insert(0);
        fibonacciHeap63.delete(heapNode69);
        heapNode69.key = (short) 1;
        int int73 = heapNode69.getKey();
        heapNode69.key = 0;
        heapNode69.key = 2;
        fibonacciHeap1.delete(heapNode69);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1]");
        org.junit.Assert.assertNotNull(heapNode57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(heapNode69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test5445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5445");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        fibonacciHeap1.meld(fibonacciHeap7);
        int int10 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap1.insert((int) (byte) -1);
        int int13 = heapNode12.key;
        heapNode12.key = (-1);
        heapNode12.key = 0;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test5446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5446");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        int int4 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap5.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap5.new HeapNode((int) (short) 100);
        boolean boolean10 = fibonacciHeap5.empty();
        fibonacciHeap1.meld(fibonacciHeap5);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode13 = fibonacciHeap5.insert((int) (short) 1);
        int int14 = fibonacciHeap5.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap16.deleteMin();
        int int19 = fibonacciHeap16.potential();
        int int20 = fibonacciHeap16.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        int int23 = fibonacciHeap22.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap25.meld(fibonacciHeap28);
        int int30 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode31 = fibonacciHeap25.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap32.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap36.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        fibonacciHeap48.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode(0);
        fibonacciHeap36.meld(fibonacciHeap48);
        int[] intArray54 = fibonacciHeap36.countersRep();
        fibonacciHeap32.meld(fibonacciHeap36);
        fibonacciHeap25.meld(fibonacciHeap32);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap61 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap58.meld(fibonacciHeap61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap64 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap58.meld(fibonacciHeap64);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap67 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int68 = fibonacciHeap67.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap70 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap67.meld(fibonacciHeap70);
        fibonacciHeap70.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode74 = fibonacciHeap70.new HeapNode(0);
        fibonacciHeap58.meld(fibonacciHeap70);
        int[] intArray76 = fibonacciHeap70.countersRep();
        boolean boolean77 = fibonacciHeap70.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode79 = fibonacciHeap70.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap81 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode82 = fibonacciHeap81.findMin();
        int int83 = heapNode82.key;
        fibonacciHeap70.delete(heapNode82);
        fibonacciHeap25.delete(heapNode82);
        fibonacciHeap22.delete(heapNode82);
        fibonacciHeap16.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode89 = fibonacciHeap16.insert((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode91 = fibonacciHeap16.insert(4);
        fibonacciHeap5.delete(heapNode91);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(heapNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(heapNode31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(heapNode79);
        org.junit.Assert.assertNotNull(heapNode82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(heapNode89);
        org.junit.Assert.assertNotNull(heapNode91);
    }

    @Test
    public void test5447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5447");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap2 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int3 = fibonacciHeap2.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap2.meld(fibonacciHeap5);
        int int7 = fibonacciHeap2.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap2.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        int[] intArray31 = fibonacciHeap13.countersRep();
        fibonacciHeap9.meld(fibonacciHeap13);
        fibonacciHeap2.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap35.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(0);
        fibonacciHeap35.meld(fibonacciHeap47);
        int[] intArray53 = fibonacciHeap35.countersRep();
        fibonacciHeap9.meld(fibonacciHeap35);
        fibonacciHeap0.meld(fibonacciHeap9);
        int int56 = fibonacciHeap9.potential();
        boolean boolean57 = fibonacciHeap9.empty();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test5448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5448");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap4.insert(0);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap10.insert(1);
        int int13 = heapNode12.key;
        int int14 = heapNode12.key;
        fibonacciHeap4.delete(heapNode12);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        int int22 = fibonacciHeap17.size();
        fibonacciHeap4.meld(fibonacciHeap17);
        int[] intArray24 = fibonacciHeap4.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap4.insert((-1));
        fibonacciHeap1.delete(heapNode26);
        boolean boolean28 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(heapNode7);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test5449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5449");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert((-1));
        heapNode4.key = 5;
        int int7 = heapNode4.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test5450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5450");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.findMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap1.new HeapNode(32);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(heapNode7);
    }

    @Test
    public void test5451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5451");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap17.insert(0);
        fibonacciHeap14.delete(heapNode20);
        fibonacciHeap4.meld(fibonacciHeap14);
        fibonacciHeap14.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap14.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap14.new HeapNode((int) (short) 1);
        fibonacciHeap14.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap33.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap40.insert(0);
        fibonacciHeap37.delete(heapNode43);
        fibonacciHeap33.delete(heapNode43);
        fibonacciHeap30.delete(heapNode43);
        int[] intArray47 = fibonacciHeap30.countersRep();
        int int48 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap30.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap30.insert((int) '#');
        fibonacciHeap14.meld(fibonacciHeap30);
        boolean boolean53 = fibonacciHeap14.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(heapNode49);
        org.junit.Assert.assertNotNull(heapNode51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test5452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5452");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        int int23 = fibonacciHeap20.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.insert(32);
        heapNode25.key = (short) 100;
        heapNode25.key = 2;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
    }

    @Test
    public void test5453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5453");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        heapNode11.key = (short) 1;
        int int15 = heapNode11.getKey();
        int int16 = heapNode11.key;
        int int17 = heapNode11.key;
        heapNode11.key = (byte) -1;
        heapNode11.key = (byte) 100;
        fibonacciHeap1.delete(heapNode11);
        int int23 = heapNode11.key;
        int int24 = heapNode11.getKey();
        org.junit.Assert.assertNotNull(heapNode2);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test5454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5454");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) -1);
        int[] intArray21 = fibonacciHeap20.countersRep();
        fibonacciHeap20.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap20.new HeapNode((int) 'a');
        int int26 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap20.insert((int) (byte) -1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(heapNode28);
    }

    @Test
    public void test5455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5455");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode(10);
    }

    @Test
    public void test5456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5456");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        heapNode11.key = ' ';
        int int16 = heapNode11.getKey();
        int int17 = heapNode11.getKey();
        int int18 = heapNode11.key;
        heapNode11.key = (short) -1;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
    }

    @Test
    public void test5457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5457");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode(100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5458");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        int[] intArray26 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.findMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        boolean boolean29 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap31.deleteMin();
        fibonacciHeap31.deleteMin();
        fibonacciHeap20.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        fibonacciHeap42.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode((int) (byte) 100);
        int[] intArray53 = fibonacciHeap48.countersRep();
        fibonacciHeap20.meld(fibonacciHeap48);
        boolean boolean55 = fibonacciHeap48.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap48.insert((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNull(heapNode27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[4]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(heapNode57);
    }

    @Test
    public void test5459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5459");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap7.insert((-1));
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap1.new HeapNode(2);
        heapNode29.key = (short) -1;
        heapNode29.key = 0;
        int int34 = heapNode29.getKey();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test5460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5460");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.insert((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap12.meld(fibonacciHeap18);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        fibonacciHeap24.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap24.new HeapNode(0);
        fibonacciHeap12.meld(fibonacciHeap24);
        int[] intArray30 = fibonacciHeap24.countersRep();
        boolean boolean31 = fibonacciHeap24.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap24.insert((int) (byte) 100);
        int[] intArray34 = fibonacciHeap24.countersRep();
        fibonacciHeap4.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int44 = fibonacciHeap43.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap43.meld(fibonacciHeap46);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int51 = fibonacciHeap50.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int54 = fibonacciHeap53.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap53.insert(0);
        fibonacciHeap50.delete(heapNode56);
        fibonacciHeap40.meld(fibonacciHeap50);
        fibonacciHeap50.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap50.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap63.insert(1);
        int int66 = heapNode65.key;
        int int67 = heapNode65.key;
        fibonacciHeap50.delete(heapNode65);
        fibonacciHeap24.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode71 = fibonacciHeap24.insert(6);
        boolean boolean72 = fibonacciHeap24.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(heapNode71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test5461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5461");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap51.insert(0);
        fibonacciHeap48.delete(heapNode54);
        fibonacciHeap44.delete(heapNode54);
        boolean boolean57 = fibonacciHeap44.empty();
        fibonacciHeap20.meld(fibonacciHeap44);
        boolean boolean59 = fibonacciHeap20.empty();
        boolean boolean60 = fibonacciHeap20.empty();
        int int61 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap63.findMin();
        fibonacciHeap20.delete(heapNode64);
        boolean boolean66 = fibonacciHeap20.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test5462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5462");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.insert(97);
        int int7 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        boolean boolean9 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap14.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap21.insert(0);
        fibonacciHeap18.delete(heapNode24);
        fibonacciHeap14.delete(heapNode24);
        fibonacciHeap11.delete(heapNode24);
        int[] intArray28 = fibonacciHeap11.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap30.new HeapNode((int) (short) 1);
        fibonacciHeap11.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap35.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(0);
        fibonacciHeap35.meld(fibonacciHeap47);
        int int53 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap55 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int56 = fibonacciHeap55.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap58 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int59 = fibonacciHeap58.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap58.insert(0);
        fibonacciHeap55.delete(heapNode61);
        heapNode61.key = (short) 1;
        int int65 = heapNode61.key;
        fibonacciHeap35.delete(heapNode61);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap35.insert((int) (short) 1);
        int int69 = heapNode68.getKey();
        fibonacciHeap30.delete(heapNode68);
        int int71 = heapNode68.key;
        fibonacciHeap1.delete(heapNode68);
        boolean boolean73 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test5463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5463");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap6.insert(1);
        boolean boolean9 = fibonacciHeap6.empty();
        fibonacciHeap6.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap12.insert(1);
        int int15 = heapNode14.getKey();
        int int16 = heapNode14.key;
        heapNode14.key = (byte) -1;
        int int19 = heapNode14.key;
        fibonacciHeap6.delete(heapNode14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap22.meld(fibonacciHeap28);
        int int30 = fibonacciHeap28.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap28.new HeapNode((int) '#');
        int int33 = fibonacciHeap28.potential();
        fibonacciHeap6.meld(fibonacciHeap28);
        int int35 = fibonacciHeap28.potential();
        fibonacciHeap1.meld(fibonacciHeap28);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int39 = fibonacciHeap38.size();
        int[] intArray40 = fibonacciHeap38.countersRep();
        int int41 = fibonacciHeap38.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap38.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap38.insert(100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap47.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(10);
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap57 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap54.meld(fibonacciHeap57);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap54.new HeapNode((int) (short) 0);
        heapNode60.key = (byte) 100;
        heapNode60.key = (-1);
        fibonacciHeap47.delete(heapNode60);
        fibonacciHeap47.deleteMin();
        fibonacciHeap38.meld(fibonacciHeap47);
        int[] intArray68 = fibonacciHeap47.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap47.insert(32);
        fibonacciHeap1.meld(fibonacciHeap47);
        int int72 = fibonacciHeap47.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode73 = fibonacciHeap47.findMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(heapNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(heapNode43);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(heapNode70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(heapNode73);
    }

    @Test
    public void test5464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5464");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap22.new HeapNode(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap22.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap22.findMin();
        fibonacciHeap22.deleteMin();
        fibonacciHeap22.deleteMin();
        int[] intArray37 = fibonacciHeap22.countersRep();
        java.lang.Class<?> wildcardClass38 = fibonacciHeap22.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertNull(heapNode33);
        org.junit.Assert.assertNull(heapNode34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test5465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5465");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int30 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap29.meld(fibonacciHeap32);
        int int34 = fibonacciHeap29.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap29.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode38 = fibonacciHeap36.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int41 = fibonacciHeap40.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap40.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap46 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap40.meld(fibonacciHeap46);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int50 = fibonacciHeap49.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap49.meld(fibonacciHeap52);
        fibonacciHeap52.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap52.new HeapNode(0);
        fibonacciHeap40.meld(fibonacciHeap52);
        int[] intArray58 = fibonacciHeap40.countersRep();
        fibonacciHeap36.meld(fibonacciHeap40);
        fibonacciHeap29.meld(fibonacciHeap36);
        fibonacciHeap29.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap65 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int66 = fibonacciHeap65.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode68 = fibonacciHeap65.insert(0);
        int int69 = heapNode68.key;
        fibonacciHeap63.delete(heapNode68);
        heapNode68.key = (short) -1;
        fibonacciHeap29.delete(heapNode68);
        int[] intArray74 = fibonacciHeap29.countersRep();
        fibonacciHeap4.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode77 = fibonacciHeap29.new HeapNode((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(heapNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 0]");
    }

    @Test
    public void test5466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5466");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int int19 = fibonacciHeap13.potential();
        int int20 = fibonacciHeap13.size();
        boolean boolean21 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.insert(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.insert((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertNotNull(heapNode25);
    }

    @Test
    public void test5467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5467");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap7.insert(1);
        int int10 = heapNode9.key;
        int int11 = heapNode9.key;
        fibonacciHeap1.delete(heapNode9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int15 = fibonacciHeap14.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap14.meld(fibonacciHeap17);
        int int19 = fibonacciHeap14.size();
        fibonacciHeap1.meld(fibonacciHeap14);
        fibonacciHeap1.deleteMin();
        int[] intArray22 = fibonacciHeap1.countersRep();
        int int23 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap26.deleteMin();
        fibonacciHeap26.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int31 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap30.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap30.meld(fibonacciHeap36);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap39.meld(fibonacciHeap42);
        fibonacciHeap42.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap42.new HeapNode(0);
        fibonacciHeap30.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap49 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int50 = fibonacciHeap49.size();
        fibonacciHeap30.meld(fibonacciHeap49);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap30.findMin();
        fibonacciHeap26.meld(fibonacciHeap30);
        int int54 = fibonacciHeap30.size();
        int int55 = fibonacciHeap30.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode56 = fibonacciHeap30.findMin();
        boolean boolean57 = fibonacciHeap30.empty();
        int int58 = fibonacciHeap30.size();
        fibonacciHeap1.meld(fibonacciHeap30);
        boolean boolean60 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap1.new HeapNode(52);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertNotNull(heapNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(heapNode52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(heapNode56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test5468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5468");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap24.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap24.new HeapNode(7);
        int int47 = heapNode46.getKey();
        int int48 = heapNode46.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 7 + "'", int47 == 7);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
    }

    @Test
    public void test5469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5469");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap1.countersRep();
        int int20 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int26 = fibonacciHeap25.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode28 = fibonacciHeap25.insert(0);
        fibonacciHeap22.delete(heapNode28);
        fibonacciHeap1.meld(fibonacciHeap22);
        boolean boolean31 = fibonacciHeap22.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap22.findMin();
        int[] intArray33 = fibonacciHeap22.countersRep();
        int int34 = fibonacciHeap22.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int37 = fibonacciHeap36.size();
        int int38 = fibonacciHeap36.potential();
        int int39 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int42 = fibonacciHeap41.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap41.meld(fibonacciHeap44);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int48 = fibonacciHeap47.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap50 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap47.meld(fibonacciHeap50);
        fibonacciHeap44.meld(fibonacciHeap50);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap50.new HeapNode((int) (byte) 100);
        int[] intArray55 = fibonacciHeap50.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap50.new HeapNode(35);
        fibonacciHeap36.delete(heapNode57);
        fibonacciHeap22.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        int[] intArray61 = fibonacciHeap36.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(heapNode28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(heapNode32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[4]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
    }

    @Test
    public void test5470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5470");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        int int20 = fibonacciHeap13.size();
        int int21 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap13.new HeapNode((int) '4');
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.insert(32);
        int[] intArray27 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1]");
    }

    @Test
    public void test5471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5471");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (short) 100);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.size();
        int[] intArray5 = fibonacciHeap1.countersRep();
        int[] intArray6 = fibonacciHeap1.countersRep();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
    }

    @Test
    public void test5472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5472");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int25 = fibonacciHeap24.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int34 = fibonacciHeap33.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap33.meld(fibonacciHeap36);
        fibonacciHeap36.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode40 = fibonacciHeap36.new HeapNode(0);
        fibonacciHeap24.meld(fibonacciHeap36);
        fibonacciHeap20.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode46 = fibonacciHeap44.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int49 = fibonacciHeap48.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode54 = fibonacciHeap51.insert(0);
        fibonacciHeap48.delete(heapNode54);
        fibonacciHeap44.delete(heapNode54);
        boolean boolean57 = fibonacciHeap44.empty();
        fibonacciHeap20.meld(fibonacciHeap44);
        boolean boolean59 = fibonacciHeap20.empty();
        boolean boolean60 = fibonacciHeap20.empty();
        int int61 = fibonacciHeap20.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap63 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) '#');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap63.findMin();
        fibonacciHeap20.delete(heapNode64);
        int int66 = heapNode64.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(heapNode46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test5473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5473");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.new HeapNode((int) (short) 0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((int) (short) 100);
        int int10 = heapNode9.getKey();
        heapNode9.key = 'a';
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test5474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5474");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap3 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int4 = fibonacciHeap3.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap3.meld(fibonacciHeap6);
        fibonacciHeap6.deleteMin();
        int[] intArray9 = fibonacciHeap6.countersRep();
        int int10 = fibonacciHeap6.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap6.new HeapNode(0);
        int int13 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode15 = fibonacciHeap6.insert((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap6.findMin();
        int int17 = heapNode16.key;
        int int18 = heapNode16.key;
        fibonacciHeap1.delete(heapNode16);
        int int20 = heapNode16.key;
        int int21 = heapNode16.getKey();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(heapNode15);
        org.junit.Assert.assertNotNull(heapNode16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test5475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5475");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap2 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int3 = fibonacciHeap2.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap2.meld(fibonacciHeap5);
        int int7 = fibonacciHeap2.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap2.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap9.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap13.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap25 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap22.meld(fibonacciHeap25);
        fibonacciHeap25.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap25.new HeapNode(0);
        fibonacciHeap13.meld(fibonacciHeap25);
        int[] intArray31 = fibonacciHeap13.countersRep();
        fibonacciHeap9.meld(fibonacciHeap13);
        fibonacciHeap2.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int36 = fibonacciHeap35.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap38 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap35.meld(fibonacciHeap38);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap41 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap35.meld(fibonacciHeap41);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap44 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int45 = fibonacciHeap44.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap47 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap44.meld(fibonacciHeap47);
        fibonacciHeap47.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode51 = fibonacciHeap47.new HeapNode(0);
        fibonacciHeap35.meld(fibonacciHeap47);
        int[] intArray53 = fibonacciHeap35.countersRep();
        fibonacciHeap9.meld(fibonacciHeap35);
        fibonacciHeap0.meld(fibonacciHeap9);
        fibonacciHeap9.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap9.insert(7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap60 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode61 = fibonacciHeap60.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode63 = fibonacciHeap60.new HeapNode((int) (byte) 1);
        fibonacciHeap9.delete(heapNode63);
        boolean boolean65 = fibonacciHeap9.empty();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(heapNode8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode58);
        org.junit.Assert.assertNotNull(heapNode61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test5476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5476");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.new HeapNode(100);
        int int23 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap13.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap13.insert(5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertNotNull(heapNode27);
    }

    @Test
    public void test5477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5477");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int int7 = fibonacciHeap4.potential();
        int[] intArray8 = fibonacciHeap4.countersRep();
        int int9 = fibonacciHeap4.size();
        fibonacciHeap4.deleteMin();
        int int11 = fibonacciHeap4.potential();
        boolean boolean12 = fibonacciHeap4.empty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test5478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5478");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode(0);
        int[] intArray4 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode7 = fibonacciHeap1.insert((int) '#');
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1]");
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertNotNull(heapNode7);
    }

    @Test
    public void test5479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5479");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.new HeapNode(10);
        int int6 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode8 = fibonacciHeap1.new HeapNode((int) (byte) 0);
        int[] intArray9 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int12 = fibonacciHeap11.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap11.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap14.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode((int) (byte) 100);
        int[] intArray25 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap39.countersRep();
        boolean boolean46 = fibonacciHeap39.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap39.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap39.insert(100);
        fibonacciHeap20.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap53 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap53.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode57 = fibonacciHeap53.new HeapNode(10);
        heapNode57.key = 100;
        int int60 = heapNode57.getKey();
        fibonacciHeap20.delete(heapNode57);
        int[] intArray62 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode64 = fibonacciHeap20.insert(2);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode65 = fibonacciHeap20.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode67 = fibonacciHeap20.insert(6);
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode70 = fibonacciHeap20.new HeapNode((int) '4');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode72 = fibonacciHeap20.insert(4);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(heapNode48);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertNotNull(heapNode55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 0]");
        org.junit.Assert.assertNotNull(heapNode64);
        org.junit.Assert.assertNotNull(heapNode65);
        org.junit.Assert.assertNotNull(heapNode67);
        org.junit.Assert.assertNotNull(heapNode72);
    }

    @Test
    public void test5480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5480");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        boolean boolean20 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        boolean boolean23 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.findMin();
        int[] intArray25 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap13.findMin();
        int[] intArray27 = fibonacciHeap13.countersRep();
        int[] intArray28 = fibonacciHeap13.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1]");
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1]");
    }

    @Test
    public void test5481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5481");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        fibonacciHeap19.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap19.new HeapNode(0);
        fibonacciHeap7.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode26 = fibonacciHeap7.insert((-1));
        fibonacciHeap1.meld(fibonacciHeap7);
        int int28 = fibonacciHeap1.potential();
        boolean boolean29 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(heapNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test5482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5482");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int[] intArray7 = fibonacciHeap4.countersRep();
        int int8 = fibonacciHeap4.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(1);
        boolean boolean11 = fibonacciHeap4.empty();
        int int12 = fibonacciHeap4.potential();
        int int13 = fibonacciHeap4.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test5483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5483");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap13.insert(100);
        java.lang.Class<?> wildcardClass22 = fibonacciHeap13.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test5484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5484");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        boolean boolean4 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int10 = fibonacciHeap9.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap9.insert(0);
        fibonacciHeap6.delete(heapNode12);
        heapNode12.key = (short) 1;
        fibonacciHeap1.delete(heapNode12);
        int int17 = fibonacciHeap1.potential();
        boolean boolean18 = fibonacciHeap1.empty();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int22 = fibonacciHeap21.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap21.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap24.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode36 = fibonacciHeap24.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap37.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap37.new HeapNode((int) (short) 100);
        fibonacciHeap24.delete(heapNode41);
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap24.new HeapNode(97);
        fibonacciHeap24.deleteMin();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test5485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5485");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        int[] intArray19 = fibonacciHeap13.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap13.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode22 = fibonacciHeap13.insert((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap13.insert(7);
        int int25 = fibonacciHeap13.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNull(heapNode20);
        org.junit.Assert.assertNotNull(heapNode22);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test5486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5486");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        fibonacciHeap1.deleteMin();
        int int4 = fibonacciHeap1.potential();
        boolean boolean5 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        int int16 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap18 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int19 = fibonacciHeap18.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap18.meld(fibonacciHeap21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap18.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        fibonacciHeap30.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap30.new HeapNode(0);
        fibonacciHeap18.meld(fibonacciHeap30);
        int[] intArray36 = fibonacciHeap30.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap30.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode39 = fibonacciHeap30.new HeapNode(32);
        fibonacciHeap13.delete(heapNode39);
        int int41 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode42 = fibonacciHeap13.findMin();
        boolean boolean43 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap13.insert(7);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap48.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode52 = fibonacciHeap48.new HeapNode(10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int55 = fibonacciHeap54.size();
        fibonacciHeap48.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap48.new HeapNode((int) '4');
        int int59 = fibonacciHeap48.potential();
        fibonacciHeap13.meld(fibonacciHeap48);
        fibonacciHeap13.deleteMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(heapNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
    }

    @Test
    public void test5487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5487");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode16 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode19 = fibonacciHeap17.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap17.new HeapNode((int) (short) 100);
        fibonacciHeap4.delete(heapNode21);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap23 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap23.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap30 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap27.meld(fibonacciHeap30);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap33 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap27.meld(fibonacciHeap33);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode43 = fibonacciHeap39.new HeapNode(0);
        fibonacciHeap27.meld(fibonacciHeap39);
        int[] intArray45 = fibonacciHeap27.countersRep();
        fibonacciHeap23.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode48 = fibonacciHeap23.new HeapNode((int) 'a');
        int int49 = heapNode48.key;
        int int50 = heapNode48.getKey();
        fibonacciHeap4.delete(heapNode48);
        java.lang.Class<?> wildcardClass52 = heapNode48.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test5488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5488");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int2 = fibonacciHeap1.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(32);
        int[] intArray6 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int28 = fibonacciHeap27.size();
        fibonacciHeap8.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap8.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int35 = fibonacciHeap34.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode37 = fibonacciHeap34.insert(0);
        fibonacciHeap34.deleteMin();
        fibonacciHeap31.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap31.new HeapNode((int) (short) 10);
        int int42 = fibonacciHeap31.size();
        int int43 = fibonacciHeap31.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap45.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap45.new HeapNode(10);
        int int50 = fibonacciHeap45.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap52 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray53 = fibonacciHeap52.countersRep();
        fibonacciHeap45.meld(fibonacciHeap52);
        int int55 = fibonacciHeap52.potential();
        fibonacciHeap31.meld(fibonacciHeap52);
        int int57 = fibonacciHeap52.size();
        fibonacciHeap1.meld(fibonacciHeap52);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(heapNode37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test5489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5489");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        fibonacciHeap4.deleteMin();
        int int7 = fibonacciHeap4.potential();
        fibonacciHeap4.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode10 = fibonacciHeap4.new HeapNode(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode12 = fibonacciHeap4.insert((int) (short) -1);
        int int13 = heapNode12.key;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(heapNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test5490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5490");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap0 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode2 = fibonacciHeap0.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int5 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap4.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int14 = fibonacciHeap13.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap13.meld(fibonacciHeap16);
        fibonacciHeap16.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode20 = fibonacciHeap16.new HeapNode(0);
        fibonacciHeap4.meld(fibonacciHeap16);
        int[] intArray22 = fibonacciHeap4.countersRep();
        fibonacciHeap0.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap0.insert(2);
        int int26 = fibonacciHeap0.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap0.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode29 = fibonacciHeap0.insert((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 0, 0]");
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertNotNull(heapNode29);
    }

    @Test
    public void test5491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5491");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap5.meld(fibonacciHeap8);
        int int10 = fibonacciHeap5.size();
        fibonacciHeap1.meld(fibonacciHeap5);
        int[] intArray12 = fibonacciHeap1.countersRep();
        int int13 = fibonacciHeap1.potential();
        int[] intArray14 = fibonacciHeap1.countersRep();
        int[] intArray15 = fibonacciHeap1.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode21 = fibonacciHeap19.insert(1);
        int int22 = heapNode21.key;
        int int23 = heapNode21.key;
        heapNode21.key = (-1);
        int int26 = heapNode21.getKey();
        fibonacciHeap17.delete(heapNode21);
        int int28 = fibonacciHeap17.size();
        boolean boolean29 = fibonacciHeap17.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap17.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode32 = fibonacciHeap17.insert(97);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap17.findMin();
        fibonacciHeap1.meld(fibonacciHeap17);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap36 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int37 = fibonacciHeap36.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap36.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap36.meld(fibonacciHeap42);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap45 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int46 = fibonacciHeap45.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap48 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap45.meld(fibonacciHeap48);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int52 = fibonacciHeap51.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap54 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap51.meld(fibonacciHeap54);
        fibonacciHeap48.meld(fibonacciHeap54);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode58 = fibonacciHeap48.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode60 = fibonacciHeap48.new HeapNode(0);
        fibonacciHeap36.delete(heapNode60);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode62 = fibonacciHeap36.findMin();
        fibonacciHeap17.delete(heapNode62);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[2, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2, 0]");
        org.junit.Assert.assertNotNull(heapNode21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode32);
        org.junit.Assert.assertNotNull(heapNode33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(heapNode62);
    }

    @Test
    public void test5492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5492");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode((int) (short) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode5 = fibonacciHeap1.insert(1);
        int int6 = fibonacciHeap1.potential();
        org.junit.Assert.assertNotNull(heapNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test5493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5493");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        int int6 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap11 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap8.meld(fibonacciHeap11);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap14 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap8.meld(fibonacciHeap14);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap17 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int18 = fibonacciHeap17.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap17.meld(fibonacciHeap20);
        fibonacciHeap20.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.new HeapNode(0);
        fibonacciHeap8.meld(fibonacciHeap20);
        int[] intArray26 = fibonacciHeap20.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap20.findMin();
        fibonacciHeap1.meld(fibonacciHeap20);
        boolean boolean29 = fibonacciHeap20.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode33 = fibonacciHeap31.new HeapNode(0);
        fibonacciHeap31.deleteMin();
        fibonacciHeap31.deleteMin();
        fibonacciHeap20.meld(fibonacciHeap31);
        int[] intArray37 = fibonacciHeap31.countersRep();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNull(heapNode27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
    }

    @Test
    public void test5494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5494");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap5 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int6 = fibonacciHeap5.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap8 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int9 = fibonacciHeap8.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode11 = fibonacciHeap8.insert(0);
        fibonacciHeap5.delete(heapNode11);
        fibonacciHeap1.delete(heapNode11);
        boolean boolean14 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        fibonacciHeap1.meld(fibonacciHeap16);
        int int19 = fibonacciHeap1.size();
        boolean boolean20 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap22.insert(0);
        fibonacciHeap22.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int29 = fibonacciHeap28.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap31 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap28.meld(fibonacciHeap31);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap34 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap28.meld(fibonacciHeap34);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap37 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int38 = fibonacciHeap37.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap40 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap37.meld(fibonacciHeap40);
        fibonacciHeap40.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode44 = fibonacciHeap40.new HeapNode(0);
        fibonacciHeap28.meld(fibonacciHeap40);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap28.insert((-1));
        fibonacciHeap22.meld(fibonacciHeap28);
        fibonacciHeap1.meld(fibonacciHeap22);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap51 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode53 = fibonacciHeap51.new HeapNode(0);
        fibonacciHeap51.deleteMin();
        fibonacciHeap1.meld(fibonacciHeap51);
        boolean boolean56 = fibonacciHeap1.empty();
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(heapNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(heapNode47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test5495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5495");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int21 = fibonacciHeap20.size();
        fibonacciHeap13.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode24 = fibonacciHeap20.insert(0);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap26 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int27 = fibonacciHeap26.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap29 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap26.meld(fibonacciHeap29);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap32 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int33 = fibonacciHeap32.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap35 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap32.meld(fibonacciHeap35);
        fibonacciHeap29.meld(fibonacciHeap35);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap42 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int43 = fibonacciHeap42.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap42.insert(0);
        fibonacciHeap39.delete(heapNode45);
        fibonacciHeap29.meld(fibonacciHeap39);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode49 = fibonacciHeap29.new HeapNode(52);
        fibonacciHeap20.meld(fibonacciHeap29);
        int int51 = fibonacciHeap29.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(heapNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(heapNode45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
    }

    @Test
    public void test5496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5496");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.insert(0);
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap7.meld(fibonacciHeap13);
        int int15 = fibonacciHeap13.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode((int) '#');
        fibonacciHeap1.meld(fibonacciHeap13);
        boolean boolean19 = fibonacciHeap13.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap21 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode23 = fibonacciHeap21.insert(1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap21.new HeapNode(10);
        int int26 = fibonacciHeap21.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap28 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) -1);
        int[] intArray29 = fibonacciHeap28.countersRep();
        fibonacciHeap21.meld(fibonacciHeap28);
        int int31 = fibonacciHeap28.potential();
        int[] intArray32 = fibonacciHeap28.countersRep();
        fibonacciHeap13.meld(fibonacciHeap28);
        int int34 = fibonacciHeap28.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(heapNode23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[3]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test5497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5497");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.insert((int) (byte) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode4 = fibonacciHeap1.findMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap6 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int7 = fibonacciHeap6.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap9 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap6.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap12 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int13 = fibonacciHeap12.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap15 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap12.meld(fibonacciHeap15);
        fibonacciHeap9.meld(fibonacciHeap15);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int20 = fibonacciHeap19.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int23 = fibonacciHeap22.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode25 = fibonacciHeap22.insert(0);
        fibonacciHeap19.delete(heapNode25);
        fibonacciHeap9.meld(fibonacciHeap19);
        int[] intArray28 = fibonacciHeap9.countersRep();
        fibonacciHeap1.meld(fibonacciHeap9);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap1.findMin();
        int int31 = heapNode30.getKey();
        heapNode30.key = 6;
        org.junit.Assert.assertNotNull(heapNode3);
        org.junit.Assert.assertNotNull(heapNode4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(heapNode25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[4, 0]");
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test5498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5498");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int8 = fibonacciHeap7.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap7.meld(fibonacciHeap10);
        fibonacciHeap4.meld(fibonacciHeap10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode14 = fibonacciHeap4.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap16 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int17 = fibonacciHeap16.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap19 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap16.meld(fibonacciHeap19);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap22 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap16.meld(fibonacciHeap22);
        fibonacciHeap4.meld(fibonacciHeap16);
        int int25 = fibonacciHeap4.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode27 = fibonacciHeap4.insert(10);
        fibonacciHeap4.deleteMin();
        int int29 = fibonacciHeap4.potential();
        int int30 = fibonacciHeap4.potential();
        int int31 = fibonacciHeap4.potential();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(heapNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
    }

    @Test
    public void test5499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5499");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) (byte) 100);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode3 = fibonacciHeap1.new HeapNode(0);
        fibonacciHeap1.deleteMin();
        fibonacciHeap1.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode6 = fibonacciHeap1.findMin();
        boolean boolean7 = fibonacciHeap1.empty();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode9 = fibonacciHeap1.new HeapNode((int) (short) 100);
        org.junit.Assert.assertNull(heapNode6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test5500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5500");
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap1 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int2 = fibonacciHeap1.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap4 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap1.meld(fibonacciHeap4);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap7 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        fibonacciHeap1.meld(fibonacciHeap7);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap10 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int11 = fibonacciHeap10.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap13 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((int) 'a');
        fibonacciHeap10.meld(fibonacciHeap13);
        fibonacciHeap13.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode17 = fibonacciHeap13.new HeapNode(0);
        fibonacciHeap1.meld(fibonacciHeap13);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap20 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int21 = fibonacciHeap20.size();
        fibonacciHeap1.meld(fibonacciHeap20);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap24 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        fibonacciHeap1.meld(fibonacciHeap24);
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap27 = new com.thealgorithms.datastructures.heaps.FibonacciHeap((-1));
        int int28 = fibonacciHeap27.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode30 = fibonacciHeap27.insert(0);
        fibonacciHeap27.deleteMin();
        fibonacciHeap24.meld(fibonacciHeap27);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode34 = fibonacciHeap24.new HeapNode((int) (short) 10);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode35 = fibonacciHeap24.findMin();
        int[] intArray36 = fibonacciHeap24.countersRep();
        int[] intArray37 = fibonacciHeap24.countersRep();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap39 = new com.thealgorithms.datastructures.heaps.FibonacciHeap(10);
        int int40 = fibonacciHeap39.size();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode41 = fibonacciHeap39.findMin();
        int int42 = fibonacciHeap39.potential();
        com.thealgorithms.datastructures.heaps.FibonacciHeap fibonacciHeap43 = new com.thealgorithms.datastructures.heaps.FibonacciHeap();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode45 = fibonacciHeap43.new HeapNode((int) (byte) 1);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode47 = fibonacciHeap43.new HeapNode((int) (short) 100);
        boolean boolean48 = fibonacciHeap43.empty();
        fibonacciHeap39.meld(fibonacciHeap43);
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode50 = fibonacciHeap39.findMin();
        int int51 = fibonacciHeap39.size();
        fibonacciHeap24.meld(fibonacciHeap39);
        fibonacciHeap39.deleteMin();
        com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode heapNode55 = fibonacciHeap39.new HeapNode((int) '#');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(heapNode30);
        org.junit.Assert.assertNotNull(heapNode35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[6, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[6, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(heapNode41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(heapNode50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }
}

